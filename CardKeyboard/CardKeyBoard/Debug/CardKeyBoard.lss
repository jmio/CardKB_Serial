
CardKeyBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00002390  00002424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000151  00800280  00800280  000025a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bad5  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002360  00000000  00000000  0000e5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000340b  00000000  00000000  00010939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ebc  00000000  00000000  00013d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002de0  00000000  00000000  00014c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000599f  00000000  00000000  000179e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  0001d37f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__dtors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_3>
      10:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_3>
      14:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_3>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_16>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_24>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	aa 09       	sbc	r26, r10
      6a:	9b 09       	sbc	r25, r11
      6c:	ae 09       	sbc	r26, r14
      6e:	b3 09       	sbc	r27, r3
      70:	c2 09       	sbc	r28, r2
      72:	c7 09       	sbc	r28, r7
      74:	d6 09       	sbc	r29, r6

00000076 <__trampolines_end>:
      76:	00 00       	nop
      78:	00 08       	sbc	r0, r0
      7a:	00 02       	muls	r16, r16
      7c:	01 00       	.word	0x0001	; ????
      7e:	00 03       	mulsu	r16, r16
      80:	04 07       	cpc	r16, r20
	...

0000008a <digital_pin_to_bit_mask_PGM>:
      8a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      9a:	04 08 10 20                                         ... 

0000009e <digital_pin_to_port_PGM>:
      9e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ae:	03 03 03 03                                         ....

000000b2 <port_to_input_PGM>:
      b2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000bc <port_to_output_PGM>:
      bc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c6 <port_to_mode_PGM>:
      c6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d0 <__ctors_start>:
      d0:	de 07       	cpc	r29, r30
      d2:	6b 0e       	add	r6, r27

000000d4 <__ctors_end>:
      d4:	ef 07       	cpc	r30, r31

000000d6 <__dtors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf ef       	ldi	r28, 0xFF	; 255
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	12 e0       	ldi	r17, 0x02	; 2
      e4:	a0 e0       	ldi	r26, 0x00	; 0
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	e0 e9       	ldi	r30, 0x90	; 144
      ea:	f3 e2       	ldi	r31, 0x23	; 35
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a0 38       	cpi	r26, 0x80	; 128
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	a0 e8       	ldi	r26, 0x80	; 128
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a1 3d       	cpi	r26, 0xD1	; 209
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>

00000108 <__do_global_ctors>:
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	ca e6       	ldi	r28, 0x6A	; 106
     10c:	d0 e0       	ldi	r29, 0x00	; 0
     10e:	04 c0       	rjmp	.+8      	; 0x118 <__do_global_ctors+0x10>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	fe 01       	movw	r30, r28
     114:	0e 94 8d 10 	call	0x211a	; 0x211a <__tablejump2__>
     118:	c8 36       	cpi	r28, 0x68	; 104
     11a:	d1 07       	cpc	r29, r17
     11c:	c9 f7       	brne	.-14     	; 0x110 <__do_global_ctors+0x8>
     11e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <main>
     122:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__do_global_dtors>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_ZN17Adafruit_NeoPixelD1Ev>:
    }
    p[rOffset] = r;          // Store R,G,B
    p[gOffset] = g;
    p[bOffset] = b;
  }
}
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	ec 01       	movw	r28, r24
     130:	89 85       	ldd	r24, Y+9	; 0x09
     132:	9a 85       	ldd	r25, Y+10	; 0x0a
     134:	0e 94 2b 11 	call	0x2256	; 0x2256 <free>
     138:	8e 81       	ldd	r24, Y+6	; 0x06
     13a:	9f 81       	ldd	r25, Y+7	; 0x07
     13c:	97 fd       	sbrc	r25, 7
     13e:	05 c0       	rjmp	.+10     	; 0x14a <_ZN17Adafruit_NeoPixelD1Ev+0x20>
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <pinMode>
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <_ZN17Adafruit_NeoPixel5beginEv>:
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	ec 01       	movw	r28, r24
     156:	8e 81       	ldd	r24, Y+6	; 0x06
     158:	9f 81       	ldd	r25, Y+7	; 0x07
     15a:	97 fd       	sbrc	r25, 7
     15c:	07 c0       	rjmp	.+14     	; 0x16c <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8e 81       	ldd	r24, Y+6	; 0x06
     168:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	89 83       	std	Y+1, r24	; 0x01
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <_ZN17Adafruit_NeoPixel12updateLengthEj>:
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
     184:	7b 01       	movw	r14, r22
     186:	89 85       	ldd	r24, Y+9	; 0x09
     188:	9a 85       	ldd	r25, Y+10	; 0x0a
     18a:	0e 94 2b 11 	call	0x2256	; 0x2256 <free>
     18e:	9e 85       	ldd	r25, Y+14	; 0x0e
     190:	8b 85       	ldd	r24, Y+11	; 0x0b
     192:	98 17       	cp	r25, r24
     194:	19 f0       	breq	.+6      	; 0x19c <_ZN17Adafruit_NeoPixel12updateLengthEj+0x26>
     196:	84 e0       	ldi	r24, 0x04	; 4
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x2a>
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	8e 9d       	mul	r24, r14
     1a2:	80 01       	movw	r16, r0
     1a4:	8f 9d       	mul	r24, r15
     1a6:	10 0d       	add	r17, r0
     1a8:	9e 9d       	mul	r25, r14
     1aa:	10 0d       	add	r17, r0
     1ac:	11 24       	eor	r1, r1
     1ae:	1d 83       	std	Y+5, r17	; 0x05
     1b0:	0c 83       	std	Y+4, r16	; 0x04
     1b2:	c8 01       	movw	r24, r16
     1b4:	0e 94 93 10 	call	0x2126	; 0x2126 <malloc>
     1b8:	9a 87       	std	Y+10, r25	; 0x0a
     1ba:	89 87       	std	Y+9, r24	; 0x09
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	41 f0       	breq	.+16     	; 0x1d0 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5a>
     1c0:	a8 01       	movw	r20, r16
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 b4 11 	call	0x2368	; 0x2368 <memset>
     1ca:	fb 82       	std	Y+3, r15	; 0x03
     1cc:	ea 82       	std	Y+2, r14	; 0x02
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x62>
     1d0:	1d 82       	std	Y+5, r1	; 0x05
     1d2:	1c 82       	std	Y+4, r1	; 0x04
     1d4:	1b 82       	std	Y+3, r1	; 0x03
     1d6:	1a 82       	std	Y+2, r1	; 0x02
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	08 95       	ret

000001e6 <_ZN17Adafruit_NeoPixel10updateTypeEj>:
     1e6:	fc 01       	movw	r30, r24
     1e8:	31 e0       	ldi	r19, 0x01	; 1
     1ea:	96 85       	ldd	r25, Z+14	; 0x0e
     1ec:	83 85       	ldd	r24, Z+11	; 0x0b
     1ee:	98 13       	cpse	r25, r24
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	cb 01       	movw	r24, r22
     1f4:	26 e0       	ldi	r18, 0x06	; 6
     1f6:	96 95       	lsr	r25
     1f8:	87 95       	ror	r24
     1fa:	2a 95       	dec	r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
     1fe:	28 2f       	mov	r18, r24
     200:	23 70       	andi	r18, 0x03	; 3
     202:	26 87       	std	Z+14, r18	; 0x0e
     204:	cb 01       	movw	r24, r22
     206:	44 e0       	ldi	r20, 0x04	; 4
     208:	96 95       	lsr	r25
     20a:	87 95       	ror	r24
     20c:	4a 95       	dec	r20
     20e:	e1 f7       	brne	.-8      	; 0x208 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
     210:	83 70       	andi	r24, 0x03	; 3
     212:	83 87       	std	Z+11, r24	; 0x0b
     214:	ab 01       	movw	r20, r22
     216:	56 95       	lsr	r21
     218:	47 95       	ror	r20
     21a:	56 95       	lsr	r21
     21c:	47 95       	ror	r20
     21e:	43 70       	andi	r20, 0x03	; 3
     220:	44 87       	std	Z+12, r20	; 0x0c
     222:	96 2f       	mov	r25, r22
     224:	93 70       	andi	r25, 0x03	; 3
     226:	95 87       	std	Z+13, r25	; 0x0d
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	6f 3f       	cpi	r22, 0xFF	; 255
     22c:	71 05       	cpc	r23, r1
     22e:	11 f0       	breq	.+4      	; 0x234 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     230:	08 f0       	brcs	.+2      	; 0x234 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	90 83       	st	Z, r25
     236:	41 85       	ldd	r20, Z+9	; 0x09
     238:	52 85       	ldd	r21, Z+10	; 0x0a
     23a:	45 2b       	or	r20, r21
     23c:	51 f0       	breq	.+20     	; 0x252 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	28 13       	cpse	r18, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	39 17       	cp	r19, r25
     246:	29 f0       	breq	.+10     	; 0x252 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
     248:	62 81       	ldd	r22, Z+2	; 0x02
     24a:	73 81       	ldd	r23, Z+3	; 0x03
     24c:	cf 01       	movw	r24, r30
     24e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_ZN17Adafruit_NeoPixel12updateLengthEj>
     252:	08 95       	ret

00000254 <_ZN17Adafruit_NeoPixel4showEv>:
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	29 97       	sbiw	r28, 0x09	; 9
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	8c 01       	movw	r16, r24
     276:	dc 01       	movw	r26, r24
     278:	19 96       	adiw	r26, 0x09	; 9
     27a:	8d 91       	ld	r24, X+
     27c:	9c 91       	ld	r25, X
     27e:	1a 97       	sbiw	r26, 0x0a	; 10
     280:	89 2b       	or	r24, r25
     282:	09 f4       	brne	.+2      	; 0x286 <_ZN17Adafruit_NeoPixel4showEv+0x32>
     284:	96 c1       	rjmp	.+812    	; 0x5b2 <nextbyte20+0x30>
     286:	f8 01       	movw	r30, r16
     288:	c7 84       	ldd	r12, Z+15	; 0x0f
     28a:	d0 88       	ldd	r13, Z+16	; 0x10
     28c:	e1 88       	ldd	r14, Z+17	; 0x11
     28e:	f2 88       	ldd	r15, Z+18	; 0x12
     290:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
     294:	6c 15       	cp	r22, r12
     296:	7d 05       	cpc	r23, r13
     298:	8e 05       	cpc	r24, r14
     29a:	9f 05       	cpc	r25, r15
     29c:	48 f4       	brcc	.+18     	; 0x2b0 <_ZN17Adafruit_NeoPixel4showEv+0x5c>
     29e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
     2a2:	d8 01       	movw	r26, r16
     2a4:	1f 96       	adiw	r26, 0x0f	; 15
     2a6:	6d 93       	st	X+, r22
     2a8:	7d 93       	st	X+, r23
     2aa:	8d 93       	st	X+, r24
     2ac:	9c 93       	st	X, r25
     2ae:	52 97       	sbiw	r26, 0x12	; 18
     2b0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
     2b4:	f8 01       	movw	r30, r16
     2b6:	c7 84       	ldd	r12, Z+15	; 0x0f
     2b8:	d0 88       	ldd	r13, Z+16	; 0x10
     2ba:	e1 88       	ldd	r14, Z+17	; 0x11
     2bc:	f2 88       	ldd	r15, Z+18	; 0x12
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	8c 19       	sub	r24, r12
     2c4:	9d 09       	sbc	r25, r13
     2c6:	ae 09       	sbc	r26, r14
     2c8:	bf 09       	sbc	r27, r15
     2ca:	8c 32       	cpi	r24, 0x2C	; 44
     2cc:	91 40       	sbci	r25, 0x01	; 1
     2ce:	a1 05       	cpc	r26, r1
     2d0:	b1 05       	cpc	r27, r1
     2d2:	c8 f2       	brcs	.-78     	; 0x286 <_ZN17Adafruit_NeoPixel4showEv+0x32>
     2d4:	f8 94       	cli
     2d6:	d8 01       	movw	r26, r16
     2d8:	14 96       	adiw	r26, 0x04	; 4
     2da:	8d 91       	ld	r24, X+
     2dc:	9c 91       	ld	r25, X
     2de:	15 97       	sbiw	r26, 0x05	; 5
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	19 96       	adiw	r26, 0x09	; 9
     2e6:	0d 90       	ld	r0, X+
     2e8:	bc 91       	ld	r27, X
     2ea:	a0 2d       	mov	r26, r0
     2ec:	7d 01       	movw	r14, r26
     2ee:	ef ef       	ldi	r30, 0xFF	; 255
     2f0:	ee 1a       	sub	r14, r30
     2f2:	fe 0a       	sbc	r15, r30
     2f4:	8c 91       	ld	r24, X
     2f6:	89 87       	std	Y+9, r24	; 0x09
     2f8:	d8 01       	movw	r26, r16
     2fa:	8c 91       	ld	r24, X
     2fc:	53 96       	adiw	r26, 0x13	; 19
     2fe:	0d 90       	ld	r0, X+
     300:	bc 91       	ld	r27, X
     302:	a0 2d       	mov	r26, r0
     304:	88 23       	and	r24, r24
     306:	09 f4       	brne	.+2      	; 0x30a <_ZN17Adafruit_NeoPixel4showEv+0xb6>
     308:	1a c1       	rjmp	.+564    	; 0x53e <headC+0x88>
     30a:	1d 82       	std	Y+5, r1	; 0x05
     30c:	ab 32       	cpi	r26, 0x2B	; 43
     30e:	b1 05       	cpc	r27, r1
     310:	09 f0       	breq	.+2      	; 0x314 <_ZN17Adafruit_NeoPixel4showEv+0xc0>
     312:	59 c0       	rjmp	.+178    	; 0x3c6 <headD+0x82>
     314:	9b b1       	in	r25, 0x0b	; 11
     316:	f8 01       	movw	r30, r16
     318:	85 89       	ldd	r24, Z+21	; 0x15
     31a:	98 2b       	or	r25, r24
     31c:	98 87       	std	Y+8, r25	; 0x08
     31e:	9b b1       	in	r25, 0x0b	; 11
     320:	80 95       	com	r24
     322:	89 23       	and	r24, r25
     324:	8f 83       	std	Y+7, r24	; 0x07
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	8e 83       	std	Y+6, r24	; 0x06
     32a:	89 85       	ldd	r24, Y+9	; 0x09
     32c:	87 ff       	sbrs	r24, 7
     32e:	02 c0       	rjmp	.+4      	; 0x334 <_ZN17Adafruit_NeoPixel4showEv+0xe0>
     330:	88 85       	ldd	r24, Y+8	; 0x08
     332:	8e 83       	std	Y+6, r24	; 0x06
     334:	58 85       	ldd	r21, Y+8	; 0x08
     336:	6f 81       	ldd	r22, Y+7	; 0x07
     338:	49 85       	ldd	r20, Y+9	; 0x09
     33a:	3e 81       	ldd	r19, Y+6	; 0x06
     33c:	2d 81       	ldd	r18, Y+5	; 0x05
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	d7 01       	movw	r26, r14

00000344 <headD>:
     344:	5b b9       	out	0x0b, r21	; 11
     346:	26 2f       	mov	r18, r22
     348:	3b b9       	out	0x0b, r19	; 11
     34a:	00 c0       	rjmp	.+0      	; 0x34c <headD+0x8>
     34c:	46 fd       	sbrc	r20, 6
     34e:	25 2f       	mov	r18, r21
     350:	6b b9       	out	0x0b, r22	; 11
     352:	00 c0       	rjmp	.+0      	; 0x354 <headD+0x10>
     354:	5b b9       	out	0x0b, r21	; 11
     356:	36 2f       	mov	r19, r22
     358:	2b b9       	out	0x0b, r18	; 11
     35a:	00 c0       	rjmp	.+0      	; 0x35c <headD+0x18>
     35c:	45 fd       	sbrc	r20, 5
     35e:	35 2f       	mov	r19, r21
     360:	6b b9       	out	0x0b, r22	; 11
     362:	00 c0       	rjmp	.+0      	; 0x364 <headD+0x20>
     364:	5b b9       	out	0x0b, r21	; 11
     366:	26 2f       	mov	r18, r22
     368:	3b b9       	out	0x0b, r19	; 11
     36a:	00 c0       	rjmp	.+0      	; 0x36c <headD+0x28>
     36c:	44 fd       	sbrc	r20, 4
     36e:	25 2f       	mov	r18, r21
     370:	6b b9       	out	0x0b, r22	; 11
     372:	00 c0       	rjmp	.+0      	; 0x374 <headD+0x30>
     374:	5b b9       	out	0x0b, r21	; 11
     376:	36 2f       	mov	r19, r22
     378:	2b b9       	out	0x0b, r18	; 11
     37a:	00 c0       	rjmp	.+0      	; 0x37c <headD+0x38>
     37c:	43 fd       	sbrc	r20, 3
     37e:	35 2f       	mov	r19, r21
     380:	6b b9       	out	0x0b, r22	; 11
     382:	00 c0       	rjmp	.+0      	; 0x384 <headD+0x40>
     384:	5b b9       	out	0x0b, r21	; 11
     386:	26 2f       	mov	r18, r22
     388:	3b b9       	out	0x0b, r19	; 11
     38a:	00 c0       	rjmp	.+0      	; 0x38c <headD+0x48>
     38c:	42 fd       	sbrc	r20, 2
     38e:	25 2f       	mov	r18, r21
     390:	6b b9       	out	0x0b, r22	; 11
     392:	00 c0       	rjmp	.+0      	; 0x394 <headD+0x50>
     394:	5b b9       	out	0x0b, r21	; 11
     396:	36 2f       	mov	r19, r22
     398:	2b b9       	out	0x0b, r18	; 11
     39a:	00 c0       	rjmp	.+0      	; 0x39c <headD+0x58>
     39c:	41 fd       	sbrc	r20, 1
     39e:	35 2f       	mov	r19, r21
     3a0:	6b b9       	out	0x0b, r22	; 11
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <headD+0x60>
     3a4:	5b b9       	out	0x0b, r21	; 11
     3a6:	26 2f       	mov	r18, r22
     3a8:	3b b9       	out	0x0b, r19	; 11
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <headD+0x68>
     3ac:	40 fd       	sbrc	r20, 0
     3ae:	25 2f       	mov	r18, r21
     3b0:	6b b9       	out	0x0b, r22	; 11
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	5b b9       	out	0x0b, r21	; 11
     3b6:	36 2f       	mov	r19, r22
     3b8:	2b b9       	out	0x0b, r18	; 11
     3ba:	4d 91       	ld	r20, X+
     3bc:	47 fd       	sbrc	r20, 7
     3be:	35 2f       	mov	r19, r21
     3c0:	6b b9       	out	0x0b, r22	; 11
     3c2:	01 f6       	brne	.-128    	; 0x344 <headD>
     3c4:	b8 c0       	rjmp	.+368    	; 0x536 <headC+0x80>
     3c6:	a5 32       	cpi	r26, 0x25	; 37
     3c8:	b1 05       	cpc	r27, r1
     3ca:	09 f0       	breq	.+2      	; 0x3ce <headD+0x8a>
     3cc:	59 c0       	rjmp	.+178    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     3ce:	95 b1       	in	r25, 0x05	; 5
     3d0:	f8 01       	movw	r30, r16
     3d2:	85 89       	ldd	r24, Z+21	; 0x15
     3d4:	98 2b       	or	r25, r24
     3d6:	98 87       	std	Y+8, r25	; 0x08
     3d8:	95 b1       	in	r25, 0x05	; 5
     3da:	80 95       	com	r24
     3dc:	89 23       	and	r24, r25
     3de:	8f 83       	std	Y+7, r24	; 0x07
     3e0:	8f 81       	ldd	r24, Y+7	; 0x07
     3e2:	8e 83       	std	Y+6, r24	; 0x06
     3e4:	89 85       	ldd	r24, Y+9	; 0x09
     3e6:	87 ff       	sbrs	r24, 7
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <headD+0xaa>
     3ea:	88 85       	ldd	r24, Y+8	; 0x08
     3ec:	8e 83       	std	Y+6, r24	; 0x06
     3ee:	58 85       	ldd	r21, Y+8	; 0x08
     3f0:	6f 81       	ldd	r22, Y+7	; 0x07
     3f2:	49 85       	ldd	r20, Y+9	; 0x09
     3f4:	3e 81       	ldd	r19, Y+6	; 0x06
     3f6:	2d 81       	ldd	r18, Y+5	; 0x05
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	d7 01       	movw	r26, r14

000003fe <headB>:
     3fe:	55 b9       	out	0x05, r21	; 5
     400:	26 2f       	mov	r18, r22
     402:	35 b9       	out	0x05, r19	; 5
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	46 fd       	sbrc	r20, 6
     408:	25 2f       	mov	r18, r21
     40a:	65 b9       	out	0x05, r22	; 5
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	55 b9       	out	0x05, r21	; 5
     410:	36 2f       	mov	r19, r22
     412:	25 b9       	out	0x05, r18	; 5
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     416:	45 fd       	sbrc	r20, 5
     418:	35 2f       	mov	r19, r21
     41a:	65 b9       	out	0x05, r22	; 5
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41e:	55 b9       	out	0x05, r21	; 5
     420:	26 2f       	mov	r18, r22
     422:	35 b9       	out	0x05, r19	; 5
     424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     426:	44 fd       	sbrc	r20, 4
     428:	25 2f       	mov	r18, r21
     42a:	65 b9       	out	0x05, r22	; 5
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	55 b9       	out	0x05, r21	; 5
     430:	36 2f       	mov	r19, r22
     432:	25 b9       	out	0x05, r18	; 5
     434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     436:	43 fd       	sbrc	r20, 3
     438:	35 2f       	mov	r19, r21
     43a:	65 b9       	out	0x05, r22	; 5
     43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43e:	55 b9       	out	0x05, r21	; 5
     440:	26 2f       	mov	r18, r22
     442:	35 b9       	out	0x05, r19	; 5
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	42 fd       	sbrc	r20, 2
     448:	25 2f       	mov	r18, r21
     44a:	65 b9       	out	0x05, r22	; 5
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44e:	55 b9       	out	0x05, r21	; 5
     450:	36 2f       	mov	r19, r22
     452:	25 b9       	out	0x05, r18	; 5
     454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     456:	41 fd       	sbrc	r20, 1
     458:	35 2f       	mov	r19, r21
     45a:	65 b9       	out	0x05, r22	; 5
     45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45e:	55 b9       	out	0x05, r21	; 5
     460:	26 2f       	mov	r18, r22
     462:	35 b9       	out	0x05, r19	; 5
     464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     466:	40 fd       	sbrc	r20, 0
     468:	25 2f       	mov	r18, r21
     46a:	65 b9       	out	0x05, r22	; 5
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	55 b9       	out	0x05, r21	; 5
     470:	36 2f       	mov	r19, r22
     472:	25 b9       	out	0x05, r18	; 5
     474:	4d 91       	ld	r20, X+
     476:	47 fd       	sbrc	r20, 7
     478:	35 2f       	mov	r19, r21
     47a:	65 b9       	out	0x05, r22	; 5
     47c:	01 f6       	brne	.-128    	; 0x3fe <headB>
     47e:	5b c0       	rjmp	.+182    	; 0x536 <headC+0x80>
     480:	98 97       	sbiw	r26, 0x28	; 40
     482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	8c c0       	rjmp	.+280    	; 0x59e <nextbyte20+0x1c>
     486:	98 b1       	in	r25, 0x08	; 8
     488:	f8 01       	movw	r30, r16
     48a:	85 89       	ldd	r24, Z+21	; 0x15
     48c:	98 2b       	or	r25, r24
     48e:	98 87       	std	Y+8, r25	; 0x08
     490:	98 b1       	in	r25, 0x08	; 8
     492:	80 95       	com	r24
     494:	89 23       	and	r24, r25
     496:	8f 83       	std	Y+7, r24	; 0x07
     498:	8f 81       	ldd	r24, Y+7	; 0x07
     49a:	8e 83       	std	Y+6, r24	; 0x06
     49c:	89 85       	ldd	r24, Y+9	; 0x09
     49e:	87 ff       	sbrs	r24, 7
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	88 85       	ldd	r24, Y+8	; 0x08
     4a4:	8e 83       	std	Y+6, r24	; 0x06
     4a6:	58 85       	ldd	r21, Y+8	; 0x08
     4a8:	6f 81       	ldd	r22, Y+7	; 0x07
     4aa:	49 85       	ldd	r20, Y+9	; 0x09
     4ac:	3e 81       	ldd	r19, Y+6	; 0x06
     4ae:	2d 81       	ldd	r18, Y+5	; 0x05
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	d7 01       	movw	r26, r14

000004b6 <headC>:
     4b6:	58 b9       	out	0x08, r21	; 8
     4b8:	26 2f       	mov	r18, r22
     4ba:	38 b9       	out	0x08, r19	; 8
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <headC+0x8>
     4be:	46 fd       	sbrc	r20, 6
     4c0:	25 2f       	mov	r18, r21
     4c2:	68 b9       	out	0x08, r22	; 8
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <headC+0x10>
     4c6:	58 b9       	out	0x08, r21	; 8
     4c8:	36 2f       	mov	r19, r22
     4ca:	28 b9       	out	0x08, r18	; 8
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <headC+0x18>
     4ce:	45 fd       	sbrc	r20, 5
     4d0:	35 2f       	mov	r19, r21
     4d2:	68 b9       	out	0x08, r22	; 8
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <headC+0x20>
     4d6:	58 b9       	out	0x08, r21	; 8
     4d8:	26 2f       	mov	r18, r22
     4da:	38 b9       	out	0x08, r19	; 8
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <headC+0x28>
     4de:	44 fd       	sbrc	r20, 4
     4e0:	25 2f       	mov	r18, r21
     4e2:	68 b9       	out	0x08, r22	; 8
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <headC+0x30>
     4e6:	58 b9       	out	0x08, r21	; 8
     4e8:	36 2f       	mov	r19, r22
     4ea:	28 b9       	out	0x08, r18	; 8
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <headC+0x38>
     4ee:	43 fd       	sbrc	r20, 3
     4f0:	35 2f       	mov	r19, r21
     4f2:	68 b9       	out	0x08, r22	; 8
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <headC+0x40>
     4f6:	58 b9       	out	0x08, r21	; 8
     4f8:	26 2f       	mov	r18, r22
     4fa:	38 b9       	out	0x08, r19	; 8
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <headC+0x48>
     4fe:	42 fd       	sbrc	r20, 2
     500:	25 2f       	mov	r18, r21
     502:	68 b9       	out	0x08, r22	; 8
     504:	00 c0       	rjmp	.+0      	; 0x506 <headC+0x50>
     506:	58 b9       	out	0x08, r21	; 8
     508:	36 2f       	mov	r19, r22
     50a:	28 b9       	out	0x08, r18	; 8
     50c:	00 c0       	rjmp	.+0      	; 0x50e <headC+0x58>
     50e:	41 fd       	sbrc	r20, 1
     510:	35 2f       	mov	r19, r21
     512:	68 b9       	out	0x08, r22	; 8
     514:	00 c0       	rjmp	.+0      	; 0x516 <headC+0x60>
     516:	58 b9       	out	0x08, r21	; 8
     518:	26 2f       	mov	r18, r22
     51a:	38 b9       	out	0x08, r19	; 8
     51c:	00 c0       	rjmp	.+0      	; 0x51e <headC+0x68>
     51e:	40 fd       	sbrc	r20, 0
     520:	25 2f       	mov	r18, r21
     522:	68 b9       	out	0x08, r22	; 8
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	58 b9       	out	0x08, r21	; 8
     528:	36 2f       	mov	r19, r22
     52a:	28 b9       	out	0x08, r18	; 8
     52c:	4d 91       	ld	r20, X+
     52e:	47 fd       	sbrc	r20, 7
     530:	35 2f       	mov	r19, r21
     532:	68 b9       	out	0x08, r22	; 8
     534:	01 f6       	brne	.-128    	; 0x4b6 <headC>
     536:	49 87       	std	Y+9, r20	; 0x09
     538:	3e 83       	std	Y+6, r19	; 0x06
     53a:	2d 83       	std	Y+5, r18	; 0x05
     53c:	2e c0       	rjmp	.+92     	; 0x59a <nextbyte20+0x18>
     53e:	9c 91       	ld	r25, X
     540:	f8 01       	movw	r30, r16
     542:	85 89       	ldd	r24, Z+21	; 0x15
     544:	98 2b       	or	r25, r24
     546:	98 87       	std	Y+8, r25	; 0x08
     548:	9c 91       	ld	r25, X
     54a:	80 95       	com	r24
     54c:	89 23       	and	r24, r25
     54e:	8f 83       	std	Y+7, r24	; 0x07
     550:	8f 81       	ldd	r24, Y+7	; 0x07
     552:	8c 83       	std	Y+4, r24	; 0x04
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	58 85       	ldd	r21, Y+8	; 0x08
     55a:	6f 81       	ldd	r22, Y+7	; 0x07
     55c:	49 85       	ldd	r20, Y+9	; 0x09
     55e:	3b 81       	ldd	r19, Y+3	; 0x03
     560:	2c 81       	ldd	r18, Y+4	; 0x04
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	f7 01       	movw	r30, r14

00000568 <head20>:
     568:	5c 93       	st	X, r21
     56a:	47 fd       	sbrc	r20, 7
     56c:	25 2f       	mov	r18, r21
     56e:	2c 93       	st	X, r18
     570:	26 2f       	mov	r18, r22
     572:	3a 95       	dec	r19
     574:	31 f0       	breq	.+12     	; 0x582 <nextbyte20>
     576:	44 1f       	adc	r20, r20
     578:	6c 93       	st	X, r22
     57a:	00 c0       	rjmp	.+0      	; 0x57c <head20+0x14>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <head20+0x16>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <head20+0x18>
     580:	f3 cf       	rjmp	.-26     	; 0x568 <head20>

00000582 <nextbyte20>:
     582:	6c 93       	st	X, r22
     584:	00 00       	nop
     586:	38 e0       	ldi	r19, 0x08	; 8
     588:	41 91       	ld	r20, Z+
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	69 f7       	brne	.-38     	; 0x568 <head20>
     58e:	f8 01       	movw	r30, r16
     590:	b4 8b       	std	Z+20, r27	; 0x14
     592:	a3 8b       	std	Z+19, r26	; 0x13
     594:	49 87       	std	Y+9, r20	; 0x09
     596:	3b 83       	std	Y+3, r19	; 0x03
     598:	2c 83       	std	Y+4, r18	; 0x04
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	78 94       	sei
     5a0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
     5a4:	d8 01       	movw	r26, r16
     5a6:	1f 96       	adiw	r26, 0x0f	; 15
     5a8:	6d 93       	st	X+, r22
     5aa:	7d 93       	st	X+, r23
     5ac:	8d 93       	st	X+, r24
     5ae:	9c 93       	st	X, r25
     5b0:	52 97       	sbiw	r26, 0x12	; 18
     5b2:	29 96       	adiw	r28, 0x09	; 9
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	08 95       	ret

000005d0 <_ZN17Adafruit_NeoPixel6setPinEj>:
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	8c 01       	movw	r16, r24
     5da:	eb 01       	movw	r28, r22
     5dc:	dc 01       	movw	r26, r24
     5de:	11 96       	adiw	r26, 0x01	; 1
     5e0:	8c 91       	ld	r24, X
     5e2:	11 97       	sbiw	r26, 0x01	; 1
     5e4:	88 23       	and	r24, r24
     5e6:	49 f0       	breq	.+18     	; 0x5fa <_ZN17Adafruit_NeoPixel6setPinEj+0x2a>
     5e8:	16 96       	adiw	r26, 0x06	; 6
     5ea:	8d 91       	ld	r24, X+
     5ec:	9c 91       	ld	r25, X
     5ee:	17 97       	sbiw	r26, 0x07	; 7
     5f0:	97 fd       	sbrc	r25, 7
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <_ZN17Adafruit_NeoPixel6setPinEj+0x2a>
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
     5fa:	f8 01       	movw	r30, r16
     5fc:	d7 83       	std	Z+7, r29	; 0x07
     5fe:	c6 83       	std	Z+6, r28	; 0x06
     600:	81 81       	ldd	r24, Z+1	; 0x01
     602:	88 23       	and	r24, r24
     604:	41 f0       	breq	.+16     	; 0x616 <_ZN17Adafruit_NeoPixel6setPinEj+0x46>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	8c 2f       	mov	r24, r28
     60a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	8c 2f       	mov	r24, r28
     612:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
     616:	fe 01       	movw	r30, r28
     618:	e2 56       	subi	r30, 0x62	; 98
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	e4 91       	lpm	r30, Z
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	e4 54       	subi	r30, 0x44	; 68
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	85 91       	lpm	r24, Z+
     62a:	94 91       	lpm	r25, Z
     62c:	d8 01       	movw	r26, r16
     62e:	54 96       	adiw	r26, 0x14	; 20
     630:	9c 93       	st	X, r25
     632:	8e 93       	st	-X, r24
     634:	53 97       	sbiw	r26, 0x13	; 19
     636:	fe 01       	movw	r30, r28
     638:	e6 57       	subi	r30, 0x76	; 118
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	e4 91       	lpm	r30, Z
     63e:	55 96       	adiw	r26, 0x15	; 21
     640:	ec 93       	st	X, r30
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <_ZN17Adafruit_NeoPixelC1Ejjj>:
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
     65a:	7b 01       	movw	r14, r22
     65c:	8a 01       	movw	r16, r20
     65e:	19 82       	std	Y+1, r1	; 0x01
     660:	18 86       	std	Y+8, r1	; 0x08
     662:	1a 86       	std	Y+10, r1	; 0x0a
     664:	19 86       	std	Y+9, r1	; 0x09
     666:	1f 86       	std	Y+15, r1	; 0x0f
     668:	18 8a       	std	Y+16, r1	; 0x10
     66a:	19 8a       	std	Y+17, r1	; 0x11
     66c:	1a 8a       	std	Y+18, r1	; 0x12
     66e:	b9 01       	movw	r22, r18
     670:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN17Adafruit_NeoPixel10updateTypeEj>
     674:	b7 01       	movw	r22, r14
     676:	ce 01       	movw	r24, r28
     678:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN17Adafruit_NeoPixel12updateLengthEj>
     67c:	b8 01       	movw	r22, r16
     67e:	ce 01       	movw	r24, r28
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_ZN17Adafruit_NeoPixel6setPinEj>

00000690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is white (for RGBW
              pixels) or ignored (for RGB pixels), next is red, then green,
              and least significant byte is blue.
*/
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
     690:	7f 92       	push	r7
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	fc 01       	movw	r30, r24
  if(n < numLEDs) {
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	93 81       	ldd	r25, Z+3	; 0x03
     6b0:	68 17       	cp	r22, r24
     6b2:	79 07       	cpc	r23, r25
     6b4:	08 f0       	brcs	.+2      	; 0x6b8 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
     6b6:	53 c0       	rjmp	.+166    	; 0x75e <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
     6b8:	4a 01       	movw	r8, r20
     6ba:	aa 24       	eor	r10, r10
     6bc:	bb 24       	eor	r11, r11
     6be:	78 2c       	mov	r7, r8
      g = (uint8_t)(c >>  8),
     6c0:	c3 2e       	mov	r12, r19
     6c2:	d4 2e       	mov	r13, r20
     6c4:	e5 2e       	mov	r14, r21
     6c6:	ff 24       	eor	r15, r15
     6c8:	bc 2d       	mov	r27, r12
      b = (uint8_t)c;
     6ca:	a2 2f       	mov	r26, r18
    if(brightness) { // See notes in setBrightness()
     6cc:	80 85       	ldd	r24, Z+8	; 0x08
     6ce:	88 23       	and	r24, r24
     6d0:	61 f0       	breq	.+24     	; 0x6ea <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
      r = (r * brightness) >> 8;
     6d2:	88 9e       	mul	r8, r24
     6d4:	40 01       	movw	r8, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	79 2c       	mov	r7, r9
      g = (g * brightness) >> 8;
     6da:	8c 9d       	mul	r24, r12
     6dc:	60 01       	movw	r12, r0
     6de:	11 24       	eor	r1, r1
     6e0:	bd 2d       	mov	r27, r13
      b = (b * brightness) >> 8;
     6e2:	82 9f       	mul	r24, r18
     6e4:	70 01       	movw	r14, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	af 2d       	mov	r26, r15
    }
    if(wOffset == rOffset) {
     6ea:	96 85       	ldd	r25, Z+14	; 0x0e
     6ec:	d3 85       	ldd	r29, Z+11	; 0x0b
     6ee:	e1 84       	ldd	r14, Z+9	; 0x09
     6f0:	f2 84       	ldd	r15, Z+10	; 0x0a
     6f2:	9d 13       	cpse	r25, r29
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
      p = &pixels[n * 3];
     6f6:	cb 01       	movw	r24, r22
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	68 0f       	add	r22, r24
     6fe:	79 1f       	adc	r23, r25
     700:	6e 0d       	add	r22, r14
     702:	7f 1d       	adc	r23, r15
     704:	1c c0       	rjmp	.+56     	; 0x73e <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    } else {
      p = &pixels[n * 4];
     706:	66 0f       	add	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	66 0f       	add	r22, r22
     70c:	77 1f       	adc	r23, r23
     70e:	6e 0d       	add	r22, r14
     710:	7f 1d       	adc	r23, r15
      uint8_t w = (uint8_t)(c >> 24);
     712:	05 2f       	mov	r16, r21
     714:	11 27       	eor	r17, r17
     716:	22 27       	eor	r18, r18
     718:	33 27       	eor	r19, r19
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
     71a:	7b 01       	movw	r14, r22
     71c:	e9 0e       	add	r14, r25
     71e:	f1 1c       	adc	r15, r1
     720:	81 11       	cpse	r24, r1
     722:	02 c0       	rjmp	.+4      	; 0x728 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
     724:	20 2f       	mov	r18, r16
     726:	09 c0       	rjmp	.+18     	; 0x73a <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	80 9f       	mul	r24, r16
     72c:	60 01       	movw	r12, r0
     72e:	81 9f       	mul	r24, r17
     730:	d0 0c       	add	r13, r0
     732:	90 9f       	mul	r25, r16
     734:	d0 0c       	add	r13, r0
     736:	11 24       	eor	r1, r1
     738:	2d 2d       	mov	r18, r13
     73a:	e7 01       	movw	r28, r14
     73c:	28 83       	st	Y, r18
    }
    p[rOffset] = r;
     73e:	83 85       	ldd	r24, Z+11	; 0x0b
     740:	9b 01       	movw	r18, r22
     742:	28 0f       	add	r18, r24
     744:	31 1d       	adc	r19, r1
     746:	e9 01       	movw	r28, r18
     748:	78 82       	st	Y, r7
    p[gOffset] = g;
     74a:	84 85       	ldd	r24, Z+12	; 0x0c
     74c:	eb 01       	movw	r28, r22
     74e:	c8 0f       	add	r28, r24
     750:	d1 1d       	adc	r29, r1
     752:	b8 83       	st	Y, r27
    p[bOffset] = b;
     754:	85 85       	ldd	r24, Z+13	; 0x0d
     756:	fb 01       	movw	r30, r22
     758:	e8 0f       	add	r30, r24
     75a:	f1 1d       	adc	r31, r1
     75c:	a0 83       	st	Z, r26
  }
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	7f 90       	pop	r7
     778:	08 95       	ret

0000077a <_Z7flashOnv>:
int _shift = 0, _fn = 0, _sym = 0, idle = 0;
unsigned char KEY = 0, hadPressed = 0;
int Mode = 0; //0->normal.1->shift 2->long_shift, 3->sym, 4->long_shift 5->fn,6->long_fn
void flashOn()
{
  pixels.setPixelColor(0, pixels.Color(3, 3, 3)); pixels.show();
     77a:	23 e0       	ldi	r18, 0x03	; 3
     77c:	33 e0       	ldi	r19, 0x03	; 3
     77e:	43 e0       	ldi	r20, 0x03	; 3
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	8b ea       	ldi	r24, 0xAB	; 171
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     78e:	8b ea       	ldi	r24, 0xAB	; 171
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	0c 94 2a 01 	jmp	0x254	; 0x254 <_ZN17Adafruit_NeoPixel4showEv>

00000796 <_Z8flashOffv>:
}
void flashOff()
{
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	8b ea       	ldi	r24, 0xAB	; 171
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     7a8:	8b ea       	ldi	r24, 0xAB	; 171
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0c 94 2a 01 	jmp	0x254	; 0x254 <_ZN17Adafruit_NeoPixel4showEv>

000007b0 <setup>:
  }
}


void setup()
{
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
  pinMode(A3, OUTPUT);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	81 e1       	ldi	r24, 0x11	; 17
     7c0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
  pinMode(A2, OUTPUT);
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	80 e1       	ldi	r24, 0x10	; 16
     7c8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
  pinMode(A1, OUTPUT);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	8f e0       	ldi	r24, 0x0F	; 15
     7d0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
  pinMode(A0, OUTPUT);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	8e e0       	ldi	r24, 0x0E	; 14
     7d8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
  digitalWrite(A0, HIGH);
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8e e0       	ldi	r24, 0x0E	; 14
     7e0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A1, LOW);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	8f e0       	ldi	r24, 0x0F	; 15
     7e8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A2, LOW);
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A3, LOW);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	81 e1       	ldi	r24, 0x11	; 17
     7f8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  DDRB = 0x00;
     7fc:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff;
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	85 b9       	out	0x05, r24	; 5
  DDRD = 0x00;
     802:	1a b8       	out	0x0a, r1	; 10
  PORTD = 0xff;
     804:	8b b9       	out	0x0b, r24	; 11

  pixels.begin();
     806:	8b ea       	ldi	r24, 0xAB	; 171
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN17Adafruit_NeoPixel5beginEv>
     80e:	c3 e0       	ldi	r28, 0x03	; 3
     810:	d0 e0       	ldi	r29, 0x00	; 0
     812:	c1 2c       	mov	r12, r1
     814:	d1 2c       	mov	r13, r1
     816:	76 01       	movw	r14, r12
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < 30; i++)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
     818:	b6 01       	movw	r22, r12
     81a:	55 27       	eor	r21, r21
     81c:	44 27       	eor	r20, r20
     81e:	be 2d       	mov	r27, r14
     820:	ad 2d       	mov	r26, r13
     822:	9c 2d       	mov	r25, r12
     824:	88 27       	eor	r24, r24
     826:	84 2b       	or	r24, r20
     828:	95 2b       	or	r25, r21
     82a:	a6 2b       	or	r26, r22
     82c:	b7 2b       	or	r27, r23
     82e:	9c 01       	movw	r18, r24
     830:	ad 01       	movw	r20, r26
     832:	2c 29       	or	r18, r12
     834:	3d 29       	or	r19, r13
     836:	4e 29       	or	r20, r14
     838:	5f 29       	or	r21, r15
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	8b ea       	ldi	r24, 0xAB	; 171
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     846:	8b ea       	ldi	r24, 0xAB	; 171
     848:	92 e0       	ldi	r25, 0x02	; 2
     84a:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN17Adafruit_NeoPixel4showEv>
      delay(6);
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	c8 1a       	sub	r12, r24
     85e:	d8 0a       	sbc	r13, r24
     860:	e8 0a       	sbc	r14, r24
     862:	f8 0a       	sbc	r15, r24
  PORTD = 0xff;

  pixels.begin();
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < 30; i++)
     864:	8e e1       	ldi	r24, 0x1E	; 30
     866:	c8 16       	cp	r12, r24
     868:	d1 04       	cpc	r13, r1
     86a:	e1 04       	cpc	r14, r1
     86c:	f1 04       	cpc	r15, r1
     86e:	a1 f6       	brne	.-88     	; 0x818 <setup+0x68>
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }
    for (int i = 30; i > 0; i--)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
     870:	b6 01       	movw	r22, r12
     872:	55 27       	eor	r21, r21
     874:	44 27       	eor	r20, r20
     876:	be 2d       	mov	r27, r14
     878:	ad 2d       	mov	r26, r13
     87a:	9c 2d       	mov	r25, r12
     87c:	88 27       	eor	r24, r24
     87e:	84 2b       	or	r24, r20
     880:	95 2b       	or	r25, r21
     882:	a6 2b       	or	r26, r22
     884:	b7 2b       	or	r27, r23
     886:	9c 01       	movw	r18, r24
     888:	ad 01       	movw	r20, r26
     88a:	2c 29       	or	r18, r12
     88c:	3d 29       	or	r19, r13
     88e:	4e 29       	or	r20, r14
     890:	5f 29       	or	r21, r15
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	8b ea       	ldi	r24, 0xAB	; 171
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     89e:	8b ea       	ldi	r24, 0xAB	; 171
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN17Adafruit_NeoPixel4showEv>
      delay(6);
     8a6:	66 e0       	ldi	r22, 0x06	; 6
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	c8 1a       	sub	r12, r24
     8b6:	d1 08       	sbc	r13, r1
     8b8:	e1 08       	sbc	r14, r1
     8ba:	f1 08       	sbc	r15, r1
    for (int i = 0; i < 30; i++)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }
    for (int i = 30; i > 0; i--)
     8bc:	c9 f6       	brne	.-78     	; 0x870 <setup+0xc0>
     8be:	21 97       	sbiw	r28, 0x01	; 1
  PORTB = 0xff;
  DDRD = 0x00;
  PORTD = 0xff;

  pixels.begin();
  for (int j = 0; j < 3; j++)
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <setup+0x114>
     8c2:	a7 cf       	rjmp	.-178    	; 0x812 <setup+0x62>
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }

  }
  pixels.setPixelColor(0, pixels.Color(0, 0, 0));
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	a9 01       	movw	r20, r18
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	8b ea       	ldi	r24, 0xAB	; 171
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
#ifndef USE_SOFTUART
  Wire.begin(0x5f);
  Wire.onRequest(requestEvent);
#else
  softSerial.begin(115200);  
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	52 ec       	ldi	r21, 0xC2	; 194
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	8c e8       	ldi	r24, 0x8C	; 140
     8e0:	92 e0       	ldi	r25, 0x02	; 2
#endif
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
  pixels.setPixelColor(0, pixels.Color(0, 0, 0));
#ifndef USE_SOFTUART
  Wire.begin(0x5f);
  Wire.onRequest(requestEvent);
#else
  softSerial.begin(115200);  
     8ee:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_ZN14SoftwareSerial5beginEl>

000008f2 <_Z8GetInputv>:
#endif
}

unsigned char GetInput()
{
  digitalWrite(A3, LOW);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	81 e1       	ldi	r24, 0x11	; 17
     8f6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A2, HIGH);
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A1, HIGH);
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	8f e0       	ldi	r24, 0x0F	; 15
     906:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A0, HIGH);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  delay(2);
     912:	62 e0       	ldi	r22, 0x02	; 2
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
  switch (PIND)
     91e:	89 b1       	in	r24, 0x09	; 9
     920:	8f 3e       	cpi	r24, 0xEF	; 239
     922:	09 f4       	brne	.+2      	; 0x926 <__stack+0x27>
     924:	49 c0       	rjmp	.+146    	; 0x9b8 <__stack+0xb9>
     926:	50 f4       	brcc	.+20     	; 0x93c <__stack+0x3d>
     928:	8f 3b       	cpi	r24, 0xBF	; 191
     92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
     92c:	5f c0       	rjmp	.+190    	; 0x9ec <__stack+0xed>
     92e:	8f 3d       	cpi	r24, 0xDF	; 223
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	4f c0       	rjmp	.+158    	; 0x9d2 <__stack+0xd3>
     934:	8f 37       	cpi	r24, 0x7F	; 127
     936:	09 f0       	breq	.+2      	; 0x93a <__stack+0x3b>
     938:	73 c0       	rjmp	.+230    	; 0xa20 <__stack+0x121>
     93a:	65 c0       	rjmp	.+202    	; 0xa06 <__stack+0x107>
     93c:	8b 3f       	cpi	r24, 0xFB	; 251
     93e:	11 f1       	breq	.+68     	; 0x984 <__stack+0x85>
     940:	18 f4       	brcc	.+6      	; 0x948 <__stack+0x49>
     942:	87 3f       	cpi	r24, 0xF7	; 247
     944:	61 f1       	breq	.+88     	; 0x99e <__stack+0x9f>
     946:	6c c0       	rjmp	.+216    	; 0xa20 <__stack+0x121>
     948:	8d 3f       	cpi	r24, 0xFD	; 253
     94a:	79 f0       	breq	.+30     	; 0x96a <__stack+0x6b>
     94c:	8e 3f       	cpi	r24, 0xFE	; 254
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
     950:	67 c0       	rjmp	.+206    	; 0xa20 <__stack+0x121>
  {
    case 254: while (PIND != 0xff) {
     952:	89 b1       	in	r24, 0x09	; 9
     954:	8f 3f       	cpi	r24, 0xFF	; 255
     956:	19 f0       	breq	.+6      	; 0x95e <__stack+0x5f>
        flashOn();
     958:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     95c:	fa cf       	rjmp	.-12     	; 0x952 <__stack+0x53>
        flashOn();
        //delay(1);
      } flashOff();   hadPressed = 1; return  1; break;
     95e:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     968:	08 95       	ret
    case 253: while (PIND != 0xff) {
     96a:	89 b1       	in	r24, 0x09	; 9
     96c:	8f 3f       	cpi	r24, 0xFF	; 255
     96e:	19 f0       	breq	.+6      	; 0x976 <__stack+0x77>
        flashOn();
     970:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();   hadPressed = 1; return  1; break;
    case 253: while (PIND != 0xff) {
     974:	fa cf       	rjmp	.-12     	; 0x96a <__stack+0x6b>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 2; break;
     976:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	08 95       	ret
    case 251: while (PIND != 0xff) {
     984:	89 b1       	in	r24, 0x09	; 9
     986:	8f 3f       	cpi	r24, 0xFF	; 255
     988:	19 f0       	breq	.+6      	; 0x990 <__stack+0x91>
        flashOn();
     98a:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();   hadPressed = 1; return  1; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 2; break;
    case 251: while (PIND != 0xff) {
     98e:	fa cf       	rjmp	.-12     	; 0x984 <__stack+0x85>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 3; break;
     990:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	08 95       	ret
    case 247: while (PIND != 0xff) {
     99e:	89 b1       	in	r24, 0x09	; 9
     9a0:	8f 3f       	cpi	r24, 0xFF	; 255
     9a2:	19 f0       	breq	.+6      	; 0x9aa <__stack+0xab>
        flashOn();
     9a4:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 2; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 3; break;
    case 247: while (PIND != 0xff) {
     9a8:	fa cf       	rjmp	.-12     	; 0x99e <__stack+0x9f>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 4; break;
     9aa:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     9b4:	84 e0       	ldi	r24, 0x04	; 4
     9b6:	08 95       	ret
    case 239: while (PIND != 0xff) {
     9b8:	89 b1       	in	r24, 0x09	; 9
     9ba:	8f 3f       	cpi	r24, 0xFF	; 255
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <__stack+0xc5>
        flashOn();
     9be:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 3; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 4; break;
    case 239: while (PIND != 0xff) {
     9c2:	fa cf       	rjmp	.-12     	; 0x9b8 <__stack+0xb9>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 5; break;
     9c4:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	08 95       	ret
    case 223: while (PIND != 0xff) {
     9d2:	89 b1       	in	r24, 0x09	; 9
     9d4:	8f 3f       	cpi	r24, 0xFF	; 255
     9d6:	19 f0       	breq	.+6      	; 0x9de <__stack+0xdf>
        flashOn();
     9d8:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 4; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 5; break;
    case 223: while (PIND != 0xff) {
     9dc:	fa cf       	rjmp	.-12     	; 0x9d2 <__stack+0xd3>
        flashOn();
        //   delay(1);
      } flashOff();  hadPressed = 1; return 6; break;
     9de:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	08 95       	ret
    case 191: while (PIND != 0xff) {
     9ec:	89 b1       	in	r24, 0x09	; 9
     9ee:	8f 3f       	cpi	r24, 0xFF	; 255
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <__stack+0xf9>
        flashOn();
     9f2:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 5; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        //   delay(1);
      } flashOff();  hadPressed = 1; return 6; break;
    case 191: while (PIND != 0xff) {
     9f6:	fa cf       	rjmp	.-12     	; 0x9ec <__stack+0xed>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 7; break;
     9f8:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	08 95       	ret
    case 127: while (PIND != 0xff) {
     a06:	89 b1       	in	r24, 0x09	; 9
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	19 f0       	breq	.+6      	; 0xa12 <__stack+0x113>
        flashOn();
     a0c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 6; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 7; break;
    case 127: while (PIND != 0xff) {
     a10:	fa cf       	rjmp	.-12     	; 0xa06 <__stack+0x107>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return  8; break;
     a12:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	08 95       	ret
  }
  switch (PINB)
     a20:	83 b1       	in	r24, 0x03	; 3
     a22:	8b 3d       	cpi	r24, 0xDB	; 219
     a24:	11 f1       	breq	.+68     	; 0xa6a <__stack+0x16b>
     a26:	18 f4       	brcc	.+6      	; 0xa2e <__stack+0x12f>
     a28:	87 3d       	cpi	r24, 0xD7	; 215
     a2a:	61 f1       	breq	.+88     	; 0xa84 <__stack+0x185>
     a2c:	38 c0       	rjmp	.+112    	; 0xa9e <__stack+0x19f>
     a2e:	8d 3d       	cpi	r24, 0xDD	; 221
     a30:	79 f0       	breq	.+30     	; 0xa50 <__stack+0x151>
     a32:	8e 3d       	cpi	r24, 0xDE	; 222
     a34:	a1 f5       	brne	.+104    	; 0xa9e <__stack+0x19f>
  {
    case 222: while (PINB != 223) {
     a36:	83 b1       	in	r24, 0x03	; 3
     a38:	8f 3d       	cpi	r24, 0xDF	; 223
     a3a:	19 f0       	breq	.+6      	; 0xa42 <__stack+0x143>
        flashOn();
     a3c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
        // delay(1);
      } flashOff();  hadPressed = 1; return  8; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     a40:	fa cf       	rjmp	.-12     	; 0xa36 <__stack+0x137>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 9; break;
     a42:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	08 95       	ret
    case 221: while (PINB != 223) {
     a50:	83 b1       	in	r24, 0x03	; 3
     a52:	8f 3d       	cpi	r24, 0xDF	; 223
     a54:	19 f0       	breq	.+6      	; 0xa5c <__stack+0x15d>
        flashOn();
     a56:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 9; break;
    case 221: while (PINB != 223) {
     a5a:	fa cf       	rjmp	.-12     	; 0xa50 <__stack+0x151>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 10; break;
     a5c:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a66:	8a e0       	ldi	r24, 0x0A	; 10
     a68:	08 95       	ret
    case 219: while (PINB != 223) {
     a6a:	83 b1       	in	r24, 0x03	; 3
     a6c:	8f 3d       	cpi	r24, 0xDF	; 223
     a6e:	19 f0       	breq	.+6      	; 0xa76 <__stack+0x177>
        flashOn();
     a70:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 9; break;
    case 221: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 10; break;
    case 219: while (PINB != 223) {
     a74:	fa cf       	rjmp	.-12     	; 0xa6a <__stack+0x16b>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 11; break;
     a76:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	08 95       	ret
    case 215: while (PINB != 223) {
     a84:	83 b1       	in	r24, 0x03	; 3
     a86:	8f 3d       	cpi	r24, 0xDF	; 223
     a88:	19 f0       	breq	.+6      	; 0xa90 <__stack+0x191>
        flashOn();
     a8a:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 10; break;
    case 219: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 11; break;
    case 215: while (PINB != 223) {
     a8e:	fa cf       	rjmp	.-12     	; 0xa84 <__stack+0x185>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 12; break;
     a90:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	81 e1       	ldi	r24, 0x11	; 17
     aa2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A2,  LOW);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A1, HIGH);
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	8f e0       	ldi	r24, 0x0F	; 15
     ab2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A0, HIGH);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	8e e0       	ldi	r24, 0x0E	; 14
     aba:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  delay(2);
     abe:	62 e0       	ldi	r22, 0x02	; 2
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
  switch (PIND)
     aca:	89 b1       	in	r24, 0x09	; 9
     acc:	8f 3e       	cpi	r24, 0xEF	; 239
     ace:	09 f4       	brne	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	50 c0       	rjmp	.+160    	; 0xb72 <__stack+0x273>
     ad2:	50 f4       	brcc	.+20     	; 0xae8 <__stack+0x1e9>
     ad4:	8f 3b       	cpi	r24, 0xBF	; 191
     ad6:	09 f4       	brne	.+2      	; 0xada <__stack+0x1db>
     ad8:	66 c0       	rjmp	.+204    	; 0xba6 <__stack+0x2a7>
     ada:	8f 3d       	cpi	r24, 0xDF	; 223
     adc:	09 f4       	brne	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	56 c0       	rjmp	.+172    	; 0xb8c <__stack+0x28d>
     ae0:	8f 37       	cpi	r24, 0x7F	; 127
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	7a c0       	rjmp	.+244    	; 0xbda <__stack+0x2db>
     ae6:	6c c0       	rjmp	.+216    	; 0xbc0 <__stack+0x2c1>
     ae8:	8b 3f       	cpi	r24, 0xFB	; 251
     aea:	19 f1       	breq	.+70     	; 0xb32 <__stack+0x233>
     aec:	18 f4       	brcc	.+6      	; 0xaf4 <__stack+0x1f5>
     aee:	87 3f       	cpi	r24, 0xF7	; 247
     af0:	69 f1       	breq	.+90     	; 0xb4c <__stack+0x24d>
     af2:	73 c0       	rjmp	.+230    	; 0xbda <__stack+0x2db>
     af4:	8d 3f       	cpi	r24, 0xFD	; 253
     af6:	81 f0       	breq	.+32     	; 0xb18 <__stack+0x219>
     af8:	8e 3f       	cpi	r24, 0xFE	; 254
     afa:	09 f0       	breq	.+2      	; 0xafe <__stack+0x1ff>
     afc:	6e c0       	rjmp	.+220    	; 0xbda <__stack+0x2db>
  {
    case 254: while (PIND != 0xff) {
     afe:	89 b1       	in	r24, 0x09	; 9
     b00:	8f 3f       	cpi	r24, 0xFF	; 255
     b02:	19 f0       	breq	.+6      	; 0xb0a <__stack+0x20b>
        flashOn();
     b04:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     b08:	fa cf       	rjmp	.-12     	; 0xafe <__stack+0x1ff>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  13; break;
     b0a:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     b14:	8d e0       	ldi	r24, 0x0D	; 13
     b16:	08 95       	ret
    case 253: while (PIND != 0xff) {
     b18:	89 b1       	in	r24, 0x09	; 9
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	19 f0       	breq	.+6      	; 0xb24 <__stack+0x225>
        flashOn();
     b1e:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  13; break;
    case 253: while (PIND != 0xff) {
     b22:	fa cf       	rjmp	.-12     	; 0xb18 <__stack+0x219>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 14; break;
     b24:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     b2e:	8e e0       	ldi	r24, 0x0E	; 14
     b30:	08 95       	ret
    case 251: while (PIND != 0xff) {
     b32:	89 b1       	in	r24, 0x09	; 9
     b34:	8f 3f       	cpi	r24, 0xFF	; 255
     b36:	19 f0       	breq	.+6      	; 0xb3e <__stack+0x23f>
        flashOn();
     b38:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  13; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 14; break;
    case 251: while (PIND != 0xff) {
     b3c:	fa cf       	rjmp	.-12     	; 0xb32 <__stack+0x233>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 15; break;
     b3e:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     b48:	8f e0       	ldi	r24, 0x0F	; 15
     b4a:	08 95       	ret
    case 247: while (PIND != 0xff) {
     b4c:	89 b1       	in	r24, 0x09	; 9
     b4e:	8f 3f       	cpi	r24, 0xFF	; 255
     b50:	49 f0       	breq	.+18     	; 0xb64 <__stack+0x265>
        flashOn();
     b52:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
        delay(1);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      } flashOff();  hadPressed = 1; return 14; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 15; break;
    case 247: while (PIND != 0xff) {
     b62:	f4 cf       	rjmp	.-24     	; 0xb4c <__stack+0x24d>
        flashOn();
        delay(1);
      } flashOff();  hadPressed = 1;  return 16; break;
     b64:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     b6e:	80 e1       	ldi	r24, 0x10	; 16
     b70:	08 95       	ret
    case 239: while (PIND != 0xff) {
     b72:	89 b1       	in	r24, 0x09	; 9
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	19 f0       	breq	.+6      	; 0xb7e <__stack+0x27f>
        flashOn();
     b78:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 15; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        delay(1);
      } flashOff();  hadPressed = 1;  return 16; break;
    case 239: while (PIND != 0xff) {
     b7c:	fa cf       	rjmp	.-12     	; 0xb72 <__stack+0x273>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 17; break;
     b7e:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     b88:	81 e1       	ldi	r24, 0x11	; 17
     b8a:	08 95       	ret
    case 223: while (PIND != 0xff) {
     b8c:	89 b1       	in	r24, 0x09	; 9
     b8e:	8f 3f       	cpi	r24, 0xFF	; 255
     b90:	19 f0       	breq	.+6      	; 0xb98 <__stack+0x299>
        flashOn();
     b92:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 16; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 17; break;
    case 223: while (PIND != 0xff) {
     b96:	fa cf       	rjmp	.-12     	; 0xb8c <__stack+0x28d>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 18; break;
     b98:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     ba2:	82 e1       	ldi	r24, 0x12	; 18
     ba4:	08 95       	ret
    case 191: while (PIND != 0xff) {
     ba6:	89 b1       	in	r24, 0x09	; 9
     ba8:	8f 3f       	cpi	r24, 0xFF	; 255
     baa:	19 f0       	breq	.+6      	; 0xbb2 <__stack+0x2b3>
        flashOn();
     bac:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 17; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 18; break;
    case 191: while (PIND != 0xff) {
     bb0:	fa cf       	rjmp	.-12     	; 0xba6 <__stack+0x2a7>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 19; break;
     bb2:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     bbc:	83 e1       	ldi	r24, 0x13	; 19
     bbe:	08 95       	ret
    case 127: while (PIND != 0xff) {
     bc0:	89 b1       	in	r24, 0x09	; 9
     bc2:	8f 3f       	cpi	r24, 0xFF	; 255
     bc4:	19 f0       	breq	.+6      	; 0xbcc <__stack+0x2cd>
        flashOn();
     bc6:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 18; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 19; break;
    case 127: while (PIND != 0xff) {
     bca:	fa cf       	rjmp	.-12     	; 0xbc0 <__stack+0x2c1>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  20; break;
     bcc:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     bd6:	84 e1       	ldi	r24, 0x14	; 20
     bd8:	08 95       	ret
  }
  switch (PINB)
     bda:	83 b1       	in	r24, 0x03	; 3
     bdc:	8b 3d       	cpi	r24, 0xDB	; 219
     bde:	11 f1       	breq	.+68     	; 0xc24 <__stack+0x325>
     be0:	18 f4       	brcc	.+6      	; 0xbe8 <__stack+0x2e9>
     be2:	87 3d       	cpi	r24, 0xD7	; 215
     be4:	61 f1       	breq	.+88     	; 0xc3e <__stack+0x33f>
     be6:	38 c0       	rjmp	.+112    	; 0xc58 <__stack+0x359>
     be8:	8d 3d       	cpi	r24, 0xDD	; 221
     bea:	79 f0       	breq	.+30     	; 0xc0a <__stack+0x30b>
     bec:	8e 3d       	cpi	r24, 0xDE	; 222
     bee:	a1 f5       	brne	.+104    	; 0xc58 <__stack+0x359>
  {
    case 222: while (PINB != 223) {
     bf0:	83 b1       	in	r24, 0x03	; 3
     bf2:	8f 3d       	cpi	r24, 0xDF	; 223
     bf4:	19 f0       	breq	.+6      	; 0xbfc <__stack+0x2fd>
        flashOn();
     bf6:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
        //  delay(1);
      } flashOff();  hadPressed = 1; return  20; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     bfa:	fa cf       	rjmp	.-12     	; 0xbf0 <__stack+0x2f1>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 21; break;
     bfc:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     c06:	85 e1       	ldi	r24, 0x15	; 21
     c08:	08 95       	ret
    case 221: while (PINB != 223) {
     c0a:	83 b1       	in	r24, 0x03	; 3
     c0c:	8f 3d       	cpi	r24, 0xDF	; 223
     c0e:	19 f0       	breq	.+6      	; 0xc16 <__stack+0x317>
        flashOn();
     c10:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 21; break;
    case 221: while (PINB != 223) {
     c14:	fa cf       	rjmp	.-12     	; 0xc0a <__stack+0x30b>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 22; break;
     c16:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     c20:	86 e1       	ldi	r24, 0x16	; 22
     c22:	08 95       	ret
    case 219: while (PINB != 223) {
     c24:	83 b1       	in	r24, 0x03	; 3
     c26:	8f 3d       	cpi	r24, 0xDF	; 223
     c28:	19 f0       	breq	.+6      	; 0xc30 <__stack+0x331>
        flashOn();
     c2a:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 21; break;
    case 221: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 22; break;
    case 219: while (PINB != 223) {
     c2e:	fa cf       	rjmp	.-12     	; 0xc24 <__stack+0x325>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 23; break;
     c30:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     c3a:	87 e1       	ldi	r24, 0x17	; 23
     c3c:	08 95       	ret
    case 215: while (PINB != 223) {
     c3e:	83 b1       	in	r24, 0x03	; 3
     c40:	8f 3d       	cpi	r24, 0xDF	; 223
     c42:	19 f0       	breq	.+6      	; 0xc4a <__stack+0x34b>
        flashOn();
     c44:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 22; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 23; break;
    case 215: while (PINB != 223) {
     c48:	fa cf       	rjmp	.-12     	; 0xc3e <__stack+0x33f>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 24; break;
     c4a:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     c54:	88 e1       	ldi	r24, 0x18	; 24
     c56:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	81 e1       	ldi	r24, 0x11	; 17
     c5c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A2, HIGH);
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	80 e1       	ldi	r24, 0x10	; 16
     c64:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A1, LOW);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	8f e0       	ldi	r24, 0x0F	; 15
     c6c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A0, HIGH);
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	8e e0       	ldi	r24, 0x0E	; 14
     c74:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  delay(2);
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
  switch (PIND)
     c84:	89 b1       	in	r24, 0x09	; 9
     c86:	8f 3e       	cpi	r24, 0xEF	; 239
     c88:	09 f4       	brne	.+2      	; 0xc8c <__stack+0x38d>
     c8a:	4a c0       	rjmp	.+148    	; 0xd20 <__stack+0x421>
     c8c:	50 f4       	brcc	.+20     	; 0xca2 <__stack+0x3a3>
     c8e:	8f 3b       	cpi	r24, 0xBF	; 191
     c90:	09 f4       	brne	.+2      	; 0xc94 <__stack+0x395>
     c92:	60 c0       	rjmp	.+192    	; 0xd54 <__stack+0x455>
     c94:	8f 3d       	cpi	r24, 0xDF	; 223
     c96:	09 f4       	brne	.+2      	; 0xc9a <__stack+0x39b>
     c98:	50 c0       	rjmp	.+160    	; 0xd3a <__stack+0x43b>
     c9a:	8f 37       	cpi	r24, 0x7F	; 127
     c9c:	09 f0       	breq	.+2      	; 0xca0 <__stack+0x3a1>
     c9e:	74 c0       	rjmp	.+232    	; 0xd88 <__stack+0x489>
     ca0:	66 c0       	rjmp	.+204    	; 0xd6e <__stack+0x46f>
     ca2:	8b 3f       	cpi	r24, 0xFB	; 251
     ca4:	19 f1       	breq	.+70     	; 0xcec <__stack+0x3ed>
     ca6:	18 f4       	brcc	.+6      	; 0xcae <__stack+0x3af>
     ca8:	87 3f       	cpi	r24, 0xF7	; 247
     caa:	69 f1       	breq	.+90     	; 0xd06 <__stack+0x407>
     cac:	6d c0       	rjmp	.+218    	; 0xd88 <__stack+0x489>
     cae:	8d 3f       	cpi	r24, 0xFD	; 253
     cb0:	81 f0       	breq	.+32     	; 0xcd2 <__stack+0x3d3>
     cb2:	8e 3f       	cpi	r24, 0xFE	; 254
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <__stack+0x3b9>
     cb6:	68 c0       	rjmp	.+208    	; 0xd88 <__stack+0x489>
  {
    case 254: while (PIND != 0xff) {
     cb8:	89 b1       	in	r24, 0x09	; 9
     cba:	8f 3f       	cpi	r24, 0xFF	; 255
     cbc:	19 f0       	breq	.+6      	; 0xcc4 <__stack+0x3c5>
        flashOn();
     cbe:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  digitalWrite(A1, LOW);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     cc2:	fa cf       	rjmp	.-12     	; 0xcb8 <__stack+0x3b9>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  25; break;
     cc4:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	08 95       	ret
    case 253: while (PIND != 0xff) {
     cd2:	89 b1       	in	r24, 0x09	; 9
     cd4:	8f 3f       	cpi	r24, 0xFF	; 255
     cd6:	19 f0       	breq	.+6      	; 0xcde <__stack+0x3df>
        flashOn();
     cd8:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  25; break;
    case 253: while (PIND != 0xff) {
     cdc:	fa cf       	rjmp	.-12     	; 0xcd2 <__stack+0x3d3>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 26; break;
     cde:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     ce8:	8a e1       	ldi	r24, 0x1A	; 26
     cea:	08 95       	ret
    case 251: while (PIND != 0xff) {
     cec:	89 b1       	in	r24, 0x09	; 9
     cee:	8f 3f       	cpi	r24, 0xFF	; 255
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <__stack+0x3f9>
        flashOn();
     cf2:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  25; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 26; break;
    case 251: while (PIND != 0xff) {
     cf6:	fa cf       	rjmp	.-12     	; 0xcec <__stack+0x3ed>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 27; break;
     cf8:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d02:	8b e1       	ldi	r24, 0x1B	; 27
     d04:	08 95       	ret
    case 247: while (PIND != 0xff) {
     d06:	89 b1       	in	r24, 0x09	; 9
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	19 f0       	breq	.+6      	; 0xd12 <__stack+0x413>
        flashOn();
     d0c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 26; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 27; break;
    case 247: while (PIND != 0xff) {
     d10:	fa cf       	rjmp	.-12     	; 0xd06 <__stack+0x407>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 28; break;
     d12:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d1c:	8c e1       	ldi	r24, 0x1C	; 28
     d1e:	08 95       	ret
    case 239: while (PIND != 0xff) {
     d20:	89 b1       	in	r24, 0x09	; 9
     d22:	8f 3f       	cpi	r24, 0xFF	; 255
     d24:	19 f0       	breq	.+6      	; 0xd2c <__stack+0x42d>
        flashOn();
     d26:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 27; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 28; break;
    case 239: while (PIND != 0xff) {
     d2a:	fa cf       	rjmp	.-12     	; 0xd20 <__stack+0x421>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 29; break;
     d2c:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d36:	8d e1       	ldi	r24, 0x1D	; 29
     d38:	08 95       	ret
    case 223: while (PIND != 0xff) {
     d3a:	89 b1       	in	r24, 0x09	; 9
     d3c:	8f 3f       	cpi	r24, 0xFF	; 255
     d3e:	19 f0       	breq	.+6      	; 0xd46 <__stack+0x447>
        flashOn();
     d40:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 28; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 29; break;
    case 223: while (PIND != 0xff) {
     d44:	fa cf       	rjmp	.-12     	; 0xd3a <__stack+0x43b>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 30; break;
     d46:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d50:	8e e1       	ldi	r24, 0x1E	; 30
     d52:	08 95       	ret
    case 191: while (PIND != 0xff) {
     d54:	89 b1       	in	r24, 0x09	; 9
     d56:	8f 3f       	cpi	r24, 0xFF	; 255
     d58:	19 f0       	breq	.+6      	; 0xd60 <__stack+0x461>
        flashOn();
     d5a:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 29; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 30; break;
    case 191: while (PIND != 0xff) {
     d5e:	fa cf       	rjmp	.-12     	; 0xd54 <__stack+0x455>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 31; break;
     d60:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d6a:	8f e1       	ldi	r24, 0x1F	; 31
     d6c:	08 95       	ret
    case 127: while (PIND != 0xff) {
     d6e:	89 b1       	in	r24, 0x09	; 9
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	19 f0       	breq	.+6      	; 0xd7a <__stack+0x47b>
        flashOn();
     d74:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 30; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 31; break;
    case 127: while (PIND != 0xff) {
     d78:	fa cf       	rjmp	.-12     	; 0xd6e <__stack+0x46f>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  32; break;
     d7a:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     d84:	80 e2       	ldi	r24, 0x20	; 32
     d86:	08 95       	ret
  }
  switch (PINB)
     d88:	83 b1       	in	r24, 0x03	; 3
     d8a:	8b 3d       	cpi	r24, 0xDB	; 219
     d8c:	11 f1       	breq	.+68     	; 0xdd2 <__stack+0x4d3>
     d8e:	18 f4       	brcc	.+6      	; 0xd96 <__stack+0x497>
     d90:	87 3d       	cpi	r24, 0xD7	; 215
     d92:	61 f1       	breq	.+88     	; 0xdec <__stack+0x4ed>
     d94:	38 c0       	rjmp	.+112    	; 0xe06 <__stack+0x507>
     d96:	8d 3d       	cpi	r24, 0xDD	; 221
     d98:	79 f0       	breq	.+30     	; 0xdb8 <__stack+0x4b9>
     d9a:	8e 3d       	cpi	r24, 0xDE	; 222
     d9c:	a1 f5       	brne	.+104    	; 0xe06 <__stack+0x507>
  {
    case 222: while (PINB != 223) {
     d9e:	83 b1       	in	r24, 0x03	; 3
     da0:	8f 3d       	cpi	r24, 0xDF	; 223
     da2:	19 f0       	breq	.+6      	; 0xdaa <__stack+0x4ab>
        flashOn();
     da4:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
        //  delay(1);
      } flashOff();  hadPressed = 1; return  32; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     da8:	fa cf       	rjmp	.-12     	; 0xd9e <__stack+0x49f>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 33; break;
     daa:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     db4:	81 e2       	ldi	r24, 0x21	; 33
     db6:	08 95       	ret
    case 221: while (PINB != 223) {
     db8:	83 b1       	in	r24, 0x03	; 3
     dba:	8f 3d       	cpi	r24, 0xDF	; 223
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <__stack+0x4c5>
        flashOn();
     dbe:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 33; break;
    case 221: while (PINB != 223) {
     dc2:	fa cf       	rjmp	.-12     	; 0xdb8 <__stack+0x4b9>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 34; break;
     dc4:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     dce:	82 e2       	ldi	r24, 0x22	; 34
     dd0:	08 95       	ret
    case 219: while (PINB != 223) {
     dd2:	83 b1       	in	r24, 0x03	; 3
     dd4:	8f 3d       	cpi	r24, 0xDF	; 223
     dd6:	19 f0       	breq	.+6      	; 0xdde <__stack+0x4df>
        flashOn();
     dd8:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 33; break;
    case 221: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 34; break;
    case 219: while (PINB != 223) {
     ddc:	fa cf       	rjmp	.-12     	; 0xdd2 <__stack+0x4d3>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 35; break;
     dde:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     de8:	83 e2       	ldi	r24, 0x23	; 35
     dea:	08 95       	ret
    case 215: while (PINB != 223) {
     dec:	83 b1       	in	r24, 0x03	; 3
     dee:	8f 3d       	cpi	r24, 0xDF	; 223
     df0:	19 f0       	breq	.+6      	; 0xdf8 <__stack+0x4f9>
        flashOn();
     df2:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 34; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 35; break;
    case 215: while (PINB != 223) {
     df6:	fa cf       	rjmp	.-12     	; 0xdec <__stack+0x4ed>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 36; break;
     df8:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     e02:	84 e2       	ldi	r24, 0x24	; 36
     e04:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	81 e1       	ldi	r24, 0x11	; 17
     e0a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A2, HIGH);
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	80 e1       	ldi	r24, 0x10	; 16
     e12:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A1, HIGH);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  digitalWrite(A0, LOW);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	8e e0       	ldi	r24, 0x0E	; 14
     e22:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
  delay(2);
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
  switch (PIND)
     e32:	89 b1       	in	r24, 0x09	; 9
     e34:	8f 3e       	cpi	r24, 0xEF	; 239
     e36:	09 f4       	brne	.+2      	; 0xe3a <__stack+0x53b>
     e38:	4a c0       	rjmp	.+148    	; 0xece <__stack+0x5cf>
     e3a:	50 f4       	brcc	.+20     	; 0xe50 <__stack+0x551>
     e3c:	8f 3b       	cpi	r24, 0xBF	; 191
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__stack+0x543>
     e40:	60 c0       	rjmp	.+192    	; 0xf02 <__stack+0x603>
     e42:	8f 3d       	cpi	r24, 0xDF	; 223
     e44:	09 f4       	brne	.+2      	; 0xe48 <__stack+0x549>
     e46:	50 c0       	rjmp	.+160    	; 0xee8 <__stack+0x5e9>
     e48:	8f 37       	cpi	r24, 0x7F	; 127
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__stack+0x54f>
     e4c:	74 c0       	rjmp	.+232    	; 0xf36 <__stack+0x637>
     e4e:	66 c0       	rjmp	.+204    	; 0xf1c <__stack+0x61d>
     e50:	8b 3f       	cpi	r24, 0xFB	; 251
     e52:	19 f1       	breq	.+70     	; 0xe9a <__stack+0x59b>
     e54:	18 f4       	brcc	.+6      	; 0xe5c <__stack+0x55d>
     e56:	87 3f       	cpi	r24, 0xF7	; 247
     e58:	69 f1       	breq	.+90     	; 0xeb4 <__stack+0x5b5>
     e5a:	6d c0       	rjmp	.+218    	; 0xf36 <__stack+0x637>
     e5c:	8d 3f       	cpi	r24, 0xFD	; 253
     e5e:	81 f0       	breq	.+32     	; 0xe80 <__stack+0x581>
     e60:	8e 3f       	cpi	r24, 0xFE	; 254
     e62:	09 f0       	breq	.+2      	; 0xe66 <__stack+0x567>
     e64:	68 c0       	rjmp	.+208    	; 0xf36 <__stack+0x637>
  {
    case 254: while (PIND != 0xff) {
     e66:	89 b1       	in	r24, 0x09	; 9
     e68:	8f 3f       	cpi	r24, 0xFF	; 255
     e6a:	19 f0       	breq	.+6      	; 0xe72 <__stack+0x573>
        flashOn();
     e6c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, LOW);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     e70:	fa cf       	rjmp	.-12     	; 0xe66 <__stack+0x567>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  37; break;
     e72:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     e7c:	85 e2       	ldi	r24, 0x25	; 37
     e7e:	08 95       	ret
    case 253: while (PIND != 0xff) {
     e80:	89 b1       	in	r24, 0x09	; 9
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	19 f0       	breq	.+6      	; 0xe8c <__stack+0x58d>
        flashOn();
     e86:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  37; break;
    case 253: while (PIND != 0xff) {
     e8a:	fa cf       	rjmp	.-12     	; 0xe80 <__stack+0x581>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 38; break;
     e8c:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     e96:	86 e2       	ldi	r24, 0x26	; 38
     e98:	08 95       	ret
    case 251: while (PIND != 0xff) {
     e9a:	89 b1       	in	r24, 0x09	; 9
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	19 f0       	breq	.+6      	; 0xea6 <__stack+0x5a7>
        flashOn();
     ea0:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  37; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 38; break;
    case 251: while (PIND != 0xff) {
     ea4:	fa cf       	rjmp	.-12     	; 0xe9a <__stack+0x59b>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 39; break;
     ea6:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     eb0:	87 e2       	ldi	r24, 0x27	; 39
     eb2:	08 95       	ret
    case 247: while (PIND != 0xff) {
     eb4:	89 b1       	in	r24, 0x09	; 9
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	19 f0       	breq	.+6      	; 0xec0 <__stack+0x5c1>
        flashOn();
     eba:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 38; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 39; break;
    case 247: while (PIND != 0xff) {
     ebe:	fa cf       	rjmp	.-12     	; 0xeb4 <__stack+0x5b5>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 40; break;
     ec0:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	08 95       	ret
    case 239: while (PIND != 0xff) {
     ece:	89 b1       	in	r24, 0x09	; 9
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	19 f0       	breq	.+6      	; 0xeda <__stack+0x5db>
        flashOn();
     ed4:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 39; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 40; break;
    case 239: while (PIND != 0xff) {
     ed8:	fa cf       	rjmp	.-12     	; 0xece <__stack+0x5cf>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 41; break;
     eda:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     ee4:	89 e2       	ldi	r24, 0x29	; 41
     ee6:	08 95       	ret
    case 223: while (PIND != 0xff) {
     ee8:	89 b1       	in	r24, 0x09	; 9
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	19 f0       	breq	.+6      	; 0xef4 <__stack+0x5f5>
        flashOn();
     eee:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 40; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 41; break;
    case 223: while (PIND != 0xff) {
     ef2:	fa cf       	rjmp	.-12     	; 0xee8 <__stack+0x5e9>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 42; break;
     ef4:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     efe:	8a e2       	ldi	r24, 0x2A	; 42
     f00:	08 95       	ret
    case 191: while (PIND != 0xff) {
     f02:	89 b1       	in	r24, 0x09	; 9
     f04:	8f 3f       	cpi	r24, 0xFF	; 255
     f06:	19 f0       	breq	.+6      	; 0xf0e <__stack+0x60f>
        flashOn();
     f08:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 41; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 42; break;
    case 191: while (PIND != 0xff) {
     f0c:	fa cf       	rjmp	.-12     	; 0xf02 <__stack+0x603>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 43; break;
     f0e:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     f18:	8b e2       	ldi	r24, 0x2B	; 43
     f1a:	08 95       	ret
    case 127: while (PIND != 0xff) {
     f1c:	89 b1       	in	r24, 0x09	; 9
     f1e:	8f 3f       	cpi	r24, 0xFF	; 255
     f20:	19 f0       	breq	.+6      	; 0xf28 <__stack+0x629>
        flashOn();
     f22:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 42; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 43; break;
    case 127: while (PIND != 0xff) {
     f26:	fa cf       	rjmp	.-12     	; 0xf1c <__stack+0x61d>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  44; break;
     f28:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     f32:	8c e2       	ldi	r24, 0x2C	; 44
     f34:	08 95       	ret
  }
  switch (PINB)
     f36:	83 b1       	in	r24, 0x03	; 3
     f38:	8b 3d       	cpi	r24, 0xDB	; 219
     f3a:	11 f1       	breq	.+68     	; 0xf80 <__stack+0x681>
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <__stack+0x645>
     f3e:	87 3d       	cpi	r24, 0xD7	; 215
     f40:	61 f1       	breq	.+88     	; 0xf9a <__stack+0x69b>
     f42:	38 c0       	rjmp	.+112    	; 0xfb4 <__stack+0x6b5>
     f44:	8d 3d       	cpi	r24, 0xDD	; 221
     f46:	79 f0       	breq	.+30     	; 0xf66 <__stack+0x667>
     f48:	8e 3d       	cpi	r24, 0xDE	; 222
     f4a:	a1 f5       	brne	.+104    	; 0xfb4 <__stack+0x6b5>
  {
    case 222: while (PINB != 223) {
     f4c:	83 b1       	in	r24, 0x03	; 3
     f4e:	8f 3d       	cpi	r24, 0xDF	; 223
     f50:	19 f0       	breq	.+6      	; 0xf58 <__stack+0x659>
        flashOn();
     f52:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
        //delay(1);
      } flashOff();  hadPressed = 1; return  44; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     f56:	fa cf       	rjmp	.-12     	; 0xf4c <__stack+0x64d>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 45; break;
     f58:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     f62:	8d e2       	ldi	r24, 0x2D	; 45
     f64:	08 95       	ret
    case 221: while (PINB != 223) {
     f66:	83 b1       	in	r24, 0x03	; 3
     f68:	8f 3d       	cpi	r24, 0xDF	; 223
     f6a:	19 f0       	breq	.+6      	; 0xf72 <__stack+0x673>
        flashOn();
     f6c:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 45; break;
    case 221: while (PINB != 223) {
     f70:	fa cf       	rjmp	.-12     	; 0xf66 <__stack+0x667>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 46; break;
     f72:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     f7c:	8e e2       	ldi	r24, 0x2E	; 46
     f7e:	08 95       	ret
    case 219: while (PINB != 223) {
     f80:	83 b1       	in	r24, 0x03	; 3
     f82:	8f 3d       	cpi	r24, 0xDF	; 223
     f84:	19 f0       	breq	.+6      	; 0xf8c <__stack+0x68d>
        flashOn();
     f86:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 45; break;
    case 221: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 46; break;
    case 219: while (PINB != 223) {
     f8a:	fa cf       	rjmp	.-12     	; 0xf80 <__stack+0x681>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 47; break;
     f8c:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     f96:	8f e2       	ldi	r24, 0x2F	; 47
     f98:	08 95       	ret
    case 215: while (PINB != 223) {
     f9a:	83 b1       	in	r24, 0x03	; 3
     f9c:	8f 3d       	cpi	r24, 0xDF	; 223
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <__stack+0x6a7>
        flashOn();
     fa0:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 46; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 47; break;
    case 215: while (PINB != 223) {
     fa4:	fa cf       	rjmp	.-12     	; 0xf9a <__stack+0x69b>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 48; break;
     fa6:	0e 94 cb 03 	call	0x796	; 0x796 <_Z8flashOffv>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hadPressed>
     fb0:	80 e3       	ldi	r24, 0x30	; 48
     fb2:	08 95       	ret
  }
  hadPressed = 0;
     fb4:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <hadPressed>
  return 255;
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
}
     fba:	08 95       	ret

00000fbc <_GLOBAL__sub_I_pixels>:
/*End of auto generated code by Atmel studio */

#include "Adafruit_NeoPixel.h"
#define PIN           13
#define NUMPIXELS      1
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     fbc:	22 e5       	ldi	r18, 0x52	; 82
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4d e0       	ldi	r20, 0x0D	; 13
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	8b ea       	ldi	r24, 0xAB	; 171
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN17Adafruit_NeoPixelC1Ejjj>
#include "Wire.h"
#else
#include "SoftwareSerial.h"
#define KB_RX     A4  // CLK  
#define KB_TX     A5  // DATA
SoftwareSerial softSerial(KB_RX, KB_TX); // RX, TX
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	43 e1       	ldi	r20, 0x13	; 19
     fd4:	62 e1       	ldi	r22, 0x12	; 18
     fd6:	8c e8       	ldi	r24, 0x8C	; 140
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <_ZN14SoftwareSerialC1Ehhb>

00000fde <_GLOBAL__sub_D_pixels>:
     fde:	8c e8       	ldi	r24, 0x8C	; 140
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN14SoftwareSerialD1Ev>
/*End of auto generated code by Atmel studio */

#include "Adafruit_NeoPixel.h"
#define PIN           13
#define NUMPIXELS      1
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     fe6:	8b ea       	ldi	r24, 0xAB	; 171
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0c 94 95 00 	jmp	0x12a	; 0x12a <_ZN17Adafruit_NeoPixelD1Ev>

00000fee <_Z12requestEventv>:
{
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
}

void requestEvent()
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
  if (hadPressed == 1)
     ff2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <hadPressed>
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	09 f0       	breq	.+2      	; 0xffc <_Z12requestEventv+0xe>
     ffa:	48 c0       	rjmp	.+144    	; 0x108c <_Z12requestEventv+0x9e>
  {
	unsigned c = KeyMap[KEY - 1][Mode];
     ffc:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <KEY>
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	27 e0       	ldi	r18, 0x07	; 7
    1006:	28 9f       	mul	r18, r24
    1008:	f0 01       	movw	r30, r0
    100a:	29 9f       	mul	r18, r25
    100c:	f0 0d       	add	r31, r0
    100e:	11 24       	eor	r1, r1
    1010:	ea 5f       	subi	r30, 0xFA	; 250
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__data_end>
    1018:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <__data_end+0x1>
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	60 81       	ld	r22, Z
#ifndef USE_SOFTUART
    Wire.write(c);
#else
#ifdef USE_VTCURSOR
	if ((c >= 180) && (c <= 183)) {
    1022:	c6 2f       	mov	r28, r22
    1024:	d0 e0       	ldi	r29, 0x00	; 0
    1026:	c4 5b       	subi	r28, 0xB4	; 180
    1028:	d1 09       	sbc	r29, r1
    102a:	c4 30       	cpi	r28, 0x04	; 4
    102c:	d1 05       	cpc	r29, r1
    102e:	68 f4       	brcc	.+26     	; 0x104a <_Z12requestEventv+0x5c>
		// VT100 Cursor Key
		softSerial.write((uint8_t)0x1B); // ESC
    1030:	6b e1       	ldi	r22, 0x1B	; 27
    1032:	8c e8       	ldi	r24, 0x8C	; 140
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN14SoftwareSerial5writeEh>
		softSerial.write((uint8_t)'[');
    103a:	6b e5       	ldi	r22, 0x5B	; 91
    103c:	8c e8       	ldi	r24, 0x8C	; 140
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN14SoftwareSerial5writeEh>
		softSerial.write((uint8_t)("DABC"[c-180])); // LUDR	
    1044:	ca 5a       	subi	r28, 0xAA	; 170
    1046:	dd 4f       	sbci	r29, 0xFD	; 253
    1048:	68 81       	ld	r22, Y
	} else {
#endif
		softSerial.write(c);		
    104a:	8c e8       	ldi	r24, 0x8C	; 140
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN14SoftwareSerial5writeEh>
	}
#endif
	
#endif
    //KEY=0;
    if ((Mode == 1) || (Mode == 3) || (Mode == 5)) {
    1052:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__data_end>
    1056:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <__data_end+0x1>
    105a:	9c 01       	movw	r18, r24
    105c:	2d 7f       	andi	r18, 0xFD	; 253
    105e:	21 30       	cpi	r18, 0x01	; 1
    1060:	31 05       	cpc	r19, r1
    1062:	11 f0       	breq	.+4      	; 0x1068 <_Z12requestEventv+0x7a>
    1064:	05 97       	sbiw	r24, 0x05	; 5
    1066:	81 f4       	brne	.+32     	; 0x1088 <_Z12requestEventv+0x9a>
      Mode = 0;
    1068:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__data_end+0x1>
    106c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>
      _shift = 0;
    1070:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_shift+0x1>
    1074:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_shift>
      _sym = 0;
    1078:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_sym+0x1>
    107c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_sym>
      _fn = 0;
    1080:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_fn+0x1>
    1084:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_fn>
    }

    hadPressed = 0;
    1088:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <hadPressed>
    return;
  }
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <loop>:



void loop()
{
  if (shiftPressed)
    1092:	1c 99       	sbic	0x03, 4	; 3
    1094:	64 c0       	rjmp	.+200    	; 0x115e <loop+0xcc>
  {
    _sym = 0; _fn = 0; idle = 0;
    1096:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_sym+0x1>
    109a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_sym>
    109e:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_fn+0x1>
    10a2:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_fn>
    10a6:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <idle+0x1>
    10aa:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <idle>
    while (shiftPressed)delay(1);
    10ae:	1c 99       	sbic	0x03, 4	; 3
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <loop+0x2e>
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    10be:	f7 cf       	rjmp	.-18     	; 0x10ae <loop+0x1c>
    if (_shift == 0)
    10c0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_shift>
    10c4:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <_shift+0x1>
    10c8:	89 2b       	or	r24, r25
    10ca:	f9 f4       	brne	.+62     	; 0x110a <loop+0x78>
    {
      delay(200);
    10cc:	68 ec       	ldi	r22, 0xC8	; 200
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (shiftPressed)
    10d8:	1c 99       	sbic	0x03, 4	; 3
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <loop+0x62>
      {
        while (shiftPressed)delay(1);
    10dc:	1c 99       	sbic	0x03, 4	; 3
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <loop+0x5c>
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    10ec:	f7 cf       	rjmp	.-18     	; 0x10dc <loop+0x4a>
        _shift = 2;
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <loop+0x66>
        Mode = 2;
      }
      else
      {
        _shift = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <_shift+0x1>
    10fc:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <_shift>
        Mode = 1;
    1100:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    1104:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
    1108:	2a c0       	rjmp	.+84     	; 0x115e <loop+0xcc>
      }
    }
    else
    {
      delay(200);
    110a:	68 ec       	ldi	r22, 0xC8	; 200
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (shiftPressed)
    1116:	1c 99       	sbic	0x03, 4	; 3
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <loop+0xa6>
      {
        while (shiftPressed)delay(1);
    111a:	1c 99       	sbic	0x03, 4	; 3
    111c:	07 c0       	rjmp	.+14     	; 0x112c <loop+0x9a>
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    112a:	f7 cf       	rjmp	.-18     	; 0x111a <loop+0x88>
        if (_shift == 2)
    112c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_shift>
    1130:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <_shift+0x1>
    1134:	02 97       	sbiw	r24, 0x02	; 2
    1136:	49 f4       	brne	.+18     	; 0x114a <loop+0xb8>
        {
          Mode = 0;
    1138:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__data_end+0x1>
    113c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>
          _shift = 0;
    1140:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_shift+0x1>
    1144:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_shift>
    1148:	0a c0       	rjmp	.+20     	; 0x115e <loop+0xcc>
        }
        else
        {
          Mode = 2;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    1152:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
          _shift = 2;
    1156:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <_shift+0x1>
    115a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <_shift>
      }
    }
  }


  if (symPressed)
    115e:	1f 99       	sbic	0x03, 7	; 3
    1160:	6e c0       	rjmp	.+220    	; 0x123e <loop+0x1ac>
  {
    _shift = 0; _fn = 0; idle = 0;
    1162:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_shift+0x1>
    1166:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_shift>
    116a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_fn+0x1>
    116e:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_fn>
    1172:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <idle+0x1>
    1176:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <idle>
    while (symPressed)delay(1);
    117a:	1f 99       	sbic	0x03, 7	; 3
    117c:	07 c0       	rjmp	.+14     	; 0x118c <loop+0xfa>
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    118a:	f7 cf       	rjmp	.-18     	; 0x117a <loop+0xe8>
    if (_sym == 0)
    118c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_sym>
    1190:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <_sym+0x1>
    1194:	89 2b       	or	r24, r25
    1196:	39 f5       	brne	.+78     	; 0x11e6 <loop+0x154>
    {
      delay(200);
    1198:	68 ec       	ldi	r22, 0xC8	; 200
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (symPressed)
    11a4:	1f 99       	sbic	0x03, 7	; 3
    11a6:	12 c0       	rjmp	.+36     	; 0x11cc <loop+0x13a>
      {
        while (symPressed)delay(1);
    11a8:	1f 99       	sbic	0x03, 7	; 3
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <loop+0x128>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    11b8:	f7 cf       	rjmp	.-18     	; 0x11a8 <loop+0x116>
        _sym = 2;
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <_sym+0x1>
    11c2:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <_sym>
        Mode = 4;
    11c6:	84 e0       	ldi	r24, 0x04	; 4
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <loop+0x14a>
      }
      else
      {
        _sym = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <_sym+0x1>
    11d4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <_sym>
        Mode = 3;
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    11e0:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
    11e4:	2c c0       	rjmp	.+88     	; 0x123e <loop+0x1ac>
      }
    }
    else
    {
      delay(200);
    11e6:	68 ec       	ldi	r22, 0xC8	; 200
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (symPressed)
    11f2:	1f 99       	sbic	0x03, 7	; 3
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <loop+0x182>
      {
        while (symPressed)delay(1);
    11f6:	1f 99       	sbic	0x03, 7	; 3
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <loop+0x176>
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    1206:	f7 cf       	rjmp	.-18     	; 0x11f6 <loop+0x164>
        if (_sym == 2)
    1208:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_sym>
    120c:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <_sym+0x1>
    1210:	02 97       	sbiw	r24, 0x02	; 2
    1212:	49 f4       	brne	.+18     	; 0x1226 <loop+0x194>
        {
          Mode = 0;
    1214:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__data_end+0x1>
    1218:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>
          _sym = 0;
    121c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_sym+0x1>
    1220:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_sym>
    1224:	0c c0       	rjmp	.+24     	; 0x123e <loop+0x1ac>
        }
        else
        {
          Mode = 4;
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    122e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
          _sym = 2;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <_sym+0x1>
    123a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <_sym>
        _sym = 0;
      }
    }
  }

  if (fnPressed)
    123e:	1e 99       	sbic	0x03, 6	; 3
    1240:	6e c0       	rjmp	.+220    	; 0x131e <loop+0x28c>
  {
    _sym = 0; _shift = 0; idle = 0;
    1242:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_sym+0x1>
    1246:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_sym>
    124a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_shift+0x1>
    124e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_shift>
    1252:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <idle+0x1>
    1256:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <idle>
    while (fnPressed)delay(1);
    125a:	1e 99       	sbic	0x03, 6	; 3
    125c:	07 c0       	rjmp	.+14     	; 0x126c <loop+0x1da>
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    126a:	f7 cf       	rjmp	.-18     	; 0x125a <loop+0x1c8>
    if (_fn == 0)
    126c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_fn>
    1270:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <_fn+0x1>
    1274:	89 2b       	or	r24, r25
    1276:	39 f5       	brne	.+78     	; 0x12c6 <loop+0x234>
    {
      delay(200);
    1278:	68 ec       	ldi	r22, 0xC8	; 200
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (fnPressed)
    1284:	1e 99       	sbic	0x03, 6	; 3
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <loop+0x21a>
      {
        while (fnPressed)delay(1);
    1288:	1e 99       	sbic	0x03, 6	; 3
    128a:	07 c0       	rjmp	.+14     	; 0x129a <loop+0x208>
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    1298:	f7 cf       	rjmp	.-18     	; 0x1288 <loop+0x1f6>
        _fn = 2;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <_fn+0x1>
    12a2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_fn>
        Mode = 6;
    12a6:	86 e0       	ldi	r24, 0x06	; 6
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <loop+0x22a>
      }
      else
      {
        _fn = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <_fn+0x1>
    12b4:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_fn>
        Mode = 5;
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    12c0:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
    12c4:	2c c0       	rjmp	.+88     	; 0x131e <loop+0x28c>
      }
    }
    else
    {
      delay(200);
    12c6:	68 ec       	ldi	r22, 0xC8	; 200
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
      if (fnPressed)
    12d2:	1e 99       	sbic	0x03, 6	; 3
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <loop+0x262>
      {
        while (fnPressed)delay(1);
    12d6:	1e 99       	sbic	0x03, 6	; 3
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <loop+0x256>
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <delay>
    12e6:	f7 cf       	rjmp	.-18     	; 0x12d6 <loop+0x244>
        if (_fn == 2)
    12e8:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_fn>
    12ec:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <_fn+0x1>
    12f0:	02 97       	sbiw	r24, 0x02	; 2
    12f2:	49 f4       	brne	.+18     	; 0x1306 <loop+0x274>
        {
          Mode = 0;
    12f4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__data_end+0x1>
    12f8:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>
          _fn = 0;
    12fc:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_fn+0x1>
    1300:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_fn>
    1304:	0c c0       	rjmp	.+24     	; 0x131e <loop+0x28c>
        }
        else
        {
          Mode = 6;
    1306:	86 e0       	ldi	r24, 0x06	; 6
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
    130e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
          _fn = 2;
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <_fn+0x1>
    131a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_fn>
  }




  switch (Mode)
    131e:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
    1322:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
    1326:	e7 30       	cpi	r30, 0x07	; 7
    1328:	f1 05       	cpc	r31, r1
    132a:	08 f0       	brcs	.+2      	; 0x132e <loop+0x29c>
    132c:	49 c0       	rjmp	.+146    	; 0x13c0 <loop+0x32e>
    132e:	ec 5c       	subi	r30, 0xCC	; 204
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__tablejump2__>
  {
    case 0://normal
      pixels.setPixelColor(0, pixels.Color(0, 0, 0)); break;
    case 1://shift
      if ((idle / 6) % 2 == 1)
    1336:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <idle>
    133a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <idle+0x1>
    133e:	66 e0       	ldi	r22, 0x06	; 6
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1346:	cb 01       	movw	r24, r22
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	21 f4       	brne	.+8      	; 0x135c <loop+0x2ca>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	2c c0       	rjmp	.+88     	; 0x13b4 <loop+0x322>
      else
        pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    case 2://long_shift
      pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	45 e0       	ldi	r20, 0x05	; 5
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	27 c0       	rjmp	.+78     	; 0x13b4 <loop+0x322>
    case 3://sym
      if ((idle / 6) % 2 == 1)
    1366:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <idle>
    136a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <idle+0x1>
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1376:	cb 01       	movw	r24, r22
    1378:	62 e0       	ldi	r22, 0x02	; 2
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	41 f3       	breq	.-48     	; 0x1354 <loop+0x2c2>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    case 4://long_sym
      pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	35 e0       	ldi	r19, 0x05	; 5
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	13 c0       	rjmp	.+38     	; 0x13b4 <loop+0x322>
    case 5://fn
      if ((idle / 6) % 2 == 1)
    138e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <idle>
    1392:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <idle+0x1>
    1396:	66 e0       	ldi	r22, 0x06	; 6
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    139e:	cb 01       	movw	r24, r22
    13a0:	62 e0       	ldi	r22, 0x02	; 2
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	a1 f2       	breq	.-88     	; 0x1354 <loop+0x2c2>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    13ac:	25 e0       	ldi	r18, 0x05	; 5
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	8b ea       	ldi	r24, 0xAB	; 171
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	0e 94 48 03 	call	0x690	; 0x690 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
  }

  pixels.show(); // This sends the updated pixel color to the hardware.
    13c0:	8b ea       	ldi	r24, 0xAB	; 171
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN17Adafruit_NeoPixel4showEv>
  if (hadPressed == 0)
    13c8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <hadPressed>
    13cc:	81 11       	cpse	r24, r1
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <loop+0x348>
  {
    KEY = GetInput();
    13d0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_Z8GetInputv>
    13d4:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <KEY>
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <loop+0x34c>
  }
#ifdef USE_SOFTUART 
  else {
	requestEvent();
    13da:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z12requestEventv>
  }
#endif
  idle++;
    13de:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <idle>
    13e2:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <idle+0x1>
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <idle+0x1>
    13ec:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <idle>
  delay(10);
    13f0:	6a e0       	ldi	r22, 0x0A	; 10
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <delay>

000013fc <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	08 95       	ret

00001402 <_ZN14SoftwareSerial4readEv>:
    1402:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    1406:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	b9 f4       	brne	.+46     	; 0x143e <_ZN14SoftwareSerial4readEv+0x3c>
    1410:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1414:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1418:	98 17       	cp	r25, r24
    141a:	89 f0       	breq	.+34     	; 0x143e <_ZN14SoftwareSerial4readEv+0x3c>
    141c:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	ed 53       	subi	r30, 0x3D	; 61
    1424:	fd 4f       	sbci	r31, 0xFD	; 253
    1426:	80 81       	ld	r24, Z
    1428:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	2f 73       	andi	r18, 0x3F	; 63
    1434:	33 27       	eor	r19, r19
    1436:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	08 95       	ret
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	08 95       	ret

00001444 <_ZN14SoftwareSerial5writeEh>:
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	dc 01       	movw	r26, r24
    144c:	5c 96       	adiw	r26, 0x1c	; 28
    144e:	8d 91       	ld	r24, X+
    1450:	9c 91       	ld	r25, X
    1452:	5d 97       	sbiw	r26, 0x1d	; 29
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	39 f4       	brne	.+14     	; 0x1466 <_ZN14SoftwareSerial5writeEh+0x22>
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	13 96       	adiw	r26, 0x03	; 3
    145e:	3c 93       	st	X, r19
    1460:	2e 93       	st	-X, r18
    1462:	12 97       	sbiw	r26, 0x02	; 2
    1464:	3b c0       	rjmp	.+118    	; 0x14dc <_ZN14SoftwareSerial5writeEh+0x98>
    1466:	51 96       	adiw	r26, 0x11	; 17
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	52 97       	sbiw	r26, 0x12	; 18
    146e:	50 96       	adiw	r26, 0x10	; 16
    1470:	2c 91       	ld	r18, X
    1472:	50 97       	sbiw	r26, 0x10	; 16
    1474:	32 2f       	mov	r19, r18
    1476:	30 95       	com	r19
    1478:	1f b7       	in	r17, 0x3f	; 63
    147a:	5e 96       	adiw	r26, 0x1e	; 30
    147c:	4c 91       	ld	r20, X
    147e:	5e 97       	sbiw	r26, 0x1e	; 30
    1480:	74 2f       	mov	r23, r20
    1482:	72 70       	andi	r23, 0x02	; 2
    1484:	41 fd       	sbrc	r20, 1
    1486:	60 95       	com	r22
    1488:	f8 94       	cli
    148a:	40 81       	ld	r20, Z
    148c:	77 23       	and	r23, r23
    148e:	11 f0       	breq	.+4      	; 0x1494 <_ZN14SoftwareSerial5writeEh+0x50>
    1490:	42 2b       	or	r20, r18
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <_ZN14SoftwareSerial5writeEh+0x52>
    1494:	43 23       	and	r20, r19
    1496:	40 83       	st	Z, r20
    1498:	ec 01       	movw	r28, r24
    149a:	21 97       	sbiw	r28, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <_ZN14SoftwareSerial5writeEh+0x56>
    149e:	48 e0       	ldi	r20, 0x08	; 8
    14a0:	50 81       	ld	r21, Z
    14a2:	60 ff       	sbrs	r22, 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <_ZN14SoftwareSerial5writeEh+0x66>
    14a6:	52 2b       	or	r21, r18
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_ZN14SoftwareSerial5writeEh+0x68>
    14aa:	53 23       	and	r21, r19
    14ac:	50 83       	st	Z, r21
    14ae:	ec 01       	movw	r28, r24
    14b0:	21 97       	sbiw	r28, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <_ZN14SoftwareSerial5writeEh+0x6c>
    14b4:	66 95       	lsr	r22
    14b6:	41 50       	subi	r20, 0x01	; 1
    14b8:	99 f7       	brne	.-26     	; 0x14a0 <_ZN14SoftwareSerial5writeEh+0x5c>
    14ba:	80 81       	ld	r24, Z
    14bc:	77 23       	and	r23, r23
    14be:	19 f0       	breq	.+6      	; 0x14c6 <_ZN14SoftwareSerial5writeEh+0x82>
    14c0:	83 23       	and	r24, r19
    14c2:	80 83       	st	Z, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <_ZN14SoftwareSerial5writeEh+0x86>
    14c6:	28 2b       	or	r18, r24
    14c8:	20 83       	st	Z, r18
    14ca:	1f bf       	out	0x3f, r17	; 63
    14cc:	5c 96       	adiw	r26, 0x1c	; 28
    14ce:	8d 91       	ld	r24, X+
    14d0:	9c 91       	ld	r25, X
    14d2:	5d 97       	sbiw	r26, 0x1d	; 29
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <_ZN14SoftwareSerial5writeEh+0x90>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	08 95       	ret

000014e4 <_ZN14SoftwareSerial5flushEv>:
    14e4:	08 95       	ret

000014e6 <_ZN14SoftwareSerial4peekEv>:
    14e6:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    14ea:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    14ee:	28 17       	cp	r18, r24
    14f0:	39 07       	cpc	r19, r25
    14f2:	71 f4       	brne	.+28     	; 0x1510 <_ZN14SoftwareSerial4peekEv+0x2a>
    14f4:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    14f8:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14fc:	98 17       	cp	r25, r24
    14fe:	41 f0       	breq	.+16     	; 0x1510 <_ZN14SoftwareSerial4peekEv+0x2a>
    1500:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	ed 53       	subi	r30, 0x3D	; 61
    1508:	fd 4f       	sbci	r31, 0xFD	; 253
    150a:	80 81       	ld	r24, Z
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	08 95       	ret
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	08 95       	ret

00001516 <_ZN14SoftwareSerial9availableEv>:
    1516:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    151a:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    151e:	28 17       	cp	r18, r24
    1520:	39 07       	cpc	r19, r25
    1522:	71 f4       	brne	.+28     	; 0x1540 <_ZN14SoftwareSerial9availableEv+0x2a>
    1524:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1528:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	80 5c       	subi	r24, 0xC0	; 192
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	82 1b       	sub	r24, r18
    1534:	91 09       	sbc	r25, r1
    1536:	60 e4       	ldi	r22, 0x40	; 64
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    153e:	08 95       	ret
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	08 95       	ret

00001546 <_ZN14SoftwareSerial13stopListeningEv>:
    1546:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    154a:	f0 91 04 03 	lds	r31, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    154e:	e8 17       	cp	r30, r24
    1550:	f9 07       	cpc	r31, r25
    1552:	69 f4       	brne	.+26     	; 0x156e <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1554:	a3 89       	ldd	r26, Z+19	; 0x13
    1556:	b4 89       	ldd	r27, Z+20	; 0x14
    1558:	9c 91       	ld	r25, X
    155a:	85 89       	ldd	r24, Z+21	; 0x15
    155c:	80 95       	com	r24
    155e:	89 23       	and	r24, r25
    1560:	8c 93       	st	X, r24
    1562:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    1566:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	08 95       	ret
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret

00001572 <_ZN14SoftwareSerial6listenEv>:
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	ec 01       	movw	r28, r24
    1578:	8a 8d       	ldd	r24, Y+26	; 0x1a
    157a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    157c:	89 2b       	or	r24, r25
    157e:	f1 f0       	breq	.+60     	; 0x15bc <_ZN14SoftwareSerial6listenEv+0x4a>
    1580:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    1584:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    1588:	c8 17       	cp	r28, r24
    158a:	d9 07       	cpc	r29, r25
    158c:	b9 f0       	breq	.+46     	; 0x15bc <_ZN14SoftwareSerial6listenEv+0x4a>
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	11 f0       	breq	.+4      	; 0x1596 <_ZN14SoftwareSerial6listenEv+0x24>
    1592:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN14SoftwareSerial13stopListeningEv>
    1596:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1598:	8e 7f       	andi	r24, 0xFE	; 254
    159a:	8e 8f       	std	Y+30, r24	; 0x1e
    159c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15a0:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    15a4:	d0 93 04 03 	sts	0x0304, r29	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    15a8:	c0 93 03 03 	sts	0x0303, r28	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    15ac:	eb 89       	ldd	r30, Y+19	; 0x13
    15ae:	fc 89       	ldd	r31, Y+20	; 0x14
    15b0:	90 81       	ld	r25, Z
    15b2:	8d 89       	ldd	r24, Y+21	; 0x15
    15b4:	89 2b       	or	r24, r25
    15b6:	80 83       	st	Z, r24
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <_ZN14SoftwareSerial6listenEv+0x4c>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <__vector_3>:
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
    15e6:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <_ZN14SoftwareSerial13active_objectE>
    15ea:	f0 91 04 03 	lds	r31, 0x0304	; 0x800304 <_ZN14SoftwareSerial13active_objectE+0x1>
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <__vector_3+0x30>
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <__vector_3+0xd2>
    15f4:	96 8d       	ldd	r25, Z+30	; 0x1e
    15f6:	a6 85       	ldd	r26, Z+14	; 0x0e
    15f8:	b7 85       	ldd	r27, Z+15	; 0x0f
    15fa:	85 85       	ldd	r24, Z+13	; 0x0d
    15fc:	91 ff       	sbrs	r25, 1
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__vector_3+0x44>
    1600:	9c 91       	ld	r25, X
    1602:	89 23       	and	r24, r25
    1604:	29 f4       	brne	.+10     	; 0x1610 <__vector_3+0x4c>
    1606:	47 c0       	rjmp	.+142    	; 0x1696 <__vector_3+0xd2>
    1608:	9c 91       	ld	r25, X
    160a:	89 23       	and	r24, r25
    160c:	09 f0       	breq	.+2      	; 0x1610 <__vector_3+0x4c>
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <__vector_3+0xd2>
    1610:	a3 89       	ldd	r26, Z+19	; 0x13
    1612:	b4 89       	ldd	r27, Z+20	; 0x14
    1614:	9c 91       	ld	r25, X
    1616:	85 89       	ldd	r24, Z+21	; 0x15
    1618:	80 95       	com	r24
    161a:	89 23       	and	r24, r25
    161c:	8c 93       	st	X, r24
    161e:	86 89       	ldd	r24, Z+22	; 0x16
    1620:	97 89       	ldd	r25, Z+23	; 0x17
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <__vector_3+0x5e>
    1626:	60 8d       	ldd	r22, Z+24	; 0x18
    1628:	71 8d       	ldd	r23, Z+25	; 0x19
    162a:	a6 85       	ldd	r26, Z+14	; 0x0e
    162c:	b7 85       	ldd	r27, Z+15	; 0x0f
    162e:	55 85       	ldd	r21, Z+13	; 0x0d
    1630:	38 e0       	ldi	r19, 0x08	; 8
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	cb 01       	movw	r24, r22
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <__vector_3+0x72>
    163a:	82 2f       	mov	r24, r18
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	28 2f       	mov	r18, r24
    1644:	4c 91       	ld	r20, X
    1646:	45 23       	and	r20, r21
    1648:	09 f0       	breq	.+2      	; 0x164c <__vector_3+0x88>
    164a:	20 68       	ori	r18, 0x80	; 128
    164c:	31 50       	subi	r19, 0x01	; 1
    164e:	91 f7       	brne	.-28     	; 0x1634 <__vector_3+0x70>
    1650:	86 8d       	ldd	r24, Z+30	; 0x1e
    1652:	81 fd       	sbrc	r24, 1
    1654:	20 95       	com	r18
    1656:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	8f 73       	andi	r24, 0x3F	; 63
    1660:	99 27       	eor	r25, r25
    1662:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1666:	38 17       	cp	r19, r24
    1668:	49 f0       	breq	.+18     	; 0x167c <__vector_3+0xb8>
    166a:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ad 53       	subi	r26, 0x3D	; 61
    1672:	bd 4f       	sbci	r27, 0xFD	; 253
    1674:	2c 93       	st	X, r18
    1676:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <__vector_3+0xbe>
    167c:	86 8d       	ldd	r24, Z+30	; 0x1e
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	86 8f       	std	Z+30, r24	; 0x1e
    1682:	82 8d       	ldd	r24, Z+26	; 0x1a
    1684:	93 8d       	ldd	r25, Z+27	; 0x1b
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <__vector_3+0xc2>
    168a:	a3 89       	ldd	r26, Z+19	; 0x13
    168c:	b4 89       	ldd	r27, Z+20	; 0x14
    168e:	9c 91       	ld	r25, X
    1690:	85 89       	ldd	r24, Z+21	; 0x15
    1692:	89 2b       	or	r24, r25
    1694:	8c 93       	st	X, r24
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <_ZN14SoftwareSerialD1Ev>:
    16b8:	2f e5       	ldi	r18, 0x5F	; 95
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	fc 01       	movw	r30, r24
    16be:	31 83       	std	Z+1, r19	; 0x01
    16c0:	20 83       	st	Z, r18
    16c2:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_ZN14SoftwareSerial13stopListeningEv>

000016c6 <_ZN14SoftwareSerial5setTXEh>:
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
    16ce:	16 2f       	mov	r17, r22
    16d0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    16d2:	66 95       	lsr	r22
    16d4:	61 70       	andi	r22, 0x01	; 1
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	68 27       	eor	r22, r24
    16da:	81 2f       	mov	r24, r17
    16dc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	81 2f       	mov	r24, r17
    16e4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
    16e8:	81 2f       	mov	r24, r17
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	fc 01       	movw	r30, r24
    16ee:	e6 57       	subi	r30, 0x76	; 118
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	e4 91       	lpm	r30, Z
    16f4:	e8 8b       	std	Y+16, r30	; 0x10
    16f6:	fc 01       	movw	r30, r24
    16f8:	e2 56       	subi	r30, 0x62	; 98
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	e4 91       	lpm	r30, Z
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	e4 54       	subi	r30, 0x44	; 68
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	85 91       	lpm	r24, Z+
    170a:	94 91       	lpm	r25, Z
    170c:	9a 8b       	std	Y+18, r25	; 0x12
    170e:	89 8b       	std	Y+17, r24	; 0x11
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	08 95       	ret

00001718 <_ZN14SoftwareSerial5setRXEh>:
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	ec 01       	movw	r28, r24
    1720:	16 2f       	mov	r17, r22
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	81 2f       	mov	r24, r17
    1726:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <pinMode>
    172a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    172c:	81 fd       	sbrc	r24, 1
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <_ZN14SoftwareSerial5setRXEh+0x20>
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	81 2f       	mov	r24, r17
    1734:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <digitalWrite>
    1738:	1c 87       	std	Y+12, r17	; 0x0c
    173a:	81 2f       	mov	r24, r17
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	fc 01       	movw	r30, r24
    1740:	e6 57       	subi	r30, 0x76	; 118
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	e4 91       	lpm	r30, Z
    1746:	ed 87       	std	Y+13, r30	; 0x0d
    1748:	fc 01       	movw	r30, r24
    174a:	e2 56       	subi	r30, 0x62	; 98
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	e4 91       	lpm	r30, Z
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ee 54       	subi	r30, 0x4E	; 78
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	85 91       	lpm	r24, Z+
    175c:	94 91       	lpm	r25, Z
    175e:	9f 87       	std	Y+15, r25	; 0x0f
    1760:	8e 87       	std	Y+14, r24	; 0x0e
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	08 95       	ret

0000176a <_ZN14SoftwareSerialC1Ehhb>:
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
    1772:	16 2f       	mov	r17, r22
    1774:	1b 82       	std	Y+3, r1	; 0x03
    1776:	1a 82       	std	Y+2, r1	; 0x02
    1778:	88 ee       	ldi	r24, 0xE8	; 232
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	8c 83       	std	Y+4, r24	; 0x04
    1782:	9d 83       	std	Y+5, r25	; 0x05
    1784:	ae 83       	std	Y+6, r26	; 0x06
    1786:	bf 83       	std	Y+7, r27	; 0x07
    1788:	8f e5       	ldi	r24, 0x5F	; 95
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	99 83       	std	Y+1, r25	; 0x01
    178e:	88 83       	st	Y, r24
    1790:	1f 8a       	std	Y+23, r1	; 0x17
    1792:	1e 8a       	std	Y+22, r1	; 0x16
    1794:	19 8e       	std	Y+25, r1	; 0x19
    1796:	18 8e       	std	Y+24, r1	; 0x18
    1798:	1b 8e       	std	Y+27, r1	; 0x1b
    179a:	1a 8e       	std	Y+26, r1	; 0x1a
    179c:	1d 8e       	std	Y+29, r1	; 0x1d
    179e:	1c 8e       	std	Y+28, r1	; 0x1c
    17a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	20 fb       	bst	r18, 0
    17a6:	81 f9       	bld	r24, 1
    17a8:	8e 8f       	std	Y+30, r24	; 0x1e
    17aa:	64 2f       	mov	r22, r20
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZN14SoftwareSerial5setTXEh>
    17b2:	61 2f       	mov	r22, r17
    17b4:	ce 01       	movw	r24, r28
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <_ZN14SoftwareSerial5setRXEh>

000017c0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ec 01       	movw	r28, r24
    17c6:	9a 01       	movw	r18, r20
    17c8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    17ca:	1b 8e       	std	Y+27, r1	; 0x1b
    17cc:	1a 8e       	std	Y+26, r1	; 0x1a
    17ce:	19 8e       	std	Y+25, r1	; 0x19
    17d0:	18 8e       	std	Y+24, r1	; 0x18
    17d2:	1f 8a       	std	Y+23, r1	; 0x17
    17d4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    17d6:	60 e8       	ldi	r22, 0x80	; 128
    17d8:	74 e8       	ldi	r23, 0x84	; 132
    17da:	8e e1       	ldi	r24, 0x1E	; 30
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__divmodsi4>
    17e2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    17e4:	24 30       	cpi	r18, 0x04	; 4
    17e6:	31 05       	cpc	r19, r1
    17e8:	18 f0       	brcs	.+6      	; 0x17f0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    17ea:	c9 01       	movw	r24, r18
    17ec:	03 97       	sbiw	r24, 0x03	; 3
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    17f4:	9d 8f       	std	Y+29, r25	; 0x1d
    17f6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    17f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    17fa:	66 31       	cpi	r22, 0x16	; 22
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <_ZN14SoftwareSerial5beginEl+0x40>
    17fe:	69 c0       	rjmp	.+210    	; 0x18d2 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1800:	c9 01       	movw	r24, r18
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1806:	84 31       	cpi	r24, 0x14	; 20
    1808:	91 05       	cpc	r25, r1
    180a:	10 f0       	brcs	.+4      	; 0x1810 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    180c:	43 97       	sbiw	r24, 0x13	; 19
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1814:	9f 8b       	std	Y+23, r25	; 0x17
    1816:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1818:	36 97       	sbiw	r30, 0x06	; 6
    181a:	18 f0       	brcs	.+6      	; 0x1822 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    181c:	c9 01       	movw	r24, r18
    181e:	05 97       	sbiw	r24, 0x05	; 5
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1826:	99 8f       	std	Y+25, r25	; 0x19
    1828:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    182a:	c9 01       	movw	r24, r18
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	28 0f       	add	r18, r24
    1832:	39 1f       	adc	r19, r25
    1834:	36 95       	lsr	r19
    1836:	27 95       	ror	r18
    1838:	36 95       	lsr	r19
    183a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    183c:	2d 30       	cpi	r18, 0x0D	; 13
    183e:	31 05       	cpc	r19, r1
    1840:	18 f0       	brcs	.+6      	; 0x1848 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    1842:	2c 50       	subi	r18, 0x0C	; 12
    1844:	31 09       	sbc	r19, r1
    1846:	02 c0       	rjmp	.+4      	; 0x184c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    184c:	3b 8f       	std	Y+27, r19	; 0x1b
    184e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1850:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    1854:	68 30       	cpi	r22, 0x08	; 8
    1856:	50 f0       	brcs	.+20     	; 0x186c <_ZN14SoftwareSerial5beginEl+0xac>
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	6e 30       	cpi	r22, 0x0E	; 14
    185c:	08 f4       	brcc	.+2      	; 0x1860 <_ZN14SoftwareSerial5beginEl+0xa0>
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <_ZN14SoftwareSerial5beginEl+0xa6>
    1864:	88 0f       	add	r24, r24
    1866:	2a 95       	dec	r18
    1868:	ea f7       	brpl	.-6      	; 0x1864 <_ZN14SoftwareSerial5beginEl+0xa4>
    186a:	01 c0       	rjmp	.+2      	; 0x186e <_ZN14SoftwareSerial5beginEl+0xae>
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	89 2b       	or	r24, r25
    1870:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1874:	9c 85       	ldd	r25, Y+12	; 0x0c
    1876:	98 30       	cpi	r25, 0x08	; 8
    1878:	38 f0       	brcs	.+14     	; 0x1888 <_ZN14SoftwareSerial5beginEl+0xc8>
    187a:	9e 30       	cpi	r25, 0x0E	; 14
    187c:	40 f0       	brcs	.+16     	; 0x188e <_ZN14SoftwareSerial5beginEl+0xce>
    187e:	96 31       	cpi	r25, 0x16	; 22
    1880:	48 f0       	brcs	.+18     	; 0x1894 <_ZN14SoftwareSerial5beginEl+0xd4>
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <_ZN14SoftwareSerial5beginEl+0xd8>
    1888:	2d e6       	ldi	r18, 0x6D	; 109
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <_ZN14SoftwareSerial5beginEl+0xd8>
    188e:	2b e6       	ldi	r18, 0x6B	; 107
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <_ZN14SoftwareSerial5beginEl+0xd8>
    1894:	2c e6       	ldi	r18, 0x6C	; 108
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3c 8b       	std	Y+20, r19	; 0x14
    189a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    189c:	98 30       	cpi	r25, 0x08	; 8
    189e:	30 f4       	brcc	.+12     	; 0x18ac <_ZN14SoftwareSerial5beginEl+0xec>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <_ZN14SoftwareSerial5beginEl+0xe6>
    18a4:	88 0f       	add	r24, r24
    18a6:	9a 95       	dec	r25
    18a8:	ea f7       	brpl	.-6      	; 0x18a4 <_ZN14SoftwareSerial5beginEl+0xe4>
    18aa:	0e c0       	rjmp	.+28     	; 0x18c8 <_ZN14SoftwareSerial5beginEl+0x108>
    18ac:	29 2f       	mov	r18, r25
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	9e 30       	cpi	r25, 0x0E	; 14
    18b2:	18 f4       	brcc	.+6      	; 0x18ba <_ZN14SoftwareSerial5beginEl+0xfa>
    18b4:	28 50       	subi	r18, 0x08	; 8
    18b6:	31 09       	sbc	r19, r1
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_ZN14SoftwareSerial5beginEl+0xfe>
    18ba:	2e 50       	subi	r18, 0x0E	; 14
    18bc:	31 09       	sbc	r19, r1
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <_ZN14SoftwareSerial5beginEl+0x104>
    18c2:	88 0f       	add	r24, r24
    18c4:	2a 95       	dec	r18
    18c6:	ea f7       	brpl	.-6      	; 0x18c2 <_ZN14SoftwareSerial5beginEl+0x102>
    18c8:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    18ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    18d2:	ce 01       	movw	r24, r28
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    18d8:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <_ZN14SoftwareSerial6listenEv>

000018dc <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    18dc:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <twi_txBufferLength>
    18e0:	26 2f       	mov	r18, r22
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	24 0f       	add	r18, r20
    18e6:	31 1d       	adc	r19, r1
    18e8:	21 32       	cpi	r18, 0x21	; 33
    18ea:	31 05       	cpc	r19, r1
    18ec:	dc f4       	brge	.+54     	; 0x1924 <twi_transmit+0x48>
    18ee:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <twi_state>
    18f2:	24 30       	cpi	r18, 0x04	; 4
    18f4:	c9 f4       	brne	.+50     	; 0x1928 <twi_transmit+0x4c>
    18f6:	fc 01       	movw	r30, r24
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	86 17       	cp	r24, r22
    18fe:	58 f4       	brcc	.+22     	; 0x1916 <twi_transmit+0x3a>
    1900:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <twi_txBufferLength>
    1904:	21 91       	ld	r18, Z+
    1906:	dc 01       	movw	r26, r24
    1908:	a7 5d       	subi	r26, 0xD7	; 215
    190a:	bc 4f       	sbci	r27, 0xFC	; 252
    190c:	a3 0f       	add	r26, r19
    190e:	b1 1d       	adc	r27, r1
    1910:	2c 93       	st	X, r18
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	f3 cf       	rjmp	.-26     	; 0x18fc <twi_transmit+0x20>
    1916:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_txBufferLength>
    191a:	68 0f       	add	r22, r24
    191c:	60 93 27 03 	sts	0x0327, r22	; 0x800327 <twi_txBufferLength>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	08 95       	ret
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	08 95       	ret
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	08 95       	ret

0000192c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    192c:	85 ed       	ldi	r24, 0xD5	; 213
    192e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1932:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1936:	84 fd       	sbrc	r24, 4
    1938:	fc cf       	rjmp	.-8      	; 0x1932 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    193a:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <twi_state>
    193e:	08 95       	ret

00001940 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1940:	85 ec       	ldi	r24, 0xC5	; 197
    1942:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    1946:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <twi_state>
    194a:	08 95       	ret

0000194c <__vector_24>:
}

ISR(TWI_vect)
{
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	2f 93       	push	r18
    1958:	3f 93       	push	r19
    195a:	4f 93       	push	r20
    195c:	5f 93       	push	r21
    195e:	6f 93       	push	r22
    1960:	7f 93       	push	r23
    1962:	8f 93       	push	r24
    1964:	9f 93       	push	r25
    1966:	af 93       	push	r26
    1968:	bf 93       	push	r27
    196a:	ef 93       	push	r30
    196c:	ff 93       	push	r31
  switch(TW_STATUS){
    196e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1972:	88 7f       	andi	r24, 0xF8	; 248
    1974:	80 36       	cpi	r24, 0x60	; 96
    1976:	09 f4       	brne	.+2      	; 0x197a <__vector_24+0x2e>
    1978:	9e c0       	rjmp	.+316    	; 0x1ab6 <__vector_24+0x16a>
    197a:	78 f5       	brcc	.+94     	; 0x19da <__vector_24+0x8e>
    197c:	88 32       	cpi	r24, 0x28	; 40
    197e:	09 f4       	brne	.+2      	; 0x1982 <__vector_24+0x36>
    1980:	5d c0       	rjmp	.+186    	; 0x1a3c <__vector_24+0xf0>
    1982:	90 f4       	brcc	.+36     	; 0x19a8 <__vector_24+0x5c>
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	09 f4       	brne	.+2      	; 0x198a <__vector_24+0x3e>
    1988:	56 c0       	rjmp	.+172    	; 0x1a36 <__vector_24+0xea>
    198a:	38 f4       	brcc	.+14     	; 0x199a <__vector_24+0x4e>
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <__vector_24+0x46>
    1990:	f5 c0       	rjmp	.+490    	; 0x1b7c <__vector_24+0x230>
    1992:	88 30       	cpi	r24, 0x08	; 8
    1994:	09 f4       	brne	.+2      	; 0x1998 <__vector_24+0x4c>
    1996:	4f c0       	rjmp	.+158    	; 0x1a36 <__vector_24+0xea>
    1998:	f5 c0       	rjmp	.+490    	; 0x1b84 <__vector_24+0x238>
    199a:	88 31       	cpi	r24, 0x18	; 24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <__vector_24+0x54>
    199e:	4e c0       	rjmp	.+156    	; 0x1a3c <__vector_24+0xf0>
    19a0:	80 32       	cpi	r24, 0x20	; 32
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__vector_24+0x5a>
    19a4:	5f c0       	rjmp	.+190    	; 0x1a64 <__vector_24+0x118>
    19a6:	ee c0       	rjmp	.+476    	; 0x1b84 <__vector_24+0x238>
    19a8:	80 34       	cpi	r24, 0x40	; 64
    19aa:	09 f4       	brne	.+2      	; 0x19ae <__vector_24+0x62>
    19ac:	6a c0       	rjmp	.+212    	; 0x1a82 <__vector_24+0x136>
    19ae:	58 f4       	brcc	.+22     	; 0x19c6 <__vector_24+0x7a>
    19b0:	80 33       	cpi	r24, 0x30	; 48
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__vector_24+0x6a>
    19b4:	57 c0       	rjmp	.+174    	; 0x1a64 <__vector_24+0x118>
    19b6:	88 33       	cpi	r24, 0x38	; 56
    19b8:	09 f0       	breq	.+2      	; 0x19bc <__vector_24+0x70>
    19ba:	e4 c0       	rjmp	.+456    	; 0x1b84 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    19bc:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <twi_error>
      twi_releaseBus();
    19c0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <twi_releaseBus>
      break;
    19c4:	df c0       	rjmp	.+446    	; 0x1b84 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19c6:	80 35       	cpi	r24, 0x50	; 80
    19c8:	09 f4       	brne	.+2      	; 0x19cc <__vector_24+0x80>
    19ca:	4f c0       	rjmp	.+158    	; 0x1a6a <__vector_24+0x11e>
    19cc:	88 35       	cpi	r24, 0x58	; 88
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <__vector_24+0x86>
    19d0:	5d c0       	rjmp	.+186    	; 0x1a8c <__vector_24+0x140>
    19d2:	88 34       	cpi	r24, 0x48	; 72
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <__vector_24+0x8c>
    19d6:	d6 c0       	rjmp	.+428    	; 0x1b84 <__vector_24+0x238>
    19d8:	d3 c0       	rjmp	.+422    	; 0x1b80 <__vector_24+0x234>
    19da:	88 39       	cpi	r24, 0x98	; 152
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <__vector_24+0x94>
    19de:	c4 c0       	rjmp	.+392    	; 0x1b68 <__vector_24+0x21c>
    19e0:	a8 f4       	brcc	.+42     	; 0x1a0c <__vector_24+0xc0>
    19e2:	88 37       	cpi	r24, 0x78	; 120
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <__vector_24+0x9c>
    19e6:	67 c0       	rjmp	.+206    	; 0x1ab6 <__vector_24+0x16a>
    19e8:	38 f4       	brcc	.+14     	; 0x19f8 <__vector_24+0xac>
    19ea:	88 36       	cpi	r24, 0x68	; 104
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <__vector_24+0xa4>
    19ee:	63 c0       	rjmp	.+198    	; 0x1ab6 <__vector_24+0x16a>
    19f0:	80 37       	cpi	r24, 0x70	; 112
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__vector_24+0xaa>
    19f4:	60 c0       	rjmp	.+192    	; 0x1ab6 <__vector_24+0x16a>
    19f6:	c6 c0       	rjmp	.+396    	; 0x1b84 <__vector_24+0x238>
    19f8:	88 38       	cpi	r24, 0x88	; 136
    19fa:	09 f4       	brne	.+2      	; 0x19fe <__vector_24+0xb2>
    19fc:	b5 c0       	rjmp	.+362    	; 0x1b68 <__vector_24+0x21c>
    19fe:	80 39       	cpi	r24, 0x90	; 144
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__vector_24+0xb8>
    1a02:	5f c0       	rjmp	.+190    	; 0x1ac2 <__vector_24+0x176>
    1a04:	80 38       	cpi	r24, 0x80	; 128
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <__vector_24+0xbe>
    1a08:	bd c0       	rjmp	.+378    	; 0x1b84 <__vector_24+0x238>
    1a0a:	5b c0       	rjmp	.+182    	; 0x1ac2 <__vector_24+0x176>
    1a0c:	80 3b       	cpi	r24, 0xB0	; 176
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <__vector_24+0xc6>
    1a10:	83 c0       	rjmp	.+262    	; 0x1b18 <__vector_24+0x1cc>
    1a12:	38 f4       	brcc	.+14     	; 0x1a22 <__vector_24+0xd6>
    1a14:	80 3a       	cpi	r24, 0xA0	; 160
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__vector_24+0xce>
    1a18:	66 c0       	rjmp	.+204    	; 0x1ae6 <__vector_24+0x19a>
    1a1a:	88 3a       	cpi	r24, 0xA8	; 168
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <__vector_24+0xd4>
    1a1e:	7c c0       	rjmp	.+248    	; 0x1b18 <__vector_24+0x1cc>
    1a20:	b1 c0       	rjmp	.+354    	; 0x1b84 <__vector_24+0x238>
    1a22:	80 3c       	cpi	r24, 0xC0	; 192
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <__vector_24+0xdc>
    1a26:	a4 c0       	rjmp	.+328    	; 0x1b70 <__vector_24+0x224>
    1a28:	88 3c       	cpi	r24, 0xC8	; 200
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <__vector_24+0xe2>
    1a2c:	a1 c0       	rjmp	.+322    	; 0x1b70 <__vector_24+0x224>
    1a2e:	88 3b       	cpi	r24, 0xB8	; 184
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__vector_24+0xe8>
    1a32:	87 c0       	rjmp	.+270    	; 0x1b42 <__vector_24+0x1f6>
    1a34:	a7 c0       	rjmp	.+334    	; 0x1b84 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a36:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_slarw>
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a3c:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <twi_masterBufferIndex>
    1a40:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_masterBufferLength>
    1a44:	98 17       	cp	r25, r24
    1a46:	70 f5       	brcc	.+92     	; 0x1aa4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a48:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <twi_masterBufferIndex>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	8e 0f       	add	r24, r30
    1a50:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_masterBufferIndex>
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	e5 5b       	subi	r30, 0xB5	; 181
    1a58:	fc 4f       	sbci	r31, 0xFC	; 252
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a60:	85 ec       	ldi	r24, 0xC5	; 197
    1a62:	83 c0       	rjmp	.+262    	; 0x1b6a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1a64:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <twi_error>
    1a68:	8b c0       	rjmp	.+278    	; 0x1b80 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a6a:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <twi_masterBufferIndex>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	8e 0f       	add	r24, r30
    1a72:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_masterBufferIndex>
    1a76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	e5 5b       	subi	r30, 0xB5	; 181
    1a7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a80:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a82:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <twi_masterBufferIndex>
    1a86:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_masterBufferLength>
    1a8a:	6b c0       	rjmp	.+214    	; 0x1b62 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a8c:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <twi_masterBufferIndex>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	8e 0f       	add	r24, r30
    1a94:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_masterBufferIndex>
    1a98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	e5 5b       	subi	r30, 0xB5	; 181
    1aa0:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa2:	80 83       	st	Z, r24
	if (twi_sendStop)
    1aa4:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <twi_sendStop>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	6a c0       	rjmp	.+212    	; 0x1b80 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1ab2:	84 ea       	ldi	r24, 0xA4	; 164
    1ab4:	5e c0       	rjmp	.+188    	; 0x1b72 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1abc:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_rxBufferIndex>
    1ac0:	cf cf       	rjmp	.-98     	; 0x1a60 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ac2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_rxBufferIndex>
    1ac6:	80 32       	cpi	r24, 0x20	; 32
    1ac8:	08 f0       	brcs	.+2      	; 0x1acc <__vector_24+0x180>
    1aca:	4e c0       	rjmp	.+156    	; 0x1b68 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1acc:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_rxBufferIndex>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_rxBufferIndex>
    1ad8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	e9 5f       	subi	r30, 0xF9	; 249
    1ae0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae2:	80 83       	st	Z, r24
    1ae4:	bd cf       	rjmp	.-134    	; 0x1a60 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1ae6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1aea:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_rxBufferIndex>
    1aee:	80 32       	cpi	r24, 0x20	; 32
    1af0:	30 f4       	brcc	.+12     	; 0x1afe <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1af2:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_rxBufferIndex>
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	e9 5f       	subi	r30, 0xF9	; 249
    1afa:	fc 4f       	sbci	r31, 0xFC	; 252
    1afc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1afe:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <twi_rxBufferIndex>
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <twi_onSlaveReceive>
    1b08:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <twi_onSlaveReceive+0x1>
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b12:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_rxBufferIndex>
      break;
    1b16:	36 c0       	rjmp	.+108    	; 0x1b84 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1b1e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1b22:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1b26:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <twi_onSlaveTransmit>
    1b2a:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <twi_onSlaveTransmit+0x1>
    1b2e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1b30:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_txBufferLength>
    1b34:	81 11       	cpse	r24, r1
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1b3e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1b42:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_txBufferIndex>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	8e 0f       	add	r24, r30
    1b4a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_txBufferIndex>
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	e7 5d       	subi	r30, 0xD7	; 215
    1b52:	fc 4f       	sbci	r31, 0xFC	; 252
    1b54:	80 81       	ld	r24, Z
    1b56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1b5a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <twi_txBufferIndex>
    1b5e:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_txBufferLength>
    1b62:	98 17       	cp	r25, r24
    1b64:	08 f4       	brcc	.+2      	; 0x1b68 <__vector_24+0x21c>
    1b66:	7c cf       	rjmp	.-264    	; 0x1a60 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b68:	85 e8       	ldi	r24, 0x85	; 133
    1b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1b6e:	0a c0       	rjmp	.+20     	; 0x1b84 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b70:	85 ec       	ldi	r24, 0xC5	; 197
    1b72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b76:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <twi_state>
      break;
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1b7c:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <twi_error>
      twi_stop();
    1b80:	0e 94 96 0c 	call	0x192c	; 0x192c <twi_stop>
      break;
  }
}
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1ba6:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN7TwoWire14rxBufferLengthE>
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <_ZN7TwoWire13rxBufferIndexE>
    1bb0:	82 1b       	sub	r24, r18
    1bb2:	91 09       	sbc	r25, r1
    1bb4:	08 95       	ret

00001bb6 <_ZN7TwoWire4readEv>:
    1bb6:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_ZN7TwoWire13rxBufferIndexE>
    1bba:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN7TwoWire14rxBufferLengthE>
    1bbe:	98 17       	cp	r25, r24
    1bc0:	50 f4       	brcc	.+20     	; 0x1bd6 <_ZN7TwoWire4readEv+0x20>
    1bc2:	e9 2f       	mov	r30, r25
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	ec 55       	subi	r30, 0x5C	; 92
    1bc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1bca:	20 81       	ld	r18, Z
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	9f 5f       	subi	r25, 0xFF	; 255
    1bd0:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <_ZN7TwoWire13rxBufferIndexE>
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <_ZN7TwoWire4readEv+0x24>
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	c9 01       	movw	r24, r18
    1bdc:	08 95       	ret

00001bde <_ZN7TwoWire4peekEv>:
    1bde:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <_ZN7TwoWire13rxBufferIndexE>
    1be2:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_ZN7TwoWire14rxBufferLengthE>
    1be6:	e8 17       	cp	r30, r24
    1be8:	30 f4       	brcc	.+12     	; 0x1bf6 <_ZN7TwoWire4peekEv+0x18>
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	ec 55       	subi	r30, 0x5C	; 92
    1bee:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf0:	80 81       	ld	r24, Z
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	08 95       	ret
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	9f ef       	ldi	r25, 0xFF	; 255
    1bfa:	08 95       	ret

00001bfc <_ZN7TwoWire5flushEv>:
    1bfc:	08 95       	ret

00001bfe <_ZN7TwoWire5writeEPKhj>:
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	7c 01       	movw	r14, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8a 01       	movw	r16, r20
    1c14:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <_ZN7TwoWire12transmittingE>
    1c18:	22 23       	and	r18, r18
    1c1a:	89 f0       	breq	.+34     	; 0x1c3e <_ZN7TwoWire5writeEPKhj+0x40>
    1c1c:	eb 01       	movw	r28, r22
    1c1e:	6b 01       	movw	r12, r22
    1c20:	c4 0e       	add	r12, r20
    1c22:	d5 1e       	adc	r13, r21
    1c24:	cc 15       	cp	r28, r12
    1c26:	dd 05       	cpc	r29, r13
    1c28:	69 f0       	breq	.+26     	; 0x1c44 <_ZN7TwoWire5writeEPKhj+0x46>
    1c2a:	69 91       	ld	r22, Y+
    1c2c:	d7 01       	movw	r26, r14
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	01 90       	ld	r0, Z+
    1c34:	f0 81       	ld	r31, Z
    1c36:	e0 2d       	mov	r30, r0
    1c38:	c7 01       	movw	r24, r14
    1c3a:	09 95       	icall
    1c3c:	f3 cf       	rjmp	.-26     	; 0x1c24 <_ZN7TwoWire5writeEPKhj+0x26>
    1c3e:	64 2f       	mov	r22, r20
    1c40:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <twi_transmit>
    1c44:	c8 01       	movw	r24, r16
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <_ZN7TwoWire5writeEh>:
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	1f 92       	push	r1
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	69 83       	std	Y+1, r22	; 0x01
    1c64:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <_ZN7TwoWire12transmittingE>
    1c68:	22 23       	and	r18, r18
    1c6a:	d1 f0       	breq	.+52     	; 0x1ca0 <_ZN7TwoWire5writeEh+0x48>
    1c6c:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <_ZN7TwoWire14txBufferLengthE>
    1c70:	20 32       	cpi	r18, 0x20	; 32
    1c72:	40 f0       	brcs	.+16     	; 0x1c84 <_ZN7TwoWire5writeEh+0x2c>
    1c74:	21 e0       	ldi	r18, 0x01	; 1
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	33 83       	std	Z+3, r19	; 0x03
    1c7c:	22 83       	std	Z+2, r18	; 0x02
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	15 c0       	rjmp	.+42     	; 0x1cae <_ZN7TwoWire5writeEh+0x56>
    1c84:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_ZN7TwoWire13txBufferIndexE>
    1c88:	e8 2f       	mov	r30, r24
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ee 57       	subi	r30, 0x7E	; 126
    1c8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c90:	99 81       	ldd	r25, Y+1	; 0x01
    1c92:	90 83       	st	Z, r25
    1c94:	8f 5f       	subi	r24, 0xFF	; 255
    1c96:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <_ZN7TwoWire13txBufferIndexE>
    1c9a:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <_ZN7TwoWire14txBufferLengthE>
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <_ZN7TwoWire5writeEh+0x52>
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <twi_transmit>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0f 90       	pop	r0
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <_ZN7TwoWireC1Ev>:
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	13 82       	std	Z+3, r1	; 0x03
    1cba:	12 82       	std	Z+2, r1	; 0x02
    1cbc:	88 ee       	ldi	r24, 0xE8	; 232
    1cbe:	93 e0       	ldi	r25, 0x03	; 3
    1cc0:	a0 e0       	ldi	r26, 0x00	; 0
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	84 83       	std	Z+4, r24	; 0x04
    1cc6:	95 83       	std	Z+5, r25	; 0x05
    1cc8:	a6 83       	std	Z+6, r26	; 0x06
    1cca:	b7 83       	std	Z+7, r27	; 0x07
    1ccc:	81 e7       	ldi	r24, 0x71	; 113
    1cce:	92 e0       	ldi	r25, 0x02	; 2
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	08 95       	ret

00001cd6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1cd6:	83 e7       	ldi	r24, 0x73	; 115
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_ZN7TwoWireC1Ev>

00001cde <initVariant>:
    1cde:	08 95       	ret

00001ce0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1ce0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <init>

	initVariant();
    1ce4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1ce8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1cec:	c0 e0       	ldi	r28, 0x00	; 0
    1cee:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1cf0:	0e 94 49 08 	call	0x1092	; 0x1092 <loop>
		if (serialEventRun) serialEventRun();
    1cf4:	20 97       	sbiw	r28, 0x00	; 0
    1cf6:	e1 f3       	breq	.-8      	; 0x1cf0 <main+0x10>
    1cf8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1cfc:	f9 cf       	rjmp	.-14     	; 0x1cf0 <main+0x10>

00001cfe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	6c 01       	movw	r12, r24
    1d10:	7a 01       	movw	r14, r20
    1d12:	8b 01       	movw	r16, r22
  size_t n = 0;
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1d18:	ce 15       	cp	r28, r14
    1d1a:	df 05       	cpc	r29, r15
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    1d1e:	d8 01       	movw	r26, r16
    1d20:	6d 91       	ld	r22, X+
    1d22:	8d 01       	movw	r16, r26
    1d24:	d6 01       	movw	r26, r12
    1d26:	ed 91       	ld	r30, X+
    1d28:	fc 91       	ld	r31, X
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	f0 81       	ld	r31, Z
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	c6 01       	movw	r24, r12
    1d32:	09 95       	icall
    1d34:	89 2b       	or	r24, r25
    1d36:	11 f0       	breq	.+4      	; 0x1d3c <_ZN5Print5writeEPKhj+0x3e>
    1d38:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1d3a:	ee cf       	rjmp	.-36     	; 0x1d18 <_ZN5Print5writeEPKhj+0x1a>
    1d3c:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1d3e:	c7 01       	movw	r24, r14
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	08 95       	ret

00001d52 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <timer0_millis>
    1d6c:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <timer0_millis+0x1>
    1d70:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <timer0_millis+0x2>
    1d74:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <timer0_millis+0x3>
    1d78:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <timer0_fract>
    1d7c:	26 e0       	ldi	r18, 0x06	; 6
    1d7e:	23 0f       	add	r18, r19
    1d80:	2d 37       	cpi	r18, 0x7D	; 125
    1d82:	20 f4       	brcc	.+8      	; 0x1d8c <__vector_16+0x3a>
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	a1 1d       	adc	r26, r1
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <__vector_16+0x44>
    1d8c:	29 e8       	ldi	r18, 0x89	; 137
    1d8e:	23 0f       	add	r18, r19
    1d90:	03 96       	adiw	r24, 0x03	; 3
    1d92:	a1 1d       	adc	r26, r1
    1d94:	b1 1d       	adc	r27, r1
    1d96:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <timer0_fract>
    1d9a:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <timer0_millis>
    1d9e:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <timer0_millis+0x1>
    1da2:	a0 93 c7 03 	sts	0x03C7, r26	; 0x8003c7 <timer0_millis+0x2>
    1da6:	b0 93 c8 03 	sts	0x03C8, r27	; 0x8003c8 <timer0_millis+0x3>
    1daa:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <timer0_overflow_count>
    1dae:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <timer0_overflow_count+0x1>
    1db2:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <timer0_overflow_count+0x2>
    1db6:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <timer0_overflow_count+0x3>
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	b1 1d       	adc	r27, r1
    1dc0:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timer0_overflow_count>
    1dc4:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timer0_overflow_count+0x1>
    1dc8:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <timer0_overflow_count+0x2>
    1dcc:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <timer0_overflow_count+0x3>
    1dd0:	bf 91       	pop	r27
    1dd2:	af 91       	pop	r26
    1dd4:	9f 91       	pop	r25
    1dd6:	8f 91       	pop	r24
    1dd8:	3f 91       	pop	r19
    1dda:	2f 91       	pop	r18
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	0f 90       	pop	r0
    1de2:	1f 90       	pop	r1
    1de4:	18 95       	reti

00001de6 <micros>:
    1de6:	3f b7       	in	r19, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <timer0_overflow_count>
    1dee:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <timer0_overflow_count+0x1>
    1df2:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <timer0_overflow_count+0x2>
    1df6:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <timer0_overflow_count+0x3>
    1dfa:	26 b5       	in	r18, 0x26	; 38
    1dfc:	a8 9b       	sbis	0x15, 0	; 21
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <micros+0x24>
    1e00:	2f 3f       	cpi	r18, 0xFF	; 255
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <micros+0x24>
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	3f bf       	out	0x3f, r19	; 63
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	a9 2f       	mov	r26, r25
    1e10:	98 2f       	mov	r25, r24
    1e12:	88 27       	eor	r24, r24
    1e14:	82 0f       	add	r24, r18
    1e16:	91 1d       	adc	r25, r1
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	b1 1d       	adc	r27, r1
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	43 e0       	ldi	r20, 0x03	; 3
    1e22:	66 0f       	add	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	88 1f       	adc	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	4a 95       	dec	r20
    1e2c:	d1 f7       	brne	.-12     	; 0x1e22 <micros+0x3c>
    1e2e:	08 95       	ret

00001e30 <delay>:
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	6b 01       	movw	r12, r22
    1e42:	7c 01       	movw	r14, r24
    1e44:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
    1e48:	4b 01       	movw	r8, r22
    1e4a:	5c 01       	movw	r10, r24
    1e4c:	c1 14       	cp	r12, r1
    1e4e:	d1 04       	cpc	r13, r1
    1e50:	e1 04       	cpc	r14, r1
    1e52:	f1 04       	cpc	r15, r1
    1e54:	01 f1       	breq	.+64     	; 0x1e96 <delay+0x66>
    1e56:	0e 94 23 10 	call	0x2046	; 0x2046 <yield>
    1e5a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <micros>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	88 19       	sub	r24, r8
    1e64:	99 09       	sbc	r25, r9
    1e66:	aa 09       	sbc	r26, r10
    1e68:	bb 09       	sbc	r27, r11
    1e6a:	88 3e       	cpi	r24, 0xE8	; 232
    1e6c:	93 40       	sbci	r25, 0x03	; 3
    1e6e:	a1 05       	cpc	r26, r1
    1e70:	b1 05       	cpc	r27, r1
    1e72:	60 f3       	brcs	.-40     	; 0x1e4c <delay+0x1c>
    1e74:	21 e0       	ldi	r18, 0x01	; 1
    1e76:	c2 1a       	sub	r12, r18
    1e78:	d1 08       	sbc	r13, r1
    1e7a:	e1 08       	sbc	r14, r1
    1e7c:	f1 08       	sbc	r15, r1
    1e7e:	88 ee       	ldi	r24, 0xE8	; 232
    1e80:	88 0e       	add	r8, r24
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	98 1e       	adc	r9, r24
    1e86:	a1 1c       	adc	r10, r1
    1e88:	b1 1c       	adc	r11, r1
    1e8a:	c1 14       	cp	r12, r1
    1e8c:	d1 04       	cpc	r13, r1
    1e8e:	e1 04       	cpc	r14, r1
    1e90:	f1 04       	cpc	r15, r1
    1e92:	19 f7       	brne	.-58     	; 0x1e5a <delay+0x2a>
    1e94:	db cf       	rjmp	.-74     	; 0x1e4c <delay+0x1c>
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
    1ea6:	08 95       	ret

00001ea8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ea8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1eaa:	84 b5       	in	r24, 0x24	; 36
    1eac:	82 60       	ori	r24, 0x02	; 2
    1eae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1eb0:	84 b5       	in	r24, 0x24	; 36
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1eb6:	85 b5       	in	r24, 0x25	; 37
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1ebc:	85 b5       	in	r24, 0x25	; 37
    1ebe:	81 60       	ori	r24, 0x01	; 1
    1ec0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1ec2:	ee e6       	ldi	r30, 0x6E	; 110
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	81 60       	ori	r24, 0x01	; 1
    1eca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1ecc:	e1 e8       	ldi	r30, 0x81	; 129
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1ed2:	80 81       	ld	r24, Z
    1ed4:	82 60       	ori	r24, 0x02	; 2
    1ed6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1ed8:	80 81       	ld	r24, Z
    1eda:	81 60       	ori	r24, 0x01	; 1
    1edc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1ede:	e0 e8       	ldi	r30, 0x80	; 128
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1ee8:	e1 eb       	ldi	r30, 0xB1	; 177
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	84 60       	ori	r24, 0x04	; 4
    1ef0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ef2:	e0 eb       	ldi	r30, 0xB0	; 176
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	81 60       	ori	r24, 0x01	; 1
    1efa:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1efc:	ea e7       	ldi	r30, 0x7A	; 122
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	84 60       	ori	r24, 0x04	; 4
    1f04:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1f06:	80 81       	ld	r24, Z
    1f08:	82 60       	ori	r24, 0x02	; 2
    1f0a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8e 7f       	andi	r24, 0xFE	; 254
    1f10:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1f12:	80 81       	ld	r24, Z
    1f14:	80 68       	ori	r24, 0x80	; 128
    1f16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1f18:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1f1c:	08 95       	ret

00001f1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	81 f0       	breq	.+32     	; 0x1f42 <turnOffPWM+0x24>
    1f22:	28 f4       	brcc	.+10     	; 0x1f2e <turnOffPWM+0x10>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	99 f0       	breq	.+38     	; 0x1f4e <turnOffPWM+0x30>
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	a1 f0       	breq	.+40     	; 0x1f54 <turnOffPWM+0x36>
    1f2c:	08 95       	ret
    1f2e:	87 30       	cpi	r24, 0x07	; 7
    1f30:	a9 f0       	breq	.+42     	; 0x1f5c <turnOffPWM+0x3e>
    1f32:	88 30       	cpi	r24, 0x08	; 8
    1f34:	b9 f0       	breq	.+46     	; 0x1f64 <turnOffPWM+0x46>
    1f36:	84 30       	cpi	r24, 0x04	; 4
    1f38:	d1 f4       	brne	.+52     	; 0x1f6e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f3a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f3e:	8f 7d       	andi	r24, 0xDF	; 223
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1f42:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f46:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f48:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f4c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f4e:	84 b5       	in	r24, 0x24	; 36
    1f50:	8f 77       	andi	r24, 0x7F	; 127
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1f54:	84 b5       	in	r24, 0x24	; 36
    1f56:	8f 7d       	andi	r24, 0xDF	; 223
    1f58:	84 bd       	out	0x24, r24	; 36
    1f5a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1f5c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1f60:	8f 77       	andi	r24, 0x7F	; 127
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1f64:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1f68:	8f 7d       	andi	r24, 0xDF	; 223
    1f6a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1f6e:	08 95       	ret

00001f70 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	fc 01       	movw	r30, r24
    1f78:	e6 57       	subi	r30, 0x76	; 118
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 56       	subi	r30, 0x62	; 98
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1f86:	88 23       	and	r24, r24
    1f88:	61 f1       	breq	.+88     	; 0x1fe2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	fc 01       	movw	r30, r24
    1f92:	ea 53       	subi	r30, 0x3A	; 58
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	c5 91       	lpm	r28, Z+
    1f98:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e4 54       	subi	r30, 0x44	; 68
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	a5 91       	lpm	r26, Z+
    1fa2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1fa4:	61 11       	cpse	r22, r1
    1fa6:	09 c0       	rjmp	.+18     	; 0x1fba <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1fa8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1faa:	f8 94       	cli
		*reg &= ~bit;
    1fac:	88 81       	ld	r24, Y
    1fae:	20 95       	com	r18
    1fb0:	82 23       	and	r24, r18
    1fb2:	88 83       	st	Y, r24
		*out &= ~bit;
    1fb4:	ec 91       	ld	r30, X
    1fb6:	2e 23       	and	r18, r30
    1fb8:	0b c0       	rjmp	.+22     	; 0x1fd0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1fba:	62 30       	cpi	r22, 0x02	; 2
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1fbe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1fc0:	f8 94       	cli
		*reg &= ~bit;
    1fc2:	88 81       	ld	r24, Y
    1fc4:	32 2f       	mov	r19, r18
    1fc6:	30 95       	com	r19
    1fc8:	83 23       	and	r24, r19
    1fca:	88 83       	st	Y, r24
		*out |= bit;
    1fcc:	ec 91       	ld	r30, X
    1fce:	2e 2b       	or	r18, r30
    1fd0:	2c 93       	st	X, r18
		SREG = oldSREG;
    1fd2:	9f bf       	out	0x3f, r25	; 63
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1fd6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1fd8:	f8 94       	cli
		*reg |= bit;
    1fda:	e8 81       	ld	r30, Y
    1fdc:	2e 2b       	or	r18, r30
    1fde:	28 83       	st	Y, r18
		SREG = oldSREG;
    1fe0:	8f bf       	out	0x3f, r24	; 63
	}
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	ea 58       	subi	r30, 0x8A	; 138
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	e6 57       	subi	r30, 0x76	; 118
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2002:	f9 01       	movw	r30, r18
    2004:	e2 56       	subi	r30, 0x62	; 98
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    200a:	cc 23       	and	r28, r28
    200c:	c1 f0       	breq	.+48     	; 0x203e <digitalWrite+0x56>
    200e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2010:	81 11       	cpse	r24, r1
    2012:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <turnOffPWM>

	out = portOutputRegister(port);
    2016:	ec 2f       	mov	r30, r28
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	e4 54       	subi	r30, 0x44	; 68
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	a5 91       	lpm	r26, Z+
    2024:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2026:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2028:	f8 94       	cli

	if (val == LOW) {
    202a:	11 11       	cpse	r17, r1
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <digitalWrite+0x4e>
		*out &= ~bit;
    202e:	8c 91       	ld	r24, X
    2030:	d0 95       	com	r29
    2032:	d8 23       	and	r29, r24
    2034:	02 c0       	rjmp	.+4      	; 0x203a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2036:	ec 91       	ld	r30, X
    2038:	de 2b       	or	r29, r30
    203a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    203c:	9f bf       	out	0x3f, r25	; 63
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2046:	08 95       	ret

00002048 <__udivmodhi4>:
    2048:	aa 1b       	sub	r26, r26
    204a:	bb 1b       	sub	r27, r27
    204c:	51 e1       	ldi	r21, 0x11	; 17
    204e:	07 c0       	rjmp	.+14     	; 0x205e <__udivmodhi4_ep>

00002050 <__udivmodhi4_loop>:
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	a6 17       	cp	r26, r22
    2056:	b7 07       	cpc	r27, r23
    2058:	10 f0       	brcs	.+4      	; 0x205e <__udivmodhi4_ep>
    205a:	a6 1b       	sub	r26, r22
    205c:	b7 0b       	sbc	r27, r23

0000205e <__udivmodhi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	5a 95       	dec	r21
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__udivmodhi4_loop>
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	08 95       	ret

00002070 <__divmodhi4>:
    2070:	97 fb       	bst	r25, 7
    2072:	07 2e       	mov	r0, r23
    2074:	16 f4       	brtc	.+4      	; 0x207a <__divmodhi4+0xa>
    2076:	00 94       	com	r0
    2078:	07 d0       	rcall	.+14     	; 0x2088 <__divmodhi4_neg1>
    207a:	77 fd       	sbrc	r23, 7
    207c:	09 d0       	rcall	.+18     	; 0x2090 <__divmodhi4_neg2>
    207e:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    2082:	07 fc       	sbrc	r0, 7
    2084:	05 d0       	rcall	.+10     	; 0x2090 <__divmodhi4_neg2>
    2086:	3e f4       	brtc	.+14     	; 0x2096 <__divmodhi4_exit>

00002088 <__divmodhi4_neg1>:
    2088:	90 95       	com	r25
    208a:	81 95       	neg	r24
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	08 95       	ret

00002090 <__divmodhi4_neg2>:
    2090:	70 95       	com	r23
    2092:	61 95       	neg	r22
    2094:	7f 4f       	sbci	r23, 0xFF	; 255

00002096 <__divmodhi4_exit>:
    2096:	08 95       	ret

00002098 <__udivmodsi4>:
    2098:	a1 e2       	ldi	r26, 0x21	; 33
    209a:	1a 2e       	mov	r1, r26
    209c:	aa 1b       	sub	r26, r26
    209e:	bb 1b       	sub	r27, r27
    20a0:	fd 01       	movw	r30, r26
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <__udivmodsi4_ep>

000020a4 <__udivmodsi4_loop>:
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	ee 1f       	adc	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	a2 17       	cp	r26, r18
    20ae:	b3 07       	cpc	r27, r19
    20b0:	e4 07       	cpc	r30, r20
    20b2:	f5 07       	cpc	r31, r21
    20b4:	20 f0       	brcs	.+8      	; 0x20be <__udivmodsi4_ep>
    20b6:	a2 1b       	sub	r26, r18
    20b8:	b3 0b       	sbc	r27, r19
    20ba:	e4 0b       	sbc	r30, r20
    20bc:	f5 0b       	sbc	r31, r21

000020be <__udivmodsi4_ep>:
    20be:	66 1f       	adc	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	1a 94       	dec	r1
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <__udivmodsi4_loop>
    20ca:	60 95       	com	r22
    20cc:	70 95       	com	r23
    20ce:	80 95       	com	r24
    20d0:	90 95       	com	r25
    20d2:	9b 01       	movw	r18, r22
    20d4:	ac 01       	movw	r20, r24
    20d6:	bd 01       	movw	r22, r26
    20d8:	cf 01       	movw	r24, r30
    20da:	08 95       	ret

000020dc <__divmodsi4>:
    20dc:	05 2e       	mov	r0, r21
    20de:	97 fb       	bst	r25, 7
    20e0:	1e f4       	brtc	.+6      	; 0x20e8 <__divmodsi4+0xc>
    20e2:	00 94       	com	r0
    20e4:	0e 94 85 10 	call	0x210a	; 0x210a <__negsi2>
    20e8:	57 fd       	sbrc	r21, 7
    20ea:	07 d0       	rcall	.+14     	; 0x20fa <__divmodsi4_neg2>
    20ec:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodsi4>
    20f0:	07 fc       	sbrc	r0, 7
    20f2:	03 d0       	rcall	.+6      	; 0x20fa <__divmodsi4_neg2>
    20f4:	4e f4       	brtc	.+18     	; 0x2108 <__divmodsi4_exit>
    20f6:	0c 94 85 10 	jmp	0x210a	; 0x210a <__negsi2>

000020fa <__divmodsi4_neg2>:
    20fa:	50 95       	com	r21
    20fc:	40 95       	com	r20
    20fe:	30 95       	com	r19
    2100:	21 95       	neg	r18
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	4f 4f       	sbci	r20, 0xFF	; 255
    2106:	5f 4f       	sbci	r21, 0xFF	; 255

00002108 <__divmodsi4_exit>:
    2108:	08 95       	ret

0000210a <__negsi2>:
    210a:	90 95       	com	r25
    210c:	80 95       	com	r24
    210e:	70 95       	com	r23
    2110:	61 95       	neg	r22
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	8f 4f       	sbci	r24, 0xFF	; 255
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	08 95       	ret

0000211a <__tablejump2__>:
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	05 90       	lpm	r0, Z+
    2120:	f4 91       	lpm	r31, Z
    2122:	e0 2d       	mov	r30, r0
    2124:	09 94       	ijmp

00002126 <malloc>:
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	91 05       	cpc	r25, r1
    2132:	10 f4       	brcc	.+4      	; 0x2138 <malloc+0x12>
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <__flp>
    213c:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <__flp+0x1>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	30 97       	sbiw	r30, 0x00	; 0
    214a:	19 f1       	breq	.+70     	; 0x2192 <malloc+0x6c>
    214c:	40 81       	ld	r20, Z
    214e:	51 81       	ldd	r21, Z+1	; 0x01
    2150:	02 81       	ldd	r16, Z+2	; 0x02
    2152:	13 81       	ldd	r17, Z+3	; 0x03
    2154:	48 17       	cp	r20, r24
    2156:	59 07       	cpc	r21, r25
    2158:	c8 f0       	brcs	.+50     	; 0x218c <malloc+0x66>
    215a:	84 17       	cp	r24, r20
    215c:	95 07       	cpc	r25, r21
    215e:	69 f4       	brne	.+26     	; 0x217a <malloc+0x54>
    2160:	10 97       	sbiw	r26, 0x00	; 0
    2162:	31 f0       	breq	.+12     	; 0x2170 <malloc+0x4a>
    2164:	12 96       	adiw	r26, 0x02	; 2
    2166:	0c 93       	st	X, r16
    2168:	12 97       	sbiw	r26, 0x02	; 2
    216a:	13 96       	adiw	r26, 0x03	; 3
    216c:	1c 93       	st	X, r17
    216e:	27 c0       	rjmp	.+78     	; 0x21be <malloc+0x98>
    2170:	00 93 cf 03 	sts	0x03CF, r16	; 0x8003cf <__flp>
    2174:	10 93 d0 03 	sts	0x03D0, r17	; 0x8003d0 <__flp+0x1>
    2178:	22 c0       	rjmp	.+68     	; 0x21be <malloc+0x98>
    217a:	21 15       	cp	r18, r1
    217c:	31 05       	cpc	r19, r1
    217e:	19 f0       	breq	.+6      	; 0x2186 <malloc+0x60>
    2180:	42 17       	cp	r20, r18
    2182:	53 07       	cpc	r21, r19
    2184:	18 f4       	brcc	.+6      	; 0x218c <malloc+0x66>
    2186:	9a 01       	movw	r18, r20
    2188:	bd 01       	movw	r22, r26
    218a:	ef 01       	movw	r28, r30
    218c:	df 01       	movw	r26, r30
    218e:	f8 01       	movw	r30, r16
    2190:	db cf       	rjmp	.-74     	; 0x2148 <malloc+0x22>
    2192:	21 15       	cp	r18, r1
    2194:	31 05       	cpc	r19, r1
    2196:	f9 f0       	breq	.+62     	; 0x21d6 <malloc+0xb0>
    2198:	28 1b       	sub	r18, r24
    219a:	39 0b       	sbc	r19, r25
    219c:	24 30       	cpi	r18, 0x04	; 4
    219e:	31 05       	cpc	r19, r1
    21a0:	80 f4       	brcc	.+32     	; 0x21c2 <malloc+0x9c>
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	61 15       	cp	r22, r1
    21a8:	71 05       	cpc	r23, r1
    21aa:	21 f0       	breq	.+8      	; 0x21b4 <malloc+0x8e>
    21ac:	fb 01       	movw	r30, r22
    21ae:	93 83       	std	Z+3, r25	; 0x03
    21b0:	82 83       	std	Z+2, r24	; 0x02
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <malloc+0x96>
    21b4:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <__flp+0x1>
    21b8:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <__flp>
    21bc:	fe 01       	movw	r30, r28
    21be:	32 96       	adiw	r30, 0x02	; 2
    21c0:	44 c0       	rjmp	.+136    	; 0x224a <malloc+0x124>
    21c2:	fe 01       	movw	r30, r28
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	81 93       	st	Z+, r24
    21ca:	91 93       	st	Z+, r25
    21cc:	22 50       	subi	r18, 0x02	; 2
    21ce:	31 09       	sbc	r19, r1
    21d0:	39 83       	std	Y+1, r19	; 0x01
    21d2:	28 83       	st	Y, r18
    21d4:	3a c0       	rjmp	.+116    	; 0x224a <malloc+0x124>
    21d6:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    21da:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    21de:	23 2b       	or	r18, r19
    21e0:	41 f4       	brne	.+16     	; 0x21f2 <malloc+0xcc>
    21e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    21e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    21ea:	30 93 ce 03 	sts	0x03CE, r19	; 0x8003ce <__brkval+0x1>
    21ee:	20 93 cd 03 	sts	0x03CD, r18	; 0x8003cd <__brkval>
    21f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    21f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    21fa:	21 15       	cp	r18, r1
    21fc:	31 05       	cpc	r19, r1
    21fe:	41 f4       	brne	.+16     	; 0x2210 <malloc+0xea>
    2200:	2d b7       	in	r18, 0x3d	; 61
    2202:	3e b7       	in	r19, 0x3e	; 62
    2204:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2208:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    220c:	24 1b       	sub	r18, r20
    220e:	35 0b       	sbc	r19, r21
    2210:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <__brkval>
    2214:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <__brkval+0x1>
    2218:	e2 17       	cp	r30, r18
    221a:	f3 07       	cpc	r31, r19
    221c:	a0 f4       	brcc	.+40     	; 0x2246 <malloc+0x120>
    221e:	2e 1b       	sub	r18, r30
    2220:	3f 0b       	sbc	r19, r31
    2222:	28 17       	cp	r18, r24
    2224:	39 07       	cpc	r19, r25
    2226:	78 f0       	brcs	.+30     	; 0x2246 <malloc+0x120>
    2228:	ac 01       	movw	r20, r24
    222a:	4e 5f       	subi	r20, 0xFE	; 254
    222c:	5f 4f       	sbci	r21, 0xFF	; 255
    222e:	24 17       	cp	r18, r20
    2230:	35 07       	cpc	r19, r21
    2232:	48 f0       	brcs	.+18     	; 0x2246 <malloc+0x120>
    2234:	4e 0f       	add	r20, r30
    2236:	5f 1f       	adc	r21, r31
    2238:	50 93 ce 03 	sts	0x03CE, r21	; 0x8003ce <__brkval+0x1>
    223c:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <__brkval>
    2240:	81 93       	st	Z+, r24
    2242:	91 93       	st	Z+, r25
    2244:	02 c0       	rjmp	.+4      	; 0x224a <malloc+0x124>
    2246:	e0 e0       	ldi	r30, 0x00	; 0
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	cf 01       	movw	r24, r30
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	08 95       	ret

00002256 <free>:
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	09 f4       	brne	.+2      	; 0x2260 <free+0xa>
    225e:	81 c0       	rjmp	.+258    	; 0x2362 <free+0x10c>
    2260:	fc 01       	movw	r30, r24
    2262:	32 97       	sbiw	r30, 0x02	; 2
    2264:	13 82       	std	Z+3, r1	; 0x03
    2266:	12 82       	std	Z+2, r1	; 0x02
    2268:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <__flp>
    226c:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <__flp+0x1>
    2270:	10 97       	sbiw	r26, 0x00	; 0
    2272:	81 f4       	brne	.+32     	; 0x2294 <free+0x3e>
    2274:	20 81       	ld	r18, Z
    2276:	31 81       	ldd	r19, Z+1	; 0x01
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    2280:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    2284:	28 17       	cp	r18, r24
    2286:	39 07       	cpc	r19, r25
    2288:	51 f5       	brne	.+84     	; 0x22de <free+0x88>
    228a:	f0 93 ce 03 	sts	0x03CE, r31	; 0x8003ce <__brkval+0x1>
    228e:	e0 93 cd 03 	sts	0x03CD, r30	; 0x8003cd <__brkval>
    2292:	67 c0       	rjmp	.+206    	; 0x2362 <free+0x10c>
    2294:	ed 01       	movw	r28, r26
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	ce 17       	cp	r28, r30
    229c:	df 07       	cpc	r29, r31
    229e:	40 f4       	brcc	.+16     	; 0x22b0 <free+0x5a>
    22a0:	4a 81       	ldd	r20, Y+2	; 0x02
    22a2:	5b 81       	ldd	r21, Y+3	; 0x03
    22a4:	9e 01       	movw	r18, r28
    22a6:	41 15       	cp	r20, r1
    22a8:	51 05       	cpc	r21, r1
    22aa:	f1 f0       	breq	.+60     	; 0x22e8 <free+0x92>
    22ac:	ea 01       	movw	r28, r20
    22ae:	f5 cf       	rjmp	.-22     	; 0x229a <free+0x44>
    22b0:	d3 83       	std	Z+3, r29	; 0x03
    22b2:	c2 83       	std	Z+2, r28	; 0x02
    22b4:	40 81       	ld	r20, Z
    22b6:	51 81       	ldd	r21, Z+1	; 0x01
    22b8:	84 0f       	add	r24, r20
    22ba:	95 1f       	adc	r25, r21
    22bc:	c8 17       	cp	r28, r24
    22be:	d9 07       	cpc	r29, r25
    22c0:	59 f4       	brne	.+22     	; 0x22d8 <free+0x82>
    22c2:	88 81       	ld	r24, Y
    22c4:	99 81       	ldd	r25, Y+1	; 0x01
    22c6:	84 0f       	add	r24, r20
    22c8:	95 1f       	adc	r25, r21
    22ca:	02 96       	adiw	r24, 0x02	; 2
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	93 83       	std	Z+3, r25	; 0x03
    22d6:	82 83       	std	Z+2, r24	; 0x02
    22d8:	21 15       	cp	r18, r1
    22da:	31 05       	cpc	r19, r1
    22dc:	29 f4       	brne	.+10     	; 0x22e8 <free+0x92>
    22de:	f0 93 d0 03 	sts	0x03D0, r31	; 0x8003d0 <__flp+0x1>
    22e2:	e0 93 cf 03 	sts	0x03CF, r30	; 0x8003cf <__flp>
    22e6:	3d c0       	rjmp	.+122    	; 0x2362 <free+0x10c>
    22e8:	e9 01       	movw	r28, r18
    22ea:	fb 83       	std	Y+3, r31	; 0x03
    22ec:	ea 83       	std	Y+2, r30	; 0x02
    22ee:	49 91       	ld	r20, Y+
    22f0:	59 91       	ld	r21, Y+
    22f2:	c4 0f       	add	r28, r20
    22f4:	d5 1f       	adc	r29, r21
    22f6:	ec 17       	cp	r30, r28
    22f8:	fd 07       	cpc	r31, r29
    22fa:	61 f4       	brne	.+24     	; 0x2314 <free+0xbe>
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	84 0f       	add	r24, r20
    2302:	95 1f       	adc	r25, r21
    2304:	02 96       	adiw	r24, 0x02	; 2
    2306:	e9 01       	movw	r28, r18
    2308:	99 83       	std	Y+1, r25	; 0x01
    230a:	88 83       	st	Y, r24
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	9b 83       	std	Y+3, r25	; 0x03
    2312:	8a 83       	std	Y+2, r24	; 0x02
    2314:	e0 e0       	ldi	r30, 0x00	; 0
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	12 96       	adiw	r26, 0x02	; 2
    231a:	8d 91       	ld	r24, X+
    231c:	9c 91       	ld	r25, X
    231e:	13 97       	sbiw	r26, 0x03	; 3
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	19 f0       	breq	.+6      	; 0x232a <free+0xd4>
    2324:	fd 01       	movw	r30, r26
    2326:	dc 01       	movw	r26, r24
    2328:	f7 cf       	rjmp	.-18     	; 0x2318 <free+0xc2>
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	11 97       	sbiw	r26, 0x01	; 1
    2330:	9d 01       	movw	r18, r26
    2332:	2e 5f       	subi	r18, 0xFE	; 254
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	82 0f       	add	r24, r18
    2338:	93 1f       	adc	r25, r19
    233a:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    233e:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	69 f4       	brne	.+26     	; 0x2362 <free+0x10c>
    2348:	30 97       	sbiw	r30, 0x00	; 0
    234a:	29 f4       	brne	.+10     	; 0x2356 <free+0x100>
    234c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <__flp+0x1>
    2350:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <__flp>
    2354:	02 c0       	rjmp	.+4      	; 0x235a <free+0x104>
    2356:	13 82       	std	Z+3, r1	; 0x03
    2358:	12 82       	std	Z+2, r1	; 0x02
    235a:	b0 93 ce 03 	sts	0x03CE, r27	; 0x8003ce <__brkval+0x1>
    235e:	a0 93 cd 03 	sts	0x03CD, r26	; 0x8003cd <__brkval>
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <memset>:
    2368:	dc 01       	movw	r26, r24
    236a:	01 c0       	rjmp	.+2      	; 0x236e <memset+0x6>
    236c:	6d 93       	st	X+, r22
    236e:	41 50       	subi	r20, 0x01	; 1
    2370:	50 40       	sbci	r21, 0x00	; 0
    2372:	e0 f7       	brcc	.-8      	; 0x236c <memset+0x4>
    2374:	08 95       	ret

00002376 <__do_global_dtors>:
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	ca e6       	ldi	r28, 0x6A	; 106
    237a:	d0 e0       	ldi	r29, 0x00	; 0
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <__do_global_dtors+0x10>
    237e:	fe 01       	movw	r30, r28
    2380:	0e 94 8d 10 	call	0x211a	; 0x211a <__tablejump2__>
    2384:	21 96       	adiw	r28, 0x01	; 1
    2386:	cb 36       	cpi	r28, 0x6B	; 107
    2388:	d1 07       	cpc	r29, r17
    238a:	c9 f7       	brne	.-14     	; 0x237e <__do_global_dtors+0x8>
    238c:	f8 94       	cli

0000238e <__stop_program>:
    238e:	ff cf       	rjmp	.-2      	; 0x238e <__stop_program>
