
CardKeyBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  00001d9c  00001e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000103  008001e0  008001e0  00001fb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0fb  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020a6  00000000  00000000  0000d5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003082  00000000  00000000  0000f675  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd8  00000000  00000000  000126f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b22  00000000  00000000  000134d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051ef  00000000  00000000  00015ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  0001b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__dtors_end>
       2:	68 c0       	rjmp	.+208    	; 0xd4 <__bad_interrupt>
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	66 c0       	rjmp	.+204    	; 0xd4 <__bad_interrupt>
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	64 c0       	rjmp	.+200    	; 0xd4 <__bad_interrupt>
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	62 c0       	rjmp	.+196    	; 0xd4 <__bad_interrupt>
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	e0 cb       	rjmp	.-2112   	; 0xfffff7d4 <__eeprom_end+0xff7ef7d4>
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	5e c0       	rjmp	.+188    	; 0xd4 <__bad_interrupt>
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	5c c0       	rjmp	.+184    	; 0xd4 <__bad_interrupt>
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	5a c0       	rjmp	.+180    	; 0xd4 <__bad_interrupt>
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	e8 c9       	rjmp	.-3120   	; 0xfffff3f4 <__eeprom_end+0xff7ef3f4>
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	66 c9       	rjmp	.-3380   	; 0xfffff2f4 <__eeprom_end+0xff7ef2f4>
      28:	58 c9       	rjmp	.-3408   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      2a:	68 c9       	rjmp	.-3376   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
      2c:	6c c9       	rjmp	.-3368   	; 0xfffff306 <__eeprom_end+0xff7ef306>
      2e:	78 c9       	rjmp	.-3344   	; 0xfffff320 <__eeprom_end+0xff7ef320>
      30:	7c c9       	rjmp	.-3336   	; 0xfffff32a <__eeprom_end+0xff7ef32a>
      32:	88 c9       	rjmp	.-3312   	; 0xfffff344 <__eeprom_end+0xff7ef344>

00000034 <__trampolines_end>:
      34:	00 00       	nop
      36:	00 08       	sbc	r0, r0
      38:	00 02       	muls	r16, r16
      3a:	01 00       	.word	0x0001	; ????
      3c:	00 03       	mulsu	r16, r16
      3e:	04 07       	cpc	r16, r20
	...

00000048 <digital_pin_to_bit_mask_PGM>:
      48:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      58:	04 08 10 20                                         ... 

0000005c <digital_pin_to_port_PGM>:
      5c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      6c:	03 03 03 03                                         ....

00000070 <port_to_output_PGM>:
      70:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

0000007a <port_to_mode_PGM>:
      7a:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

00000084 <__ctors_start>:
      84:	c8 07       	cpc	r28, r24
      86:	b2 0b       	sbc	r27, r18

00000088 <__ctors_end>:
      88:	d6 07       	cpc	r29, r22

0000008a <__dtors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	ec e9       	ldi	r30, 0x9C	; 156
      9e:	fd e1       	ldi	r31, 0x1D	; 29
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a0 3e       	cpi	r26, 0xE0	; 224
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 ee       	ldi	r26, 0xE0	; 224
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a3 3e       	cpi	r26, 0xE3	; 227
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>

000000bc <__do_global_ctors>:
      bc:	10 e0       	ldi	r17, 0x00	; 0
      be:	c4 e4       	ldi	r28, 0x44	; 68
      c0:	d0 e0       	ldi	r29, 0x00	; 0
      c2:	03 c0       	rjmp	.+6      	; 0xca <__do_global_ctors+0xe>
      c4:	21 97       	sbiw	r28, 0x01	; 1
      c6:	fe 01       	movw	r30, r28
      c8:	2f dd       	rcall	.-1442   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      ca:	c2 34       	cpi	r28, 0x42	; 66
      cc:	d1 07       	cpc	r29, r17
      ce:	d1 f7       	brne	.-12     	; 0xc4 <__do_global_ctors+0x8>
      d0:	4d db       	rcall	.-2406   	; 0xfffff76c <__eeprom_end+0xff7ef76c>
      d2:	58 ce       	rjmp	.-848    	; 0xfffffd84 <__eeprom_end+0xff7efd84>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <_ZN17Adafruit_NeoPixelD1Ev>:
    }
    p[rOffset] = r;          // Store R,G,B
    p[gOffset] = g;
    p[bOffset] = b;
  }
}
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	ec 01       	movw	r28, r24
      dc:	89 85       	ldd	r24, Y+9	; 0x09
      de:	9a 85       	ldd	r25, Y+10	; 0x0a
      e0:	c1 dd       	rcall	.-1150   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
      e2:	8e 81       	ldd	r24, Y+6	; 0x06
      e4:	9f 81       	ldd	r25, Y+7	; 0x07
      e6:	97 fd       	sbrc	r25, 7
      e8:	04 c0       	rjmp	.+8      	; 0xf2 <_ZN17Adafruit_NeoPixelD1Ev+0x1c>
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	4b cc       	rjmp	.-1898   	; 0xfffff988 <__eeprom_end+0xff7ef988>
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <_ZN17Adafruit_NeoPixel5beginEv>:
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	ec 01       	movw	r28, r24
      fe:	8e 81       	ldd	r24, Y+6	; 0x06
     100:	9f 81       	ldd	r25, Y+7	; 0x07
     102:	97 fd       	sbrc	r25, 7
     104:	05 c0       	rjmp	.+10     	; 0x110 <_ZN17Adafruit_NeoPixel5beginEv+0x18>
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	3f dc       	rcall	.-1922   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	8e 81       	ldd	r24, Y+6	; 0x06
     10e:	78 dc       	rcall	.-1808   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	89 83       	std	Y+1, r24	; 0x01
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <_ZN17Adafruit_NeoPixel12updateLengthEj>:
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	ec 01       	movw	r28, r24
     128:	7b 01       	movw	r14, r22
     12a:	89 85       	ldd	r24, Y+9	; 0x09
     12c:	9a 85       	ldd	r25, Y+10	; 0x0a
     12e:	9a dd       	rcall	.-1228   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     130:	9e 85       	ldd	r25, Y+14	; 0x0e
     132:	8b 85       	ldd	r24, Y+11	; 0x0b
     134:	98 17       	cp	r25, r24
     136:	19 f0       	breq	.+6      	; 0x13e <_ZN17Adafruit_NeoPixel12updateLengthEj+0x24>
     138:	84 e0       	ldi	r24, 0x04	; 4
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x28>
     13e:	83 e0       	ldi	r24, 0x03	; 3
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	8e 9d       	mul	r24, r14
     144:	80 01       	movw	r16, r0
     146:	8f 9d       	mul	r24, r15
     148:	10 0d       	add	r17, r0
     14a:	9e 9d       	mul	r25, r14
     14c:	10 0d       	add	r17, r0
     14e:	11 24       	eor	r1, r1
     150:	1d 83       	std	Y+5, r17	; 0x05
     152:	0c 83       	std	Y+4, r16	; 0x04
     154:	c8 01       	movw	r24, r16
     156:	ee dc       	rcall	.-1572   	; 0xfffffb34 <__eeprom_end+0xff7efb34>
     158:	9a 87       	std	Y+10, r25	; 0x0a
     15a:	89 87       	std	Y+9, r24	; 0x09
     15c:	00 97       	sbiw	r24, 0x00	; 0
     15e:	39 f0       	breq	.+14     	; 0x16e <_ZN17Adafruit_NeoPixel12updateLengthEj+0x54>
     160:	a8 01       	movw	r20, r16
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	07 de       	rcall	.-1010   	; 0xfffffd76 <__eeprom_end+0xff7efd76>
     168:	fb 82       	std	Y+3, r15	; 0x03
     16a:	ea 82       	std	Y+2, r14	; 0x02
     16c:	04 c0       	rjmp	.+8      	; 0x176 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5c>
     16e:	1d 82       	std	Y+5, r1	; 0x05
     170:	1c 82       	std	Y+4, r1	; 0x04
     172:	1b 82       	std	Y+3, r1	; 0x03
     174:	1a 82       	std	Y+2, r1	; 0x02
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	08 95       	ret

00000184 <_ZN17Adafruit_NeoPixel10updateTypeEj>:
     184:	fc 01       	movw	r30, r24
     186:	31 e0       	ldi	r19, 0x01	; 1
     188:	96 85       	ldd	r25, Z+14	; 0x0e
     18a:	83 85       	ldd	r24, Z+11	; 0x0b
     18c:	98 13       	cpse	r25, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	cb 01       	movw	r24, r22
     192:	26 e0       	ldi	r18, 0x06	; 6
     194:	96 95       	lsr	r25
     196:	87 95       	ror	r24
     198:	2a 95       	dec	r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
     19c:	28 2f       	mov	r18, r24
     19e:	23 70       	andi	r18, 0x03	; 3
     1a0:	26 87       	std	Z+14, r18	; 0x0e
     1a2:	cb 01       	movw	r24, r22
     1a4:	44 e0       	ldi	r20, 0x04	; 4
     1a6:	96 95       	lsr	r25
     1a8:	87 95       	ror	r24
     1aa:	4a 95       	dec	r20
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
     1ae:	83 70       	andi	r24, 0x03	; 3
     1b0:	83 87       	std	Z+11, r24	; 0x0b
     1b2:	ab 01       	movw	r20, r22
     1b4:	56 95       	lsr	r21
     1b6:	47 95       	ror	r20
     1b8:	56 95       	lsr	r21
     1ba:	47 95       	ror	r20
     1bc:	43 70       	andi	r20, 0x03	; 3
     1be:	44 87       	std	Z+12, r20	; 0x0c
     1c0:	96 2f       	mov	r25, r22
     1c2:	93 70       	andi	r25, 0x03	; 3
     1c4:	95 87       	std	Z+13, r25	; 0x0d
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	6f 3f       	cpi	r22, 0xFF	; 255
     1ca:	71 05       	cpc	r23, r1
     1cc:	11 f0       	breq	.+4      	; 0x1d2 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	90 83       	st	Z, r25
     1d4:	41 85       	ldd	r20, Z+9	; 0x09
     1d6:	52 85       	ldd	r21, Z+10	; 0x0a
     1d8:	45 2b       	or	r20, r21
     1da:	49 f0       	breq	.+18     	; 0x1ee <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6a>
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	28 13       	cpse	r18, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	39 17       	cp	r19, r25
     1e4:	21 f0       	breq	.+8      	; 0x1ee <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6a>
     1e6:	62 81       	ldd	r22, Z+2	; 0x02
     1e8:	73 81       	ldd	r23, Z+3	; 0x03
     1ea:	cf 01       	movw	r24, r30
     1ec:	96 cf       	rjmp	.-212    	; 0x11a <_ZN17Adafruit_NeoPixel12updateLengthEj>
     1ee:	08 95       	ret

000001f0 <_ZN17Adafruit_NeoPixel4showEv>:
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	29 97       	sbiw	r28, 0x09	; 9
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	8c 01       	movw	r16, r24
     212:	dc 01       	movw	r26, r24
     214:	19 96       	adiw	r26, 0x09	; 9
     216:	8d 91       	ld	r24, X+
     218:	9c 91       	ld	r25, X
     21a:	1a 97       	sbiw	r26, 0x0a	; 10
     21c:	89 2b       	or	r24, r25
     21e:	09 f4       	brne	.+2      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     220:	92 c1       	rjmp	.+804    	; 0x546 <nextbyte20+0x2e>
     222:	f8 01       	movw	r30, r16
     224:	c7 84       	ldd	r12, Z+15	; 0x0f
     226:	d0 88       	ldd	r13, Z+16	; 0x10
     228:	e1 88       	ldd	r14, Z+17	; 0x11
     22a:	f2 88       	ldd	r15, Z+18	; 0x12
     22c:	1d db       	rcall	.-2502   	; 0xfffff868 <__eeprom_end+0xff7ef868>
     22e:	6c 15       	cp	r22, r12
     230:	7d 05       	cpc	r23, r13
     232:	8e 05       	cpc	r24, r14
     234:	9f 05       	cpc	r25, r15
     236:	40 f4       	brcc	.+16     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
     238:	17 db       	rcall	.-2514   	; 0xfffff868 <__eeprom_end+0xff7ef868>
     23a:	d8 01       	movw	r26, r16
     23c:	1f 96       	adiw	r26, 0x0f	; 15
     23e:	6d 93       	st	X+, r22
     240:	7d 93       	st	X+, r23
     242:	8d 93       	st	X+, r24
     244:	9c 93       	st	X, r25
     246:	52 97       	sbiw	r26, 0x12	; 18
     248:	0f db       	rcall	.-2530   	; 0xfffff868 <__eeprom_end+0xff7ef868>
     24a:	f8 01       	movw	r30, r16
     24c:	c7 84       	ldd	r12, Z+15	; 0x0f
     24e:	d0 88       	ldd	r13, Z+16	; 0x10
     250:	e1 88       	ldd	r14, Z+17	; 0x11
     252:	f2 88       	ldd	r15, Z+18	; 0x12
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	8c 19       	sub	r24, r12
     25a:	9d 09       	sbc	r25, r13
     25c:	ae 09       	sbc	r26, r14
     25e:	bf 09       	sbc	r27, r15
     260:	8c 32       	cpi	r24, 0x2C	; 44
     262:	91 40       	sbci	r25, 0x01	; 1
     264:	a1 05       	cpc	r26, r1
     266:	b1 05       	cpc	r27, r1
     268:	e0 f2       	brcs	.-72     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     26a:	f8 94       	cli
     26c:	d8 01       	movw	r26, r16
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	8d 91       	ld	r24, X+
     272:	9c 91       	ld	r25, X
     274:	15 97       	sbiw	r26, 0x05	; 5
     276:	9a 83       	std	Y+2, r25	; 0x02
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	19 96       	adiw	r26, 0x09	; 9
     27c:	0d 90       	ld	r0, X+
     27e:	bc 91       	ld	r27, X
     280:	a0 2d       	mov	r26, r0
     282:	7d 01       	movw	r14, r26
     284:	ef ef       	ldi	r30, 0xFF	; 255
     286:	ee 1a       	sub	r14, r30
     288:	fe 0a       	sbc	r15, r30
     28a:	8c 91       	ld	r24, X
     28c:	89 87       	std	Y+9, r24	; 0x09
     28e:	d8 01       	movw	r26, r16
     290:	8c 91       	ld	r24, X
     292:	53 96       	adiw	r26, 0x13	; 19
     294:	0d 90       	ld	r0, X+
     296:	bc 91       	ld	r27, X
     298:	a0 2d       	mov	r26, r0
     29a:	88 23       	and	r24, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
     29e:	1a c1       	rjmp	.+564    	; 0x4d4 <__stack+0x75>
     2a0:	1d 82       	std	Y+5, r1	; 0x05
     2a2:	a2 33       	cpi	r26, 0x32	; 50
     2a4:	b1 05       	cpc	r27, r1
     2a6:	09 f0       	breq	.+2      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
     2a8:	59 c0       	rjmp	.+178    	; 0x35c <headD+0x82>
     2aa:	92 b3       	in	r25, 0x12	; 18
     2ac:	f8 01       	movw	r30, r16
     2ae:	85 89       	ldd	r24, Z+21	; 0x15
     2b0:	98 2b       	or	r25, r24
     2b2:	98 87       	std	Y+8, r25	; 0x08
     2b4:	92 b3       	in	r25, 0x12	; 18
     2b6:	80 95       	com	r24
     2b8:	89 23       	and	r24, r25
     2ba:	8f 83       	std	Y+7, r24	; 0x07
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	8e 83       	std	Y+6, r24	; 0x06
     2c0:	89 85       	ldd	r24, Y+9	; 0x09
     2c2:	87 ff       	sbrs	r24, 7
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
     2c6:	88 85       	ldd	r24, Y+8	; 0x08
     2c8:	8e 83       	std	Y+6, r24	; 0x06
     2ca:	58 85       	ldd	r21, Y+8	; 0x08
     2cc:	6f 81       	ldd	r22, Y+7	; 0x07
     2ce:	49 85       	ldd	r20, Y+9	; 0x09
     2d0:	3e 81       	ldd	r19, Y+6	; 0x06
     2d2:	2d 81       	ldd	r18, Y+5	; 0x05
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	d7 01       	movw	r26, r14

000002da <headD>:
     2da:	52 bb       	out	0x12, r21	; 18
     2dc:	26 2f       	mov	r18, r22
     2de:	32 bb       	out	0x12, r19	; 18
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <headD+0x8>
     2e2:	46 fd       	sbrc	r20, 6
     2e4:	25 2f       	mov	r18, r21
     2e6:	62 bb       	out	0x12, r22	; 18
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <headD+0x10>
     2ea:	52 bb       	out	0x12, r21	; 18
     2ec:	36 2f       	mov	r19, r22
     2ee:	22 bb       	out	0x12, r18	; 18
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <headD+0x18>
     2f2:	45 fd       	sbrc	r20, 5
     2f4:	35 2f       	mov	r19, r21
     2f6:	62 bb       	out	0x12, r22	; 18
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <headD+0x20>
     2fa:	52 bb       	out	0x12, r21	; 18
     2fc:	26 2f       	mov	r18, r22
     2fe:	32 bb       	out	0x12, r19	; 18
     300:	00 c0       	rjmp	.+0      	; 0x302 <headD+0x28>
     302:	44 fd       	sbrc	r20, 4
     304:	25 2f       	mov	r18, r21
     306:	62 bb       	out	0x12, r22	; 18
     308:	00 c0       	rjmp	.+0      	; 0x30a <headD+0x30>
     30a:	52 bb       	out	0x12, r21	; 18
     30c:	36 2f       	mov	r19, r22
     30e:	22 bb       	out	0x12, r18	; 18
     310:	00 c0       	rjmp	.+0      	; 0x312 <headD+0x38>
     312:	43 fd       	sbrc	r20, 3
     314:	35 2f       	mov	r19, r21
     316:	62 bb       	out	0x12, r22	; 18
     318:	00 c0       	rjmp	.+0      	; 0x31a <headD+0x40>
     31a:	52 bb       	out	0x12, r21	; 18
     31c:	26 2f       	mov	r18, r22
     31e:	32 bb       	out	0x12, r19	; 18
     320:	00 c0       	rjmp	.+0      	; 0x322 <headD+0x48>
     322:	42 fd       	sbrc	r20, 2
     324:	25 2f       	mov	r18, r21
     326:	62 bb       	out	0x12, r22	; 18
     328:	00 c0       	rjmp	.+0      	; 0x32a <headD+0x50>
     32a:	52 bb       	out	0x12, r21	; 18
     32c:	36 2f       	mov	r19, r22
     32e:	22 bb       	out	0x12, r18	; 18
     330:	00 c0       	rjmp	.+0      	; 0x332 <headD+0x58>
     332:	41 fd       	sbrc	r20, 1
     334:	35 2f       	mov	r19, r21
     336:	62 bb       	out	0x12, r22	; 18
     338:	00 c0       	rjmp	.+0      	; 0x33a <headD+0x60>
     33a:	52 bb       	out	0x12, r21	; 18
     33c:	26 2f       	mov	r18, r22
     33e:	32 bb       	out	0x12, r19	; 18
     340:	00 c0       	rjmp	.+0      	; 0x342 <headD+0x68>
     342:	40 fd       	sbrc	r20, 0
     344:	25 2f       	mov	r18, r21
     346:	62 bb       	out	0x12, r22	; 18
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	52 bb       	out	0x12, r21	; 18
     34c:	36 2f       	mov	r19, r22
     34e:	22 bb       	out	0x12, r18	; 18
     350:	4d 91       	ld	r20, X+
     352:	47 fd       	sbrc	r20, 7
     354:	35 2f       	mov	r19, r21
     356:	62 bb       	out	0x12, r22	; 18
     358:	01 f6       	brne	.-128    	; 0x2da <headD>
     35a:	b8 c0       	rjmp	.+368    	; 0x4cc <__stack+0x6d>
     35c:	a8 33       	cpi	r26, 0x38	; 56
     35e:	b1 05       	cpc	r27, r1
     360:	09 f0       	breq	.+2      	; 0x364 <headD+0x8a>
     362:	59 c0       	rjmp	.+178    	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     364:	98 b3       	in	r25, 0x18	; 24
     366:	f8 01       	movw	r30, r16
     368:	85 89       	ldd	r24, Z+21	; 0x15
     36a:	98 2b       	or	r25, r24
     36c:	98 87       	std	Y+8, r25	; 0x08
     36e:	98 b3       	in	r25, 0x18	; 24
     370:	80 95       	com	r24
     372:	89 23       	and	r24, r25
     374:	8f 83       	std	Y+7, r24	; 0x07
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	8e 83       	std	Y+6, r24	; 0x06
     37a:	89 85       	ldd	r24, Y+9	; 0x09
     37c:	87 ff       	sbrs	r24, 7
     37e:	02 c0       	rjmp	.+4      	; 0x384 <headD+0xaa>
     380:	88 85       	ldd	r24, Y+8	; 0x08
     382:	8e 83       	std	Y+6, r24	; 0x06
     384:	58 85       	ldd	r21, Y+8	; 0x08
     386:	6f 81       	ldd	r22, Y+7	; 0x07
     388:	49 85       	ldd	r20, Y+9	; 0x09
     38a:	3e 81       	ldd	r19, Y+6	; 0x06
     38c:	2d 81       	ldd	r18, Y+5	; 0x05
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	d7 01       	movw	r26, r14

00000394 <headB>:
     394:	58 bb       	out	0x18, r21	; 24
     396:	26 2f       	mov	r18, r22
     398:	38 bb       	out	0x18, r19	; 24
     39a:	00 c0       	rjmp	.+0      	; 0x39c <headB+0x8>
     39c:	46 fd       	sbrc	r20, 6
     39e:	25 2f       	mov	r18, r21
     3a0:	68 bb       	out	0x18, r22	; 24
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <headB+0x10>
     3a4:	58 bb       	out	0x18, r21	; 24
     3a6:	36 2f       	mov	r19, r22
     3a8:	28 bb       	out	0x18, r18	; 24
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <headB+0x18>
     3ac:	45 fd       	sbrc	r20, 5
     3ae:	35 2f       	mov	r19, r21
     3b0:	68 bb       	out	0x18, r22	; 24
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <headB+0x20>
     3b4:	58 bb       	out	0x18, r21	; 24
     3b6:	26 2f       	mov	r18, r22
     3b8:	38 bb       	out	0x18, r19	; 24
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <headB+0x28>
     3bc:	44 fd       	sbrc	r20, 4
     3be:	25 2f       	mov	r18, r21
     3c0:	68 bb       	out	0x18, r22	; 24
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <headB+0x30>
     3c4:	58 bb       	out	0x18, r21	; 24
     3c6:	36 2f       	mov	r19, r22
     3c8:	28 bb       	out	0x18, r18	; 24
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <headB+0x38>
     3cc:	43 fd       	sbrc	r20, 3
     3ce:	35 2f       	mov	r19, r21
     3d0:	68 bb       	out	0x18, r22	; 24
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <headB+0x40>
     3d4:	58 bb       	out	0x18, r21	; 24
     3d6:	26 2f       	mov	r18, r22
     3d8:	38 bb       	out	0x18, r19	; 24
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <headB+0x48>
     3dc:	42 fd       	sbrc	r20, 2
     3de:	25 2f       	mov	r18, r21
     3e0:	68 bb       	out	0x18, r22	; 24
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <headB+0x50>
     3e4:	58 bb       	out	0x18, r21	; 24
     3e6:	36 2f       	mov	r19, r22
     3e8:	28 bb       	out	0x18, r18	; 24
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <headB+0x58>
     3ec:	41 fd       	sbrc	r20, 1
     3ee:	35 2f       	mov	r19, r21
     3f0:	68 bb       	out	0x18, r22	; 24
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <headB+0x60>
     3f4:	58 bb       	out	0x18, r21	; 24
     3f6:	26 2f       	mov	r18, r22
     3f8:	38 bb       	out	0x18, r19	; 24
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <headB+0x68>
     3fc:	40 fd       	sbrc	r20, 0
     3fe:	25 2f       	mov	r18, r21
     400:	68 bb       	out	0x18, r22	; 24
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	58 bb       	out	0x18, r21	; 24
     406:	36 2f       	mov	r19, r22
     408:	28 bb       	out	0x18, r18	; 24
     40a:	4d 91       	ld	r20, X+
     40c:	47 fd       	sbrc	r20, 7
     40e:	35 2f       	mov	r19, r21
     410:	68 bb       	out	0x18, r22	; 24
     412:	01 f6       	brne	.-128    	; 0x394 <headB>
     414:	5b c0       	rjmp	.+182    	; 0x4cc <__stack+0x6d>
     416:	d5 97       	sbiw	r26, 0x35	; 53
     418:	09 f0       	breq	.+2      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
     41a:	8c c0       	rjmp	.+280    	; 0x534 <nextbyte20+0x1c>
     41c:	95 b3       	in	r25, 0x15	; 21
     41e:	f8 01       	movw	r30, r16
     420:	85 89       	ldd	r24, Z+21	; 0x15
     422:	98 2b       	or	r25, r24
     424:	98 87       	std	Y+8, r25	; 0x08
     426:	95 b3       	in	r25, 0x15	; 21
     428:	80 95       	com	r24
     42a:	89 23       	and	r24, r25
     42c:	8f 83       	std	Y+7, r24	; 0x07
     42e:	8f 81       	ldd	r24, Y+7	; 0x07
     430:	8e 83       	std	Y+6, r24	; 0x06
     432:	89 85       	ldd	r24, Y+9	; 0x09
     434:	87 ff       	sbrs	r24, 7
     436:	02 c0       	rjmp	.+4      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
     438:	88 85       	ldd	r24, Y+8	; 0x08
     43a:	8e 83       	std	Y+6, r24	; 0x06
     43c:	58 85       	ldd	r21, Y+8	; 0x08
     43e:	6f 81       	ldd	r22, Y+7	; 0x07
     440:	49 85       	ldd	r20, Y+9	; 0x09
     442:	3e 81       	ldd	r19, Y+6	; 0x06
     444:	2d 81       	ldd	r18, Y+5	; 0x05
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	d7 01       	movw	r26, r14

0000044c <headC>:
     44c:	55 bb       	out	0x15, r21	; 21
     44e:	26 2f       	mov	r18, r22
     450:	35 bb       	out	0x15, r19	; 21
     452:	00 c0       	rjmp	.+0      	; 0x454 <headC+0x8>
     454:	46 fd       	sbrc	r20, 6
     456:	25 2f       	mov	r18, r21
     458:	65 bb       	out	0x15, r22	; 21
     45a:	00 c0       	rjmp	.+0      	; 0x45c <headC+0x10>
     45c:	55 bb       	out	0x15, r21	; 21
     45e:	36 2f       	mov	r19, r22
     460:	25 bb       	out	0x15, r18	; 21
     462:	00 c0       	rjmp	.+0      	; 0x464 <__stack+0x5>
     464:	45 fd       	sbrc	r20, 5
     466:	35 2f       	mov	r19, r21
     468:	65 bb       	out	0x15, r22	; 21
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__stack+0xd>
     46c:	55 bb       	out	0x15, r21	; 21
     46e:	26 2f       	mov	r18, r22
     470:	35 bb       	out	0x15, r19	; 21
     472:	00 c0       	rjmp	.+0      	; 0x474 <__stack+0x15>
     474:	44 fd       	sbrc	r20, 4
     476:	25 2f       	mov	r18, r21
     478:	65 bb       	out	0x15, r22	; 21
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__stack+0x1d>
     47c:	55 bb       	out	0x15, r21	; 21
     47e:	36 2f       	mov	r19, r22
     480:	25 bb       	out	0x15, r18	; 21
     482:	00 c0       	rjmp	.+0      	; 0x484 <__stack+0x25>
     484:	43 fd       	sbrc	r20, 3
     486:	35 2f       	mov	r19, r21
     488:	65 bb       	out	0x15, r22	; 21
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__stack+0x2d>
     48c:	55 bb       	out	0x15, r21	; 21
     48e:	26 2f       	mov	r18, r22
     490:	35 bb       	out	0x15, r19	; 21
     492:	00 c0       	rjmp	.+0      	; 0x494 <__stack+0x35>
     494:	42 fd       	sbrc	r20, 2
     496:	25 2f       	mov	r18, r21
     498:	65 bb       	out	0x15, r22	; 21
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__stack+0x3d>
     49c:	55 bb       	out	0x15, r21	; 21
     49e:	36 2f       	mov	r19, r22
     4a0:	25 bb       	out	0x15, r18	; 21
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__stack+0x45>
     4a4:	41 fd       	sbrc	r20, 1
     4a6:	35 2f       	mov	r19, r21
     4a8:	65 bb       	out	0x15, r22	; 21
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__stack+0x4d>
     4ac:	55 bb       	out	0x15, r21	; 21
     4ae:	26 2f       	mov	r18, r22
     4b0:	35 bb       	out	0x15, r19	; 21
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__stack+0x55>
     4b4:	40 fd       	sbrc	r20, 0
     4b6:	25 2f       	mov	r18, r21
     4b8:	65 bb       	out	0x15, r22	; 21
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	55 bb       	out	0x15, r21	; 21
     4be:	36 2f       	mov	r19, r22
     4c0:	25 bb       	out	0x15, r18	; 21
     4c2:	4d 91       	ld	r20, X+
     4c4:	47 fd       	sbrc	r20, 7
     4c6:	35 2f       	mov	r19, r21
     4c8:	65 bb       	out	0x15, r22	; 21
     4ca:	01 f6       	brne	.-128    	; 0x44c <headC>
     4cc:	49 87       	std	Y+9, r20	; 0x09
     4ce:	3e 83       	std	Y+6, r19	; 0x06
     4d0:	2d 83       	std	Y+5, r18	; 0x05
     4d2:	2e c0       	rjmp	.+92     	; 0x530 <nextbyte20+0x18>
     4d4:	9c 91       	ld	r25, X
     4d6:	f8 01       	movw	r30, r16
     4d8:	85 89       	ldd	r24, Z+21	; 0x15
     4da:	98 2b       	or	r25, r24
     4dc:	98 87       	std	Y+8, r25	; 0x08
     4de:	9c 91       	ld	r25, X
     4e0:	80 95       	com	r24
     4e2:	89 23       	and	r24, r25
     4e4:	8f 83       	std	Y+7, r24	; 0x07
     4e6:	8f 81       	ldd	r24, Y+7	; 0x07
     4e8:	8c 83       	std	Y+4, r24	; 0x04
     4ea:	88 e0       	ldi	r24, 0x08	; 8
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	58 85       	ldd	r21, Y+8	; 0x08
     4f0:	6f 81       	ldd	r22, Y+7	; 0x07
     4f2:	49 85       	ldd	r20, Y+9	; 0x09
     4f4:	3b 81       	ldd	r19, Y+3	; 0x03
     4f6:	2c 81       	ldd	r18, Y+4	; 0x04
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	f7 01       	movw	r30, r14

000004fe <head20>:
     4fe:	5c 93       	st	X, r21
     500:	47 fd       	sbrc	r20, 7
     502:	25 2f       	mov	r18, r21
     504:	2c 93       	st	X, r18
     506:	26 2f       	mov	r18, r22
     508:	3a 95       	dec	r19
     50a:	31 f0       	breq	.+12     	; 0x518 <nextbyte20>
     50c:	44 1f       	adc	r20, r20
     50e:	6c 93       	st	X, r22
     510:	00 c0       	rjmp	.+0      	; 0x512 <head20+0x14>
     512:	00 c0       	rjmp	.+0      	; 0x514 <head20+0x16>
     514:	00 c0       	rjmp	.+0      	; 0x516 <head20+0x18>
     516:	f3 cf       	rjmp	.-26     	; 0x4fe <head20>

00000518 <nextbyte20>:
     518:	6c 93       	st	X, r22
     51a:	00 00       	nop
     51c:	38 e0       	ldi	r19, 0x08	; 8
     51e:	41 91       	ld	r20, Z+
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	69 f7       	brne	.-38     	; 0x4fe <head20>
     524:	f8 01       	movw	r30, r16
     526:	b4 8b       	std	Z+20, r27	; 0x14
     528:	a3 8b       	std	Z+19, r26	; 0x13
     52a:	49 87       	std	Y+9, r20	; 0x09
     52c:	3b 83       	std	Y+3, r19	; 0x03
     52e:	2c 83       	std	Y+4, r18	; 0x04
     530:	9a 83       	std	Y+2, r25	; 0x02
     532:	89 83       	std	Y+1, r24	; 0x01
     534:	78 94       	sei
     536:	98 d9       	rcall	.-3280   	; 0xfffff868 <__eeprom_end+0xff7ef868>
     538:	d8 01       	movw	r26, r16
     53a:	1f 96       	adiw	r26, 0x0f	; 15
     53c:	6d 93       	st	X+, r22
     53e:	7d 93       	st	X+, r23
     540:	8d 93       	st	X+, r24
     542:	9c 93       	st	X, r25
     544:	52 97       	sbiw	r26, 0x12	; 18
     546:	29 96       	adiw	r28, 0x09	; 9
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	08 95       	ret

00000564 <_ZN17Adafruit_NeoPixel6setPinEj>:
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	8c 01       	movw	r16, r24
     56e:	eb 01       	movw	r28, r22
     570:	dc 01       	movw	r26, r24
     572:	11 96       	adiw	r26, 0x01	; 1
     574:	8c 91       	ld	r24, X
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	88 23       	and	r24, r24
     57a:	41 f0       	breq	.+16     	; 0x58c <_ZN17Adafruit_NeoPixel6setPinEj+0x28>
     57c:	16 96       	adiw	r26, 0x06	; 6
     57e:	8d 91       	ld	r24, X+
     580:	9c 91       	ld	r25, X
     582:	17 97       	sbiw	r26, 0x07	; 7
     584:	97 fd       	sbrc	r25, 7
     586:	02 c0       	rjmp	.+4      	; 0x58c <_ZN17Adafruit_NeoPixel6setPinEj+0x28>
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	fe d9       	rcall	.-3076   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     58c:	f8 01       	movw	r30, r16
     58e:	d7 83       	std	Z+7, r29	; 0x07
     590:	c6 83       	std	Z+6, r28	; 0x06
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	88 23       	and	r24, r24
     596:	31 f0       	breq	.+12     	; 0x5a4 <_ZN17Adafruit_NeoPixel6setPinEj+0x40>
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	8c 2f       	mov	r24, r28
     59c:	f5 d9       	rcall	.-3094   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	8c 2f       	mov	r24, r28
     5a2:	2e da       	rcall	.-2980   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
     5a4:	fe 01       	movw	r30, r28
     5a6:	e4 5a       	subi	r30, 0xA4	; 164
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	e4 91       	lpm	r30, Z
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	e0 59       	subi	r30, 0x90	; 144
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	85 91       	lpm	r24, Z+
     5b8:	94 91       	lpm	r25, Z
     5ba:	d8 01       	movw	r26, r16
     5bc:	54 96       	adiw	r26, 0x14	; 20
     5be:	9c 93       	st	X, r25
     5c0:	8e 93       	st	-X, r24
     5c2:	53 97       	sbiw	r26, 0x13	; 19
     5c4:	fe 01       	movw	r30, r28
     5c6:	e8 5b       	subi	r30, 0xB8	; 184
     5c8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ca:	e4 91       	lpm	r30, Z
     5cc:	55 96       	adiw	r26, 0x15	; 21
     5ce:	ec 93       	st	X, r30
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <_ZN17Adafruit_NeoPixelC1Ejjj>:
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	7b 01       	movw	r14, r22
     5ea:	8a 01       	movw	r16, r20
     5ec:	19 82       	std	Y+1, r1	; 0x01
     5ee:	18 86       	std	Y+8, r1	; 0x08
     5f0:	1a 86       	std	Y+10, r1	; 0x0a
     5f2:	19 86       	std	Y+9, r1	; 0x09
     5f4:	1f 86       	std	Y+15, r1	; 0x0f
     5f6:	18 8a       	std	Y+16, r1	; 0x10
     5f8:	19 8a       	std	Y+17, r1	; 0x11
     5fa:	1a 8a       	std	Y+18, r1	; 0x12
     5fc:	b9 01       	movw	r22, r18
     5fe:	c2 dd       	rcall	.-1148   	; 0x184 <_ZN17Adafruit_NeoPixel10updateTypeEj>
     600:	b7 01       	movw	r22, r14
     602:	ce 01       	movw	r24, r28
     604:	8a dd       	rcall	.-1260   	; 0x11a <_ZN17Adafruit_NeoPixel12updateLengthEj>
     606:	b8 01       	movw	r22, r16
     608:	ce 01       	movw	r24, r28
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	a6 cf       	rjmp	.-180    	; 0x564 <_ZN17Adafruit_NeoPixel6setPinEj>

00000618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is white (for RGBW
              pixels) or ignored (for RGB pixels), next is red, then green,
              and least significant byte is blue.
*/
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
     618:	7f 92       	push	r7
     61a:	8f 92       	push	r8
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	fc 01       	movw	r30, r24
  if(n < numLEDs) {
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	68 17       	cp	r22, r24
     63a:	79 07       	cpc	r23, r25
     63c:	08 f0       	brcs	.+2      	; 0x640 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
     63e:	53 c0       	rjmp	.+166    	; 0x6e6 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
     640:	4a 01       	movw	r8, r20
     642:	aa 24       	eor	r10, r10
     644:	bb 24       	eor	r11, r11
     646:	78 2c       	mov	r7, r8
      g = (uint8_t)(c >>  8),
     648:	c3 2e       	mov	r12, r19
     64a:	d4 2e       	mov	r13, r20
     64c:	e5 2e       	mov	r14, r21
     64e:	ff 24       	eor	r15, r15
     650:	bc 2d       	mov	r27, r12
      b = (uint8_t)c;
     652:	a2 2f       	mov	r26, r18
    if(brightness) { // See notes in setBrightness()
     654:	80 85       	ldd	r24, Z+8	; 0x08
     656:	88 23       	and	r24, r24
     658:	61 f0       	breq	.+24     	; 0x672 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
      r = (r * brightness) >> 8;
     65a:	88 9e       	mul	r8, r24
     65c:	40 01       	movw	r8, r0
     65e:	11 24       	eor	r1, r1
     660:	79 2c       	mov	r7, r9
      g = (g * brightness) >> 8;
     662:	8c 9d       	mul	r24, r12
     664:	60 01       	movw	r12, r0
     666:	11 24       	eor	r1, r1
     668:	bd 2d       	mov	r27, r13
      b = (b * brightness) >> 8;
     66a:	82 9f       	mul	r24, r18
     66c:	70 01       	movw	r14, r0
     66e:	11 24       	eor	r1, r1
     670:	af 2d       	mov	r26, r15
    }
    if(wOffset == rOffset) {
     672:	96 85       	ldd	r25, Z+14	; 0x0e
     674:	d3 85       	ldd	r29, Z+11	; 0x0b
     676:	e1 84       	ldd	r14, Z+9	; 0x09
     678:	f2 84       	ldd	r15, Z+10	; 0x0a
     67a:	9d 13       	cpse	r25, r29
     67c:	08 c0       	rjmp	.+16     	; 0x68e <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
      p = &pixels[n * 3];
     67e:	cb 01       	movw	r24, r22
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	68 0f       	add	r22, r24
     686:	79 1f       	adc	r23, r25
     688:	6e 0d       	add	r22, r14
     68a:	7f 1d       	adc	r23, r15
     68c:	1c c0       	rjmp	.+56     	; 0x6c6 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    } else {
      p = &pixels[n * 4];
     68e:	66 0f       	add	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	66 0f       	add	r22, r22
     694:	77 1f       	adc	r23, r23
     696:	6e 0d       	add	r22, r14
     698:	7f 1d       	adc	r23, r15
      uint8_t w = (uint8_t)(c >> 24);
     69a:	05 2f       	mov	r16, r21
     69c:	11 27       	eor	r17, r17
     69e:	22 27       	eor	r18, r18
     6a0:	33 27       	eor	r19, r19
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
     6a2:	7b 01       	movw	r14, r22
     6a4:	e9 0e       	add	r14, r25
     6a6:	f1 1c       	adc	r15, r1
     6a8:	81 11       	cpse	r24, r1
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
     6ac:	20 2f       	mov	r18, r16
     6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	80 9f       	mul	r24, r16
     6b4:	60 01       	movw	r12, r0
     6b6:	81 9f       	mul	r24, r17
     6b8:	d0 0c       	add	r13, r0
     6ba:	90 9f       	mul	r25, r16
     6bc:	d0 0c       	add	r13, r0
     6be:	11 24       	eor	r1, r1
     6c0:	2d 2d       	mov	r18, r13
     6c2:	e7 01       	movw	r28, r14
     6c4:	28 83       	st	Y, r18
    }
    p[rOffset] = r;
     6c6:	83 85       	ldd	r24, Z+11	; 0x0b
     6c8:	9b 01       	movw	r18, r22
     6ca:	28 0f       	add	r18, r24
     6cc:	31 1d       	adc	r19, r1
     6ce:	e9 01       	movw	r28, r18
     6d0:	78 82       	st	Y, r7
    p[gOffset] = g;
     6d2:	84 85       	ldd	r24, Z+12	; 0x0c
     6d4:	eb 01       	movw	r28, r22
     6d6:	c8 0f       	add	r28, r24
     6d8:	d1 1d       	adc	r29, r1
     6da:	b8 83       	st	Y, r27
    p[bOffset] = b;
     6dc:	85 85       	ldd	r24, Z+13	; 0x0d
     6de:	fb 01       	movw	r30, r22
     6e0:	e8 0f       	add	r30, r24
     6e2:	f1 1d       	adc	r31, r1
     6e4:	a0 83       	st	Z, r26
  }
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	9f 90       	pop	r9
     6fc:	8f 90       	pop	r8
     6fe:	7f 90       	pop	r7
     700:	08 95       	ret

00000702 <_ZN5Print17availableForWriteEv>:
uint16_t SendOnlySoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	08 95       	ret

00000708 <_ZN22SendOnlySoftwareSerial5writeEh>:
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	dc 01       	movw	r26, r24
     710:	52 96       	adiw	r26, 0x12	; 18
     712:	8d 91       	ld	r24, X+
     714:	9c 91       	ld	r25, X
     716:	53 97       	sbiw	r26, 0x13	; 19
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	39 f4       	brne	.+14     	; 0x72a <_ZN22SendOnlySoftwareSerial5writeEh+0x22>
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	13 96       	adiw	r26, 0x03	; 3
     722:	3c 93       	st	X, r19
     724:	2e 93       	st	-X, r18
     726:	12 97       	sbiw	r26, 0x02	; 2
     728:	3b c0       	rjmp	.+118    	; 0x7a0 <_ZN22SendOnlySoftwareSerial5writeEh+0x98>
     72a:	1d 96       	adiw	r26, 0x0d	; 13
     72c:	ed 91       	ld	r30, X+
     72e:	fc 91       	ld	r31, X
     730:	1e 97       	sbiw	r26, 0x0e	; 14
     732:	1c 96       	adiw	r26, 0x0c	; 12
     734:	2c 91       	ld	r18, X
     736:	1c 97       	sbiw	r26, 0x0c	; 12
     738:	32 2f       	mov	r19, r18
     73a:	30 95       	com	r19
     73c:	1f b7       	in	r17, 0x3f	; 63
     73e:	54 96       	adiw	r26, 0x14	; 20
     740:	4c 91       	ld	r20, X
     742:	54 97       	sbiw	r26, 0x14	; 20
     744:	74 2f       	mov	r23, r20
     746:	72 70       	andi	r23, 0x02	; 2
     748:	41 fd       	sbrc	r20, 1
     74a:	60 95       	com	r22
     74c:	f8 94       	cli
     74e:	40 81       	ld	r20, Z
     750:	77 23       	and	r23, r23
     752:	11 f0       	breq	.+4      	; 0x758 <_ZN22SendOnlySoftwareSerial5writeEh+0x50>
     754:	42 2b       	or	r20, r18
     756:	01 c0       	rjmp	.+2      	; 0x75a <_ZN22SendOnlySoftwareSerial5writeEh+0x52>
     758:	43 23       	and	r20, r19
     75a:	40 83       	st	Z, r20
     75c:	ec 01       	movw	r28, r24
     75e:	21 97       	sbiw	r28, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <_ZN22SendOnlySoftwareSerial5writeEh+0x56>
     762:	48 e0       	ldi	r20, 0x08	; 8
     764:	50 81       	ld	r21, Z
     766:	60 ff       	sbrs	r22, 0
     768:	02 c0       	rjmp	.+4      	; 0x76e <_ZN22SendOnlySoftwareSerial5writeEh+0x66>
     76a:	52 2b       	or	r21, r18
     76c:	01 c0       	rjmp	.+2      	; 0x770 <_ZN22SendOnlySoftwareSerial5writeEh+0x68>
     76e:	53 23       	and	r21, r19
     770:	50 83       	st	Z, r21
     772:	ec 01       	movw	r28, r24
     774:	21 97       	sbiw	r28, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <_ZN22SendOnlySoftwareSerial5writeEh+0x6c>
     778:	66 95       	lsr	r22
     77a:	41 50       	subi	r20, 0x01	; 1
     77c:	99 f7       	brne	.-26     	; 0x764 <_ZN22SendOnlySoftwareSerial5writeEh+0x5c>
     77e:	80 81       	ld	r24, Z
     780:	77 23       	and	r23, r23
     782:	19 f0       	breq	.+6      	; 0x78a <_ZN22SendOnlySoftwareSerial5writeEh+0x82>
     784:	83 23       	and	r24, r19
     786:	80 83       	st	Z, r24
     788:	02 c0       	rjmp	.+4      	; 0x78e <_ZN22SendOnlySoftwareSerial5writeEh+0x86>
     78a:	28 2b       	or	r18, r24
     78c:	20 83       	st	Z, r18
     78e:	1f bf       	out	0x3f, r17	; 63
     790:	52 96       	adiw	r26, 0x12	; 18
     792:	8d 91       	ld	r24, X+
     794:	9c 91       	ld	r25, X
     796:	53 97       	sbiw	r26, 0x13	; 19
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <_ZN22SendOnlySoftwareSerial5writeEh+0x90>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	08 95       	ret

000007a8 <_ZN22SendOnlySoftwareSerial3endEv>:
     7a8:	08 95       	ret

000007aa <_ZN22SendOnlySoftwareSerial9availableEv>:
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 95       	ret

000007b0 <_ZN22SendOnlySoftwareSerial4peekEv>:
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	9f ef       	ldi	r25, 0xFF	; 255
     7b4:	08 95       	ret

000007b6 <_ZN22SendOnlySoftwareSerialD1Ev>:
     7b6:	08 95       	ret

000007b8 <_ZN22SendOnlySoftwareSerial5setTXEh>:
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
     7c0:	16 2f       	mov	r17, r22
     7c2:	6c 89       	ldd	r22, Y+20	; 0x14
     7c4:	66 95       	lsr	r22
     7c6:	61 70       	andi	r22, 0x01	; 1
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	68 27       	eor	r22, r24
     7cc:	81 2f       	mov	r24, r17
     7ce:	18 d9       	rcall	.-3536   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 2f       	mov	r24, r17
     7d4:	d9 d8       	rcall	.-3662   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     7d6:	81 2f       	mov	r24, r17
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	e8 5b       	subi	r30, 0xB8	; 184
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	e4 91       	lpm	r30, Z
     7e2:	ec 87       	std	Y+12, r30	; 0x0c
     7e4:	fc 01       	movw	r30, r24
     7e6:	e4 5a       	subi	r30, 0xA4	; 164
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	e4 91       	lpm	r30, Z
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e0 59       	subi	r30, 0x90	; 144
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	85 91       	lpm	r24, Z+
     7f8:	94 91       	lpm	r25, Z
     7fa:	9e 87       	std	Y+14, r25	; 0x0e
     7fc:	8d 87       	std	Y+13, r24	; 0x0d
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <_ZN22SendOnlySoftwareSerialC1Ehb>:
     806:	fc 01       	movw	r30, r24
     808:	13 82       	std	Z+3, r1	; 0x03
     80a:	12 82       	std	Z+2, r1	; 0x02
     80c:	88 ee       	ldi	r24, 0xE8	; 232
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	84 83       	std	Z+4, r24	; 0x04
     816:	95 83       	std	Z+5, r25	; 0x05
     818:	a6 83       	std	Z+6, r26	; 0x06
     81a:	b7 83       	std	Z+7, r27	; 0x07
     81c:	8a eb       	ldi	r24, 0xBA	; 186
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
     824:	13 8a       	std	Z+19, r1	; 0x13
     826:	12 8a       	std	Z+18, r1	; 0x12
     828:	84 89       	ldd	r24, Z+20	; 0x14
     82a:	40 fb       	bst	r20, 0
     82c:	81 f9       	bld	r24, 1
     82e:	84 8b       	std	Z+20, r24	; 0x14
     830:	cf 01       	movw	r24, r30
     832:	c2 cf       	rjmp	.-124    	; 0x7b8 <_ZN22SendOnlySoftwareSerial5setTXEh>

00000834 <_ZN22SendOnlySoftwareSerial5beginEl>:
//
// Public methods
//

void SendOnlySoftwareSerial::begin(long speed)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
     83a:	9a 01       	movw	r18, r20
     83c:	ab 01       	movw	r20, r22
  _tx_delay = 0;

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     83e:	60 e8       	ldi	r22, 0x80	; 128
     840:	74 e8       	ldi	r23, 0x84	; 132
     842:	8e e1       	ldi	r24, 0x1E	; 30
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	54 d9       	rcall	.-3416   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
  uint8_t port = digitalPinToPort(tx);
  _transmitPortRegister = portOutputRegister(port);
}

uint16_t SendOnlySoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     848:	24 30       	cpi	r18, 0x04	; 4
     84a:	31 05       	cpc	r19, r1
     84c:	18 f0       	brcs	.+6      	; 0x854 <_ZN22SendOnlySoftwareSerial5beginEl+0x20>
    return num - sub;
     84e:	23 50       	subi	r18, 0x03	; 3
     850:	31 09       	sbc	r19, r1
     852:	02 c0       	rjmp	.+4      	; 0x858 <_ZN22SendOnlySoftwareSerial5beginEl+0x24>
  else
    return 1;
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     858:	3b 8b       	std	Y+19, r19	; 0x13
     85a:	2a 8b       	std	Y+18, r18	; 0x12
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <_Z7flashOnv>:
int _shift = 0, _fn = 0, _sym = 0, idle = 0;
unsigned char KEY = 0, hadPressed = 0;
int Mode = 0; //0->normal.1->shift 2->long_shift, 3->sym, 4->long_shift 5->fn,6->long_fn
void flashOn()
{
  pixels.setPixelColor(0, pixels.Color(3, 3, 3)); pixels.show();
     862:	23 e0       	ldi	r18, 0x03	; 3
     864:	33 e0       	ldi	r19, 0x03	; 3
     866:	43 e0       	ldi	r20, 0x03	; 3
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	d2 de       	rcall	.-604    	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	bb cc       	rjmp	.-1674   	; 0x1f0 <_ZN17Adafruit_NeoPixel4showEv>

0000087a <_Z8flashOffv>:
}
void flashOff()
{
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	a9 01       	movw	r20, r18
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	c7 de       	rcall	.-626    	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	b0 cc       	rjmp	.-1696   	; 0x1f0 <_ZN17Adafruit_NeoPixel4showEv>

00000890 <setup>:
  }
}


void setup()
{
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
  pinMode(A3, OUTPUT);
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	81 e1       	ldi	r24, 0x11	; 17
     8a0:	73 d8       	rcall	.-3866   	; 0xfffff988 <__eeprom_end+0xff7ef988>
  pinMode(A2, OUTPUT);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	80 e1       	ldi	r24, 0x10	; 16
     8a6:	70 d8       	rcall	.-3872   	; 0xfffff988 <__eeprom_end+0xff7ef988>
  pinMode(A1, OUTPUT);
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	8f e0       	ldi	r24, 0x0F	; 15
     8ac:	6d d8       	rcall	.-3878   	; 0xfffff988 <__eeprom_end+0xff7ef988>
  pinMode(A0, OUTPUT);
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	8e e0       	ldi	r24, 0x0E	; 14
     8b2:	6a d8       	rcall	.-3884   	; 0xfffff988 <__eeprom_end+0xff7ef988>
  digitalWrite(A0, HIGH);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	8e e0       	ldi	r24, 0x0E	; 14
     8b8:	a3 d8       	rcall	.-3770   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A1, LOW);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8f e0       	ldi	r24, 0x0F	; 15
     8be:	a0 d8       	rcall	.-3776   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A2, LOW);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	80 e1       	ldi	r24, 0x10	; 16
     8c4:	9d d8       	rcall	.-3782   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A3, LOW);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	81 e1       	ldi	r24, 0x11	; 17
     8ca:	9a d8       	rcall	.-3788   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  DDRB = 0x00;
     8cc:	17 ba       	out	0x17, r1	; 23
  PORTB = 0xff;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	88 bb       	out	0x18, r24	; 24
  DDRD = 0x00;
     8d2:	11 ba       	out	0x11, r1	; 17
  PORTD = 0xff;
     8d4:	82 bb       	out	0x12, r24	; 18

  pixels.begin();
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e dc       	rcall	.-2020   	; 0xf8 <_ZN17Adafruit_NeoPixel5beginEv>
     8dc:	c3 e0       	ldi	r28, 0x03	; 3
     8de:	d0 e0       	ldi	r29, 0x00	; 0
     8e0:	c1 2c       	mov	r12, r1
     8e2:	d1 2c       	mov	r13, r1
     8e4:	76 01       	movw	r14, r12
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < 30; i++)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
     8e6:	b6 01       	movw	r22, r12
     8e8:	55 27       	eor	r21, r21
     8ea:	44 27       	eor	r20, r20
     8ec:	be 2d       	mov	r27, r14
     8ee:	ad 2d       	mov	r26, r13
     8f0:	9c 2d       	mov	r25, r12
     8f2:	88 27       	eor	r24, r24
     8f4:	84 2b       	or	r24, r20
     8f6:	95 2b       	or	r25, r21
     8f8:	a6 2b       	or	r26, r22
     8fa:	b7 2b       	or	r27, r23
     8fc:	9c 01       	movw	r18, r24
     8fe:	ad 01       	movw	r20, r26
     900:	2c 29       	or	r18, r12
     902:	3d 29       	or	r19, r13
     904:	4e 29       	or	r20, r14
     906:	5f 29       	or	r21, r15
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	83 de       	rcall	.-762    	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	6c dc       	rcall	.-1832   	; 0x1f0 <_ZN17Adafruit_NeoPixel4showEv>
      delay(6);
     918:	66 e0       	ldi	r22, 0x06	; 6
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	c9 d7       	rcall	.+3986   	; 0x18b4 <delay>
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	c8 1a       	sub	r12, r24
     926:	d8 0a       	sbc	r13, r24
     928:	e8 0a       	sbc	r14, r24
     92a:	f8 0a       	sbc	r15, r24
  PORTD = 0xff;

  pixels.begin();
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < 30; i++)
     92c:	8e e1       	ldi	r24, 0x1E	; 30
     92e:	c8 16       	cp	r12, r24
     930:	d1 04       	cpc	r13, r1
     932:	e1 04       	cpc	r14, r1
     934:	f1 04       	cpc	r15, r1
     936:	b9 f6       	brne	.-82     	; 0x8e6 <setup+0x56>
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }
    for (int i = 30; i > 0; i--)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
     938:	b6 01       	movw	r22, r12
     93a:	55 27       	eor	r21, r21
     93c:	44 27       	eor	r20, r20
     93e:	be 2d       	mov	r27, r14
     940:	ad 2d       	mov	r26, r13
     942:	9c 2d       	mov	r25, r12
     944:	88 27       	eor	r24, r24
     946:	84 2b       	or	r24, r20
     948:	95 2b       	or	r25, r21
     94a:	a6 2b       	or	r26, r22
     94c:	b7 2b       	or	r27, r23
     94e:	9c 01       	movw	r18, r24
     950:	ad 01       	movw	r20, r26
     952:	2c 29       	or	r18, r12
     954:	3d 29       	or	r19, r13
     956:	4e 29       	or	r20, r14
     958:	5f 29       	or	r21, r15
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	5a de       	rcall	.-844    	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	43 dc       	rcall	.-1914   	; 0x1f0 <_ZN17Adafruit_NeoPixel4showEv>
      delay(6);
     96a:	66 e0       	ldi	r22, 0x06	; 6
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 d7       	rcall	.+3904   	; 0x18b4 <delay>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	c8 1a       	sub	r12, r24
     978:	d1 08       	sbc	r13, r1
     97a:	e1 08       	sbc	r14, r1
     97c:	f1 08       	sbc	r15, r1
    for (int i = 0; i < 30; i++)
    {
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }
    for (int i = 30; i > 0; i--)
     97e:	e1 f6       	brne	.-72     	; 0x938 <setup+0xa8>
     980:	21 97       	sbiw	r28, 0x01	; 1
  PORTB = 0xff;
  DDRD = 0x00;
  PORTD = 0xff;

  pixels.begin();
  for (int j = 0; j < 3; j++)
     982:	09 f0       	breq	.+2      	; 0x986 <setup+0xf6>
     984:	ad cf       	rjmp	.-166    	; 0x8e0 <setup+0x50>
      pixels.setPixelColor(0, pixels.Color(i, i, i)); pixels.show();
      delay(6);
    }

  }
  pixels.setPixelColor(0, pixels.Color(0, 0, 0));
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	41 de       	rcall	.-894    	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
#ifndef USE_SOFTUART
  Wire.begin(0x5f);
  Wire.onRequest(requestEvent);
#else
  softSerial.begin(115200);  
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	52 ec       	ldi	r21, 0xC2	; 194
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	8c ee       	ldi	r24, 0xEC	; 236
     9a0:	91 e0       	ldi	r25, 0x01	; 1
#endif
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
  pixels.setPixelColor(0, pixels.Color(0, 0, 0));
#ifndef USE_SOFTUART
  Wire.begin(0x5f);
  Wire.onRequest(requestEvent);
#else
  softSerial.begin(115200);  
     9ae:	42 cf       	rjmp	.-380    	; 0x834 <_ZN22SendOnlySoftwareSerial5beginEl>

000009b0 <_Z8GetInputv>:
#endif
}

unsigned char GetInput()
{
  digitalWrite(A3, LOW);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	81 e1       	ldi	r24, 0x11	; 17
     9b4:	25 d8       	rcall	.-4022   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A2, HIGH);
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	80 e1       	ldi	r24, 0x10	; 16
     9ba:	22 d8       	rcall	.-4028   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A1, HIGH);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	8f e0       	ldi	r24, 0x0F	; 15
     9c0:	1f d8       	rcall	.-4034   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  digitalWrite(A0, HIGH);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	8e e0       	ldi	r24, 0x0E	; 14
     9c6:	1c d8       	rcall	.-4040   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  delay(2);
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	71 d7       	rcall	.+3810   	; 0x18b4 <delay>
  switch (PIND)
     9d2:	80 b3       	in	r24, 0x10	; 16
     9d4:	8f 3e       	cpi	r24, 0xEF	; 239
     9d6:	09 f4       	brne	.+2      	; 0x9da <_Z8GetInputv+0x2a>
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <_Z8GetInputv+0xac>
     9da:	50 f4       	brcc	.+20     	; 0x9f0 <_Z8GetInputv+0x40>
     9dc:	8f 3b       	cpi	r24, 0xBF	; 191
     9de:	09 f4       	brne	.+2      	; 0x9e2 <_Z8GetInputv+0x32>
     9e0:	53 c0       	rjmp	.+166    	; 0xa88 <_Z8GetInputv+0xd8>
     9e2:	8f 3d       	cpi	r24, 0xDF	; 223
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <_Z8GetInputv+0x38>
     9e6:	45 c0       	rjmp	.+138    	; 0xa72 <_Z8GetInputv+0xc2>
     9e8:	8f 37       	cpi	r24, 0x7F	; 127
     9ea:	09 f0       	breq	.+2      	; 0x9ee <_Z8GetInputv+0x3e>
     9ec:	63 c0       	rjmp	.+198    	; 0xab4 <_Z8GetInputv+0x104>
     9ee:	57 c0       	rjmp	.+174    	; 0xa9e <_Z8GetInputv+0xee>
     9f0:	8b 3f       	cpi	r24, 0xFB	; 251
     9f2:	f1 f0       	breq	.+60     	; 0xa30 <_Z8GetInputv+0x80>
     9f4:	18 f4       	brcc	.+6      	; 0x9fc <_Z8GetInputv+0x4c>
     9f6:	87 3f       	cpi	r24, 0xF7	; 247
     9f8:	31 f1       	breq	.+76     	; 0xa46 <_Z8GetInputv+0x96>
     9fa:	5c c0       	rjmp	.+184    	; 0xab4 <_Z8GetInputv+0x104>
     9fc:	8d 3f       	cpi	r24, 0xFD	; 253
     9fe:	69 f0       	breq	.+26     	; 0xa1a <_Z8GetInputv+0x6a>
     a00:	8e 3f       	cpi	r24, 0xFE	; 254
     a02:	09 f0       	breq	.+2      	; 0xa06 <_Z8GetInputv+0x56>
     a04:	57 c0       	rjmp	.+174    	; 0xab4 <_Z8GetInputv+0x104>
  {
    case 254: while (PIND != 0xff) {
     a06:	80 b3       	in	r24, 0x10	; 16
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	11 f0       	breq	.+4      	; 0xa10 <_Z8GetInputv+0x60>
        flashOn();
     a0c:	2a df       	rcall	.-428    	; 0x862 <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     a0e:	fb cf       	rjmp	.-10     	; 0xa06 <_Z8GetInputv+0x56>
        flashOn();
        //delay(1);
      } flashOff();   hadPressed = 1; return  1; break;
     a10:	34 df       	rcall	.-408    	; 0x87a <_Z8flashOffv>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a18:	08 95       	ret
    case 253: while (PIND != 0xff) {
     a1a:	80 b3       	in	r24, 0x10	; 16
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	11 f0       	breq	.+4      	; 0xa24 <_Z8GetInputv+0x74>
        flashOn();
     a20:	20 df       	rcall	.-448    	; 0x862 <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();   hadPressed = 1; return  1; break;
    case 253: while (PIND != 0xff) {
     a22:	fb cf       	rjmp	.-10     	; 0xa1a <_Z8GetInputv+0x6a>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 2; break;
     a24:	2a df       	rcall	.-428    	; 0x87a <_Z8flashOffv>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	08 95       	ret
    case 251: while (PIND != 0xff) {
     a30:	80 b3       	in	r24, 0x10	; 16
     a32:	8f 3f       	cpi	r24, 0xFF	; 255
     a34:	11 f0       	breq	.+4      	; 0xa3a <_Z8GetInputv+0x8a>
        flashOn();
     a36:	15 df       	rcall	.-470    	; 0x862 <_Z7flashOnv>
      } flashOff();   hadPressed = 1; return  1; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 2; break;
    case 251: while (PIND != 0xff) {
     a38:	fb cf       	rjmp	.-10     	; 0xa30 <_Z8GetInputv+0x80>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 3; break;
     a3a:	1f df       	rcall	.-450    	; 0x87a <_Z8flashOffv>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	08 95       	ret
    case 247: while (PIND != 0xff) {
     a46:	80 b3       	in	r24, 0x10	; 16
     a48:	8f 3f       	cpi	r24, 0xFF	; 255
     a4a:	11 f0       	breq	.+4      	; 0xa50 <_Z8GetInputv+0xa0>
        flashOn();
     a4c:	0a df       	rcall	.-492    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 2; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 3; break;
    case 247: while (PIND != 0xff) {
     a4e:	fb cf       	rjmp	.-10     	; 0xa46 <_Z8GetInputv+0x96>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 4; break;
     a50:	14 df       	rcall	.-472    	; 0x87a <_Z8flashOffv>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	08 95       	ret
    case 239: while (PIND != 0xff) {
     a5c:	80 b3       	in	r24, 0x10	; 16
     a5e:	8f 3f       	cpi	r24, 0xFF	; 255
     a60:	11 f0       	breq	.+4      	; 0xa66 <_Z8GetInputv+0xb6>
        flashOn();
     a62:	ff de       	rcall	.-514    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 3; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 4; break;
    case 239: while (PIND != 0xff) {
     a64:	fb cf       	rjmp	.-10     	; 0xa5c <_Z8GetInputv+0xac>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 5; break;
     a66:	09 df       	rcall	.-494    	; 0x87a <_Z8flashOffv>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	08 95       	ret
    case 223: while (PIND != 0xff) {
     a72:	80 b3       	in	r24, 0x10	; 16
     a74:	8f 3f       	cpi	r24, 0xFF	; 255
     a76:	11 f0       	breq	.+4      	; 0xa7c <_Z8GetInputv+0xcc>
        flashOn();
     a78:	f4 de       	rcall	.-536    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 4; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 5; break;
    case 223: while (PIND != 0xff) {
     a7a:	fb cf       	rjmp	.-10     	; 0xa72 <_Z8GetInputv+0xc2>
        flashOn();
        //   delay(1);
      } flashOff();  hadPressed = 1; return 6; break;
     a7c:	fe de       	rcall	.-516    	; 0x87a <_Z8flashOffv>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	08 95       	ret
    case 191: while (PIND != 0xff) {
     a88:	80 b3       	in	r24, 0x10	; 16
     a8a:	8f 3f       	cpi	r24, 0xFF	; 255
     a8c:	11 f0       	breq	.+4      	; 0xa92 <_Z8GetInputv+0xe2>
        flashOn();
     a8e:	e9 de       	rcall	.-558    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 5; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        //   delay(1);
      } flashOff();  hadPressed = 1; return 6; break;
    case 191: while (PIND != 0xff) {
     a90:	fb cf       	rjmp	.-10     	; 0xa88 <_Z8GetInputv+0xd8>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 7; break;
     a92:	f3 de       	rcall	.-538    	; 0x87a <_Z8flashOffv>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     a9a:	87 e0       	ldi	r24, 0x07	; 7
     a9c:	08 95       	ret
    case 127: while (PIND != 0xff) {
     a9e:	80 b3       	in	r24, 0x10	; 16
     aa0:	8f 3f       	cpi	r24, 0xFF	; 255
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <_Z8GetInputv+0xf8>
        flashOn();
     aa4:	de de       	rcall	.-580    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 6; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 7; break;
    case 127: while (PIND != 0xff) {
     aa6:	fb cf       	rjmp	.-10     	; 0xa9e <_Z8GetInputv+0xee>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return  8; break;
     aa8:	e8 de       	rcall	.-560    	; 0x87a <_Z8flashOffv>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	08 95       	ret
  }
  switch (PINB)
     ab4:	86 b3       	in	r24, 0x16	; 22
     ab6:	8b 3d       	cpi	r24, 0xDB	; 219
     ab8:	f1 f0       	breq	.+60     	; 0xaf6 <_Z8GetInputv+0x146>
     aba:	18 f4       	brcc	.+6      	; 0xac2 <_Z8GetInputv+0x112>
     abc:	87 3d       	cpi	r24, 0xD7	; 215
     abe:	31 f1       	breq	.+76     	; 0xb0c <_Z8GetInputv+0x15c>
     ac0:	30 c0       	rjmp	.+96     	; 0xb22 <_Z8GetInputv+0x172>
     ac2:	8d 3d       	cpi	r24, 0xDD	; 221
     ac4:	69 f0       	breq	.+26     	; 0xae0 <_Z8GetInputv+0x130>
     ac6:	8e 3d       	cpi	r24, 0xDE	; 222
     ac8:	61 f5       	brne	.+88     	; 0xb22 <_Z8GetInputv+0x172>
  {
    case 222: while (PINB != 223) {
     aca:	86 b3       	in	r24, 0x16	; 22
     acc:	8f 3d       	cpi	r24, 0xDF	; 223
     ace:	11 f0       	breq	.+4      	; 0xad4 <_Z8GetInputv+0x124>
        flashOn();
     ad0:	c8 de       	rcall	.-624    	; 0x862 <_Z7flashOnv>
        // delay(1);
      } flashOff();  hadPressed = 1; return  8; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     ad2:	fb cf       	rjmp	.-10     	; 0xaca <_Z8GetInputv+0x11a>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 9; break;
     ad4:	d2 de       	rcall	.-604    	; 0x87a <_Z8flashOffv>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     adc:	89 e0       	ldi	r24, 0x09	; 9
     ade:	08 95       	ret
    case 221: while (PINB != 223) {
     ae0:	86 b3       	in	r24, 0x16	; 22
     ae2:	8f 3d       	cpi	r24, 0xDF	; 223
     ae4:	11 f0       	breq	.+4      	; 0xaea <_Z8GetInputv+0x13a>
        flashOn();
     ae6:	bd de       	rcall	.-646    	; 0x862 <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 9; break;
    case 221: while (PINB != 223) {
     ae8:	fb cf       	rjmp	.-10     	; 0xae0 <_Z8GetInputv+0x130>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 10; break;
     aea:	c7 de       	rcall	.-626    	; 0x87a <_Z8flashOffv>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     af2:	8a e0       	ldi	r24, 0x0A	; 10
     af4:	08 95       	ret
    case 219: while (PINB != 223) {
     af6:	86 b3       	in	r24, 0x16	; 22
     af8:	8f 3d       	cpi	r24, 0xDF	; 223
     afa:	11 f0       	breq	.+4      	; 0xb00 <_Z8GetInputv+0x150>
        flashOn();
     afc:	b2 de       	rcall	.-668    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 9; break;
    case 221: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 10; break;
    case 219: while (PINB != 223) {
     afe:	fb cf       	rjmp	.-10     	; 0xaf6 <_Z8GetInputv+0x146>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 11; break;
     b00:	bc de       	rcall	.-648    	; 0x87a <_Z8flashOffv>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     b08:	8b e0       	ldi	r24, 0x0B	; 11
     b0a:	08 95       	ret
    case 215: while (PINB != 223) {
     b0c:	86 b3       	in	r24, 0x16	; 22
     b0e:	8f 3d       	cpi	r24, 0xDF	; 223
     b10:	11 f0       	breq	.+4      	; 0xb16 <_Z8GetInputv+0x166>
        flashOn();
     b12:	a7 de       	rcall	.-690    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 10; break;
    case 219: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 11; break;
    case 215: while (PINB != 223) {
     b14:	fb cf       	rjmp	.-10     	; 0xb0c <_Z8GetInputv+0x15c>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 12; break;
     b16:	b1 de       	rcall	.-670    	; 0x87a <_Z8flashOffv>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     b1e:	8c e0       	ldi	r24, 0x0C	; 12
     b20:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	81 e1       	ldi	r24, 0x11	; 17
     b26:	6c d7       	rcall	.+3800   	; 0x1a00 <digitalWrite>
  digitalWrite(A2,  LOW);
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	69 d7       	rcall	.+3794   	; 0x1a00 <digitalWrite>
  digitalWrite(A1, HIGH);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	8f e0       	ldi	r24, 0x0F	; 15
     b32:	66 d7       	rcall	.+3788   	; 0x1a00 <digitalWrite>
  digitalWrite(A0, HIGH);
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	8e e0       	ldi	r24, 0x0E	; 14
     b38:	63 d7       	rcall	.+3782   	; 0x1a00 <digitalWrite>
  delay(2);
     b3a:	62 e0       	ldi	r22, 0x02	; 2
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	b8 d6       	rcall	.+3440   	; 0x18b4 <delay>
  switch (PIND)
     b44:	80 b3       	in	r24, 0x10	; 16
     b46:	8f 3e       	cpi	r24, 0xEF	; 239
     b48:	09 f4       	brne	.+2      	; 0xb4c <_Z8GetInputv+0x19c>
     b4a:	47 c0       	rjmp	.+142    	; 0xbda <_Z8GetInputv+0x22a>
     b4c:	50 f4       	brcc	.+20     	; 0xb62 <_Z8GetInputv+0x1b2>
     b4e:	8f 3b       	cpi	r24, 0xBF	; 191
     b50:	09 f4       	brne	.+2      	; 0xb54 <_Z8GetInputv+0x1a4>
     b52:	59 c0       	rjmp	.+178    	; 0xc06 <_Z8GetInputv+0x256>
     b54:	8f 3d       	cpi	r24, 0xDF	; 223
     b56:	09 f4       	brne	.+2      	; 0xb5a <_Z8GetInputv+0x1aa>
     b58:	4b c0       	rjmp	.+150    	; 0xbf0 <_Z8GetInputv+0x240>
     b5a:	8f 37       	cpi	r24, 0x7F	; 127
     b5c:	09 f0       	breq	.+2      	; 0xb60 <_Z8GetInputv+0x1b0>
     b5e:	69 c0       	rjmp	.+210    	; 0xc32 <_Z8GetInputv+0x282>
     b60:	5d c0       	rjmp	.+186    	; 0xc1c <_Z8GetInputv+0x26c>
     b62:	8b 3f       	cpi	r24, 0xFB	; 251
     b64:	f9 f0       	breq	.+62     	; 0xba4 <_Z8GetInputv+0x1f4>
     b66:	18 f4       	brcc	.+6      	; 0xb6e <_Z8GetInputv+0x1be>
     b68:	87 3f       	cpi	r24, 0xF7	; 247
     b6a:	39 f1       	breq	.+78     	; 0xbba <_Z8GetInputv+0x20a>
     b6c:	62 c0       	rjmp	.+196    	; 0xc32 <_Z8GetInputv+0x282>
     b6e:	8d 3f       	cpi	r24, 0xFD	; 253
     b70:	71 f0       	breq	.+28     	; 0xb8e <_Z8GetInputv+0x1de>
     b72:	8e 3f       	cpi	r24, 0xFE	; 254
     b74:	09 f0       	breq	.+2      	; 0xb78 <_Z8GetInputv+0x1c8>
     b76:	5d c0       	rjmp	.+186    	; 0xc32 <_Z8GetInputv+0x282>
  {
    case 254: while (PIND != 0xff) {
     b78:	80 b3       	in	r24, 0x10	; 16
     b7a:	8f 3f       	cpi	r24, 0xFF	; 255
     b7c:	11 f0       	breq	.+4      	; 0xb82 <_Z8GetInputv+0x1d2>
        flashOn();
     b7e:	71 de       	rcall	.-798    	; 0x862 <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     b80:	fb cf       	rjmp	.-10     	; 0xb78 <_Z8GetInputv+0x1c8>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  13; break;
     b82:	7b de       	rcall	.-778    	; 0x87a <_Z8flashOffv>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	08 95       	ret
    case 253: while (PIND != 0xff) {
     b8e:	80 b3       	in	r24, 0x10	; 16
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	11 f0       	breq	.+4      	; 0xb98 <_Z8GetInputv+0x1e8>
        flashOn();
     b94:	66 de       	rcall	.-820    	; 0x862 <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  13; break;
    case 253: while (PIND != 0xff) {
     b96:	fb cf       	rjmp	.-10     	; 0xb8e <_Z8GetInputv+0x1de>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 14; break;
     b98:	70 de       	rcall	.-800    	; 0x87a <_Z8flashOffv>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     ba0:	8e e0       	ldi	r24, 0x0E	; 14
     ba2:	08 95       	ret
    case 251: while (PIND != 0xff) {
     ba4:	80 b3       	in	r24, 0x10	; 16
     ba6:	8f 3f       	cpi	r24, 0xFF	; 255
     ba8:	11 f0       	breq	.+4      	; 0xbae <_Z8GetInputv+0x1fe>
        flashOn();
     baa:	5b de       	rcall	.-842    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  13; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 14; break;
    case 251: while (PIND != 0xff) {
     bac:	fb cf       	rjmp	.-10     	; 0xba4 <_Z8GetInputv+0x1f4>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 15; break;
     bae:	65 de       	rcall	.-822    	; 0x87a <_Z8flashOffv>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     bb6:	8f e0       	ldi	r24, 0x0F	; 15
     bb8:	08 95       	ret
    case 247: while (PIND != 0xff) {
     bba:	80 b3       	in	r24, 0x10	; 16
     bbc:	8f 3f       	cpi	r24, 0xFF	; 255
     bbe:	39 f0       	breq	.+14     	; 0xbce <_Z8GetInputv+0x21e>
        flashOn();
     bc0:	50 de       	rcall	.-864    	; 0x862 <_Z7flashOnv>
        delay(1);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	74 d6       	rcall	.+3304   	; 0x18b4 <delay>
      } flashOff();  hadPressed = 1; return 14; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 15; break;
    case 247: while (PIND != 0xff) {
     bcc:	f6 cf       	rjmp	.-20     	; 0xbba <_Z8GetInputv+0x20a>
        flashOn();
        delay(1);
      } flashOff();  hadPressed = 1;  return 16; break;
     bce:	55 de       	rcall	.-854    	; 0x87a <_Z8flashOffv>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     bd6:	80 e1       	ldi	r24, 0x10	; 16
     bd8:	08 95       	ret
    case 239: while (PIND != 0xff) {
     bda:	80 b3       	in	r24, 0x10	; 16
     bdc:	8f 3f       	cpi	r24, 0xFF	; 255
     bde:	11 f0       	breq	.+4      	; 0xbe4 <_Z8GetInputv+0x234>
        flashOn();
     be0:	40 de       	rcall	.-896    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 15; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        delay(1);
      } flashOff();  hadPressed = 1;  return 16; break;
    case 239: while (PIND != 0xff) {
     be2:	fb cf       	rjmp	.-10     	; 0xbda <_Z8GetInputv+0x22a>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 17; break;
     be4:	4a de       	rcall	.-876    	; 0x87a <_Z8flashOffv>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     bec:	81 e1       	ldi	r24, 0x11	; 17
     bee:	08 95       	ret
    case 223: while (PIND != 0xff) {
     bf0:	80 b3       	in	r24, 0x10	; 16
     bf2:	8f 3f       	cpi	r24, 0xFF	; 255
     bf4:	11 f0       	breq	.+4      	; 0xbfa <_Z8GetInputv+0x24a>
        flashOn();
     bf6:	35 de       	rcall	.-918    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 16; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 17; break;
    case 223: while (PIND != 0xff) {
     bf8:	fb cf       	rjmp	.-10     	; 0xbf0 <_Z8GetInputv+0x240>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 18; break;
     bfa:	3f de       	rcall	.-898    	; 0x87a <_Z8flashOffv>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c02:	82 e1       	ldi	r24, 0x12	; 18
     c04:	08 95       	ret
    case 191: while (PIND != 0xff) {
     c06:	80 b3       	in	r24, 0x10	; 16
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	11 f0       	breq	.+4      	; 0xc10 <_Z8GetInputv+0x260>
        flashOn();
     c0c:	2a de       	rcall	.-940    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 17; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 18; break;
    case 191: while (PIND != 0xff) {
     c0e:	fb cf       	rjmp	.-10     	; 0xc06 <_Z8GetInputv+0x256>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 19; break;
     c10:	34 de       	rcall	.-920    	; 0x87a <_Z8flashOffv>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c18:	83 e1       	ldi	r24, 0x13	; 19
     c1a:	08 95       	ret
    case 127: while (PIND != 0xff) {
     c1c:	80 b3       	in	r24, 0x10	; 16
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	11 f0       	breq	.+4      	; 0xc26 <_Z8GetInputv+0x276>
        flashOn();
     c22:	1f de       	rcall	.-962    	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 18; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 19; break;
    case 127: while (PIND != 0xff) {
     c24:	fb cf       	rjmp	.-10     	; 0xc1c <_Z8GetInputv+0x26c>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  20; break;
     c26:	29 de       	rcall	.-942    	; 0x87a <_Z8flashOffv>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c2e:	84 e1       	ldi	r24, 0x14	; 20
     c30:	08 95       	ret
  }
  switch (PINB)
     c32:	86 b3       	in	r24, 0x16	; 22
     c34:	8b 3d       	cpi	r24, 0xDB	; 219
     c36:	f1 f0       	breq	.+60     	; 0xc74 <_Z8GetInputv+0x2c4>
     c38:	18 f4       	brcc	.+6      	; 0xc40 <_Z8GetInputv+0x290>
     c3a:	87 3d       	cpi	r24, 0xD7	; 215
     c3c:	31 f1       	breq	.+76     	; 0xc8a <_Z8GetInputv+0x2da>
     c3e:	30 c0       	rjmp	.+96     	; 0xca0 <_Z8GetInputv+0x2f0>
     c40:	8d 3d       	cpi	r24, 0xDD	; 221
     c42:	69 f0       	breq	.+26     	; 0xc5e <_Z8GetInputv+0x2ae>
     c44:	8e 3d       	cpi	r24, 0xDE	; 222
     c46:	61 f5       	brne	.+88     	; 0xca0 <_Z8GetInputv+0x2f0>
  {
    case 222: while (PINB != 223) {
     c48:	86 b3       	in	r24, 0x16	; 22
     c4a:	8f 3d       	cpi	r24, 0xDF	; 223
     c4c:	11 f0       	breq	.+4      	; 0xc52 <_Z8GetInputv+0x2a2>
        flashOn();
     c4e:	09 de       	rcall	.-1006   	; 0x862 <_Z7flashOnv>
        //  delay(1);
      } flashOff();  hadPressed = 1; return  20; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     c50:	fb cf       	rjmp	.-10     	; 0xc48 <_Z8GetInputv+0x298>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 21; break;
     c52:	13 de       	rcall	.-986    	; 0x87a <_Z8flashOffv>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	08 95       	ret
    case 221: while (PINB != 223) {
     c5e:	86 b3       	in	r24, 0x16	; 22
     c60:	8f 3d       	cpi	r24, 0xDF	; 223
     c62:	11 f0       	breq	.+4      	; 0xc68 <_Z8GetInputv+0x2b8>
        flashOn();
     c64:	fe dd       	rcall	.-1028   	; 0x862 <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 21; break;
    case 221: while (PINB != 223) {
     c66:	fb cf       	rjmp	.-10     	; 0xc5e <_Z8GetInputv+0x2ae>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 22; break;
     c68:	08 de       	rcall	.-1008   	; 0x87a <_Z8flashOffv>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c70:	86 e1       	ldi	r24, 0x16	; 22
     c72:	08 95       	ret
    case 219: while (PINB != 223) {
     c74:	86 b3       	in	r24, 0x16	; 22
     c76:	8f 3d       	cpi	r24, 0xDF	; 223
     c78:	11 f0       	breq	.+4      	; 0xc7e <_Z8GetInputv+0x2ce>
        flashOn();
     c7a:	f3 dd       	rcall	.-1050   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 21; break;
    case 221: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 22; break;
    case 219: while (PINB != 223) {
     c7c:	fb cf       	rjmp	.-10     	; 0xc74 <_Z8GetInputv+0x2c4>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 23; break;
     c7e:	fd dd       	rcall	.-1030   	; 0x87a <_Z8flashOffv>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c86:	87 e1       	ldi	r24, 0x17	; 23
     c88:	08 95       	ret
    case 215: while (PINB != 223) {
     c8a:	86 b3       	in	r24, 0x16	; 22
     c8c:	8f 3d       	cpi	r24, 0xDF	; 223
     c8e:	11 f0       	breq	.+4      	; 0xc94 <_Z8GetInputv+0x2e4>
        flashOn();
     c90:	e8 dd       	rcall	.-1072   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 22; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 23; break;
    case 215: while (PINB != 223) {
     c92:	fb cf       	rjmp	.-10     	; 0xc8a <_Z8GetInputv+0x2da>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 24; break;
     c94:	f2 dd       	rcall	.-1052   	; 0x87a <_Z8flashOffv>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     c9c:	88 e1       	ldi	r24, 0x18	; 24
     c9e:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	81 e1       	ldi	r24, 0x11	; 17
     ca4:	ad d6       	rcall	.+3418   	; 0x1a00 <digitalWrite>
  digitalWrite(A2, HIGH);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e1       	ldi	r24, 0x10	; 16
     caa:	aa d6       	rcall	.+3412   	; 0x1a00 <digitalWrite>
  digitalWrite(A1, LOW);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	8f e0       	ldi	r24, 0x0F	; 15
     cb0:	a7 d6       	rcall	.+3406   	; 0x1a00 <digitalWrite>
  digitalWrite(A0, HIGH);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	a4 d6       	rcall	.+3400   	; 0x1a00 <digitalWrite>
  delay(2);
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	f9 d5       	rcall	.+3058   	; 0x18b4 <delay>
  switch (PIND)
     cc2:	80 b3       	in	r24, 0x10	; 16
     cc4:	8f 3e       	cpi	r24, 0xEF	; 239
     cc6:	09 f4       	brne	.+2      	; 0xcca <_Z8GetInputv+0x31a>
     cc8:	42 c0       	rjmp	.+132    	; 0xd4e <_Z8GetInputv+0x39e>
     cca:	50 f4       	brcc	.+20     	; 0xce0 <_Z8GetInputv+0x330>
     ccc:	8f 3b       	cpi	r24, 0xBF	; 191
     cce:	09 f4       	brne	.+2      	; 0xcd2 <_Z8GetInputv+0x322>
     cd0:	54 c0       	rjmp	.+168    	; 0xd7a <_Z8GetInputv+0x3ca>
     cd2:	8f 3d       	cpi	r24, 0xDF	; 223
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <_Z8GetInputv+0x328>
     cd6:	46 c0       	rjmp	.+140    	; 0xd64 <_Z8GetInputv+0x3b4>
     cd8:	8f 37       	cpi	r24, 0x7F	; 127
     cda:	09 f0       	breq	.+2      	; 0xcde <_Z8GetInputv+0x32e>
     cdc:	64 c0       	rjmp	.+200    	; 0xda6 <_Z8GetInputv+0x3f6>
     cde:	58 c0       	rjmp	.+176    	; 0xd90 <_Z8GetInputv+0x3e0>
     ce0:	8b 3f       	cpi	r24, 0xFB	; 251
     ce2:	f9 f0       	breq	.+62     	; 0xd22 <_Z8GetInputv+0x372>
     ce4:	18 f4       	brcc	.+6      	; 0xcec <_Z8GetInputv+0x33c>
     ce6:	87 3f       	cpi	r24, 0xF7	; 247
     ce8:	39 f1       	breq	.+78     	; 0xd38 <_Z8GetInputv+0x388>
     cea:	5d c0       	rjmp	.+186    	; 0xda6 <_Z8GetInputv+0x3f6>
     cec:	8d 3f       	cpi	r24, 0xFD	; 253
     cee:	71 f0       	breq	.+28     	; 0xd0c <_Z8GetInputv+0x35c>
     cf0:	8e 3f       	cpi	r24, 0xFE	; 254
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <_Z8GetInputv+0x346>
     cf4:	58 c0       	rjmp	.+176    	; 0xda6 <_Z8GetInputv+0x3f6>
  {
    case 254: while (PIND != 0xff) {
     cf6:	80 b3       	in	r24, 0x10	; 16
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	11 f0       	breq	.+4      	; 0xd00 <_Z8GetInputv+0x350>
        flashOn();
     cfc:	b2 dd       	rcall	.-1180   	; 0x862 <_Z7flashOnv>
  digitalWrite(A1, LOW);
  digitalWrite(A0, HIGH);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     cfe:	fb cf       	rjmp	.-10     	; 0xcf6 <_Z8GetInputv+0x346>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  25; break;
     d00:	bc dd       	rcall	.-1160   	; 0x87a <_Z8flashOffv>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d08:	89 e1       	ldi	r24, 0x19	; 25
     d0a:	08 95       	ret
    case 253: while (PIND != 0xff) {
     d0c:	80 b3       	in	r24, 0x10	; 16
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	11 f0       	breq	.+4      	; 0xd16 <_Z8GetInputv+0x366>
        flashOn();
     d12:	a7 dd       	rcall	.-1202   	; 0x862 <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  25; break;
    case 253: while (PIND != 0xff) {
     d14:	fb cf       	rjmp	.-10     	; 0xd0c <_Z8GetInputv+0x35c>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 26; break;
     d16:	b1 dd       	rcall	.-1182   	; 0x87a <_Z8flashOffv>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d1e:	8a e1       	ldi	r24, 0x1A	; 26
     d20:	08 95       	ret
    case 251: while (PIND != 0xff) {
     d22:	80 b3       	in	r24, 0x10	; 16
     d24:	8f 3f       	cpi	r24, 0xFF	; 255
     d26:	11 f0       	breq	.+4      	; 0xd2c <_Z8GetInputv+0x37c>
        flashOn();
     d28:	9c dd       	rcall	.-1224   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  25; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 26; break;
    case 251: while (PIND != 0xff) {
     d2a:	fb cf       	rjmp	.-10     	; 0xd22 <_Z8GetInputv+0x372>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 27; break;
     d2c:	a6 dd       	rcall	.-1204   	; 0x87a <_Z8flashOffv>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d34:	8b e1       	ldi	r24, 0x1B	; 27
     d36:	08 95       	ret
    case 247: while (PIND != 0xff) {
     d38:	80 b3       	in	r24, 0x10	; 16
     d3a:	8f 3f       	cpi	r24, 0xFF	; 255
     d3c:	11 f0       	breq	.+4      	; 0xd42 <_Z8GetInputv+0x392>
        flashOn();
     d3e:	91 dd       	rcall	.-1246   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 26; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 27; break;
    case 247: while (PIND != 0xff) {
     d40:	fb cf       	rjmp	.-10     	; 0xd38 <_Z8GetInputv+0x388>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 28; break;
     d42:	9b dd       	rcall	.-1226   	; 0x87a <_Z8flashOffv>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d4a:	8c e1       	ldi	r24, 0x1C	; 28
     d4c:	08 95       	ret
    case 239: while (PIND != 0xff) {
     d4e:	80 b3       	in	r24, 0x10	; 16
     d50:	8f 3f       	cpi	r24, 0xFF	; 255
     d52:	11 f0       	breq	.+4      	; 0xd58 <_Z8GetInputv+0x3a8>
        flashOn();
     d54:	86 dd       	rcall	.-1268   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 27; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 28; break;
    case 239: while (PIND != 0xff) {
     d56:	fb cf       	rjmp	.-10     	; 0xd4e <_Z8GetInputv+0x39e>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 29; break;
     d58:	90 dd       	rcall	.-1248   	; 0x87a <_Z8flashOffv>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d60:	8d e1       	ldi	r24, 0x1D	; 29
     d62:	08 95       	ret
    case 223: while (PIND != 0xff) {
     d64:	80 b3       	in	r24, 0x10	; 16
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	11 f0       	breq	.+4      	; 0xd6e <_Z8GetInputv+0x3be>
        flashOn();
     d6a:	7b dd       	rcall	.-1290   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 28; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 29; break;
    case 223: while (PIND != 0xff) {
     d6c:	fb cf       	rjmp	.-10     	; 0xd64 <_Z8GetInputv+0x3b4>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 30; break;
     d6e:	85 dd       	rcall	.-1270   	; 0x87a <_Z8flashOffv>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d76:	8e e1       	ldi	r24, 0x1E	; 30
     d78:	08 95       	ret
    case 191: while (PIND != 0xff) {
     d7a:	80 b3       	in	r24, 0x10	; 16
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	11 f0       	breq	.+4      	; 0xd84 <_Z8GetInputv+0x3d4>
        flashOn();
     d80:	70 dd       	rcall	.-1312   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 29; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 30; break;
    case 191: while (PIND != 0xff) {
     d82:	fb cf       	rjmp	.-10     	; 0xd7a <_Z8GetInputv+0x3ca>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 31; break;
     d84:	7a dd       	rcall	.-1292   	; 0x87a <_Z8flashOffv>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     d8c:	8f e1       	ldi	r24, 0x1F	; 31
     d8e:	08 95       	ret
    case 127: while (PIND != 0xff) {
     d90:	80 b3       	in	r24, 0x10	; 16
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	11 f0       	breq	.+4      	; 0xd9a <_Z8GetInputv+0x3ea>
        flashOn();
     d96:	65 dd       	rcall	.-1334   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 30; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 31; break;
    case 127: while (PIND != 0xff) {
     d98:	fb cf       	rjmp	.-10     	; 0xd90 <_Z8GetInputv+0x3e0>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return  32; break;
     d9a:	6f dd       	rcall	.-1314   	; 0x87a <_Z8flashOffv>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	08 95       	ret
  }
  switch (PINB)
     da6:	86 b3       	in	r24, 0x16	; 22
     da8:	8b 3d       	cpi	r24, 0xDB	; 219
     daa:	f1 f0       	breq	.+60     	; 0xde8 <_Z8GetInputv+0x438>
     dac:	18 f4       	brcc	.+6      	; 0xdb4 <_Z8GetInputv+0x404>
     dae:	87 3d       	cpi	r24, 0xD7	; 215
     db0:	31 f1       	breq	.+76     	; 0xdfe <_Z8GetInputv+0x44e>
     db2:	30 c0       	rjmp	.+96     	; 0xe14 <_Z8GetInputv+0x464>
     db4:	8d 3d       	cpi	r24, 0xDD	; 221
     db6:	69 f0       	breq	.+26     	; 0xdd2 <_Z8GetInputv+0x422>
     db8:	8e 3d       	cpi	r24, 0xDE	; 222
     dba:	61 f5       	brne	.+88     	; 0xe14 <_Z8GetInputv+0x464>
  {
    case 222: while (PINB != 223) {
     dbc:	86 b3       	in	r24, 0x16	; 22
     dbe:	8f 3d       	cpi	r24, 0xDF	; 223
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <_Z8GetInputv+0x416>
        flashOn();
     dc2:	4f dd       	rcall	.-1378   	; 0x862 <_Z7flashOnv>
        //  delay(1);
      } flashOff();  hadPressed = 1; return  32; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     dc4:	fb cf       	rjmp	.-10     	; 0xdbc <_Z8GetInputv+0x40c>
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 33; break;
     dc6:	59 dd       	rcall	.-1358   	; 0x87a <_Z8flashOffv>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     dce:	81 e2       	ldi	r24, 0x21	; 33
     dd0:	08 95       	ret
    case 221: while (PINB != 223) {
     dd2:	86 b3       	in	r24, 0x16	; 22
     dd4:	8f 3d       	cpi	r24, 0xDF	; 223
     dd6:	11 f0       	breq	.+4      	; 0xddc <_Z8GetInputv+0x42c>
        flashOn();
     dd8:	44 dd       	rcall	.-1400   	; 0x862 <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //  delay(1);
      } flashOff();  hadPressed = 1; return 33; break;
    case 221: while (PINB != 223) {
     dda:	fb cf       	rjmp	.-10     	; 0xdd2 <_Z8GetInputv+0x422>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 34; break;
     ddc:	4e dd       	rcall	.-1380   	; 0x87a <_Z8flashOffv>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     de4:	82 e2       	ldi	r24, 0x22	; 34
     de6:	08 95       	ret
    case 219: while (PINB != 223) {
     de8:	86 b3       	in	r24, 0x16	; 22
     dea:	8f 3d       	cpi	r24, 0xDF	; 223
     dec:	11 f0       	breq	.+4      	; 0xdf2 <_Z8GetInputv+0x442>
        flashOn();
     dee:	39 dd       	rcall	.-1422   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 33; break;
    case 221: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 34; break;
    case 219: while (PINB != 223) {
     df0:	fb cf       	rjmp	.-10     	; 0xde8 <_Z8GetInputv+0x438>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 35; break;
     df2:	43 dd       	rcall	.-1402   	; 0x87a <_Z8flashOffv>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     dfa:	83 e2       	ldi	r24, 0x23	; 35
     dfc:	08 95       	ret
    case 215: while (PINB != 223) {
     dfe:	86 b3       	in	r24, 0x16	; 22
     e00:	8f 3d       	cpi	r24, 0xDF	; 223
     e02:	11 f0       	breq	.+4      	; 0xe08 <_Z8GetInputv+0x458>
        flashOn();
     e04:	2e dd       	rcall	.-1444   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 34; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 35; break;
    case 215: while (PINB != 223) {
     e06:	fb cf       	rjmp	.-10     	; 0xdfe <_Z8GetInputv+0x44e>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 36; break;
     e08:	38 dd       	rcall	.-1424   	; 0x87a <_Z8flashOffv>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     e10:	84 e2       	ldi	r24, 0x24	; 36
     e12:	08 95       	ret
  }

  digitalWrite(A3, HIGH);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	81 e1       	ldi	r24, 0x11	; 17
     e18:	f3 d5       	rcall	.+3046   	; 0x1a00 <digitalWrite>
  digitalWrite(A2, HIGH);
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	80 e1       	ldi	r24, 0x10	; 16
     e1e:	f0 d5       	rcall	.+3040   	; 0x1a00 <digitalWrite>
  digitalWrite(A1, HIGH);
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	8f e0       	ldi	r24, 0x0F	; 15
     e24:	ed d5       	rcall	.+3034   	; 0x1a00 <digitalWrite>
  digitalWrite(A0, LOW);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	8e e0       	ldi	r24, 0x0E	; 14
     e2a:	ea d5       	rcall	.+3028   	; 0x1a00 <digitalWrite>
  delay(2);
     e2c:	62 e0       	ldi	r22, 0x02	; 2
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	3f d5       	rcall	.+2686   	; 0x18b4 <delay>
  switch (PIND)
     e36:	80 b3       	in	r24, 0x10	; 16
     e38:	8f 3e       	cpi	r24, 0xEF	; 239
     e3a:	09 f4       	brne	.+2      	; 0xe3e <_Z8GetInputv+0x48e>
     e3c:	42 c0       	rjmp	.+132    	; 0xec2 <_Z8GetInputv+0x512>
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <_Z8GetInputv+0x4a4>
     e40:	8f 3b       	cpi	r24, 0xBF	; 191
     e42:	09 f4       	brne	.+2      	; 0xe46 <_Z8GetInputv+0x496>
     e44:	54 c0       	rjmp	.+168    	; 0xeee <_Z8GetInputv+0x53e>
     e46:	8f 3d       	cpi	r24, 0xDF	; 223
     e48:	09 f4       	brne	.+2      	; 0xe4c <_Z8GetInputv+0x49c>
     e4a:	46 c0       	rjmp	.+140    	; 0xed8 <_Z8GetInputv+0x528>
     e4c:	8f 37       	cpi	r24, 0x7F	; 127
     e4e:	09 f0       	breq	.+2      	; 0xe52 <_Z8GetInputv+0x4a2>
     e50:	64 c0       	rjmp	.+200    	; 0xf1a <_Z8GetInputv+0x56a>
     e52:	58 c0       	rjmp	.+176    	; 0xf04 <_Z8GetInputv+0x554>
     e54:	8b 3f       	cpi	r24, 0xFB	; 251
     e56:	f9 f0       	breq	.+62     	; 0xe96 <_Z8GetInputv+0x4e6>
     e58:	18 f4       	brcc	.+6      	; 0xe60 <_Z8GetInputv+0x4b0>
     e5a:	87 3f       	cpi	r24, 0xF7	; 247
     e5c:	39 f1       	breq	.+78     	; 0xeac <_Z8GetInputv+0x4fc>
     e5e:	5d c0       	rjmp	.+186    	; 0xf1a <_Z8GetInputv+0x56a>
     e60:	8d 3f       	cpi	r24, 0xFD	; 253
     e62:	71 f0       	breq	.+28     	; 0xe80 <_Z8GetInputv+0x4d0>
     e64:	8e 3f       	cpi	r24, 0xFE	; 254
     e66:	09 f0       	breq	.+2      	; 0xe6a <_Z8GetInputv+0x4ba>
     e68:	58 c0       	rjmp	.+176    	; 0xf1a <_Z8GetInputv+0x56a>
  {
    case 254: while (PIND != 0xff) {
     e6a:	80 b3       	in	r24, 0x10	; 16
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	11 f0       	breq	.+4      	; 0xe74 <_Z8GetInputv+0x4c4>
        flashOn();
     e70:	f8 dc       	rcall	.-1552   	; 0x862 <_Z7flashOnv>
  digitalWrite(A1, HIGH);
  digitalWrite(A0, LOW);
  delay(2);
  switch (PIND)
  {
    case 254: while (PIND != 0xff) {
     e72:	fb cf       	rjmp	.-10     	; 0xe6a <_Z8GetInputv+0x4ba>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  37; break;
     e74:	02 dd       	rcall	.-1532   	; 0x87a <_Z8flashOffv>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     e7c:	85 e2       	ldi	r24, 0x25	; 37
     e7e:	08 95       	ret
    case 253: while (PIND != 0xff) {
     e80:	80 b3       	in	r24, 0x10	; 16
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	11 f0       	breq	.+4      	; 0xe8a <_Z8GetInputv+0x4da>
        flashOn();
     e86:	ed dc       	rcall	.-1574   	; 0x862 <_Z7flashOnv>
  {
    case 254: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  37; break;
    case 253: while (PIND != 0xff) {
     e88:	fb cf       	rjmp	.-10     	; 0xe80 <_Z8GetInputv+0x4d0>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 38; break;
     e8a:	f7 dc       	rcall	.-1554   	; 0x87a <_Z8flashOffv>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     e92:	86 e2       	ldi	r24, 0x26	; 38
     e94:	08 95       	ret
    case 251: while (PIND != 0xff) {
     e96:	80 b3       	in	r24, 0x10	; 16
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	11 f0       	breq	.+4      	; 0xea0 <_Z8GetInputv+0x4f0>
        flashOn();
     e9c:	e2 dc       	rcall	.-1596   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return  37; break;
    case 253: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 38; break;
    case 251: while (PIND != 0xff) {
     e9e:	fb cf       	rjmp	.-10     	; 0xe96 <_Z8GetInputv+0x4e6>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 39; break;
     ea0:	ec dc       	rcall	.-1576   	; 0x87a <_Z8flashOffv>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     ea8:	87 e2       	ldi	r24, 0x27	; 39
     eaa:	08 95       	ret
    case 247: while (PIND != 0xff) {
     eac:	80 b3       	in	r24, 0x10	; 16
     eae:	8f 3f       	cpi	r24, 0xFF	; 255
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <_Z8GetInputv+0x506>
        flashOn();
     eb2:	d7 dc       	rcall	.-1618   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 38; break;
    case 251: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1;  return 39; break;
    case 247: while (PIND != 0xff) {
     eb4:	fb cf       	rjmp	.-10     	; 0xeac <_Z8GetInputv+0x4fc>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 40; break;
     eb6:	e1 dc       	rcall	.-1598   	; 0x87a <_Z8flashOffv>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     ebe:	88 e2       	ldi	r24, 0x28	; 40
     ec0:	08 95       	ret
    case 239: while (PIND != 0xff) {
     ec2:	80 b3       	in	r24, 0x10	; 16
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	11 f0       	breq	.+4      	; 0xecc <_Z8GetInputv+0x51c>
        flashOn();
     ec8:	cc dc       	rcall	.-1640   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 39; break;
    case 247: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1;  return 40; break;
    case 239: while (PIND != 0xff) {
     eca:	fb cf       	rjmp	.-10     	; 0xec2 <_Z8GetInputv+0x512>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 41; break;
     ecc:	d6 dc       	rcall	.-1620   	; 0x87a <_Z8flashOffv>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     ed4:	89 e2       	ldi	r24, 0x29	; 41
     ed6:	08 95       	ret
    case 223: while (PIND != 0xff) {
     ed8:	80 b3       	in	r24, 0x10	; 16
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	11 f0       	breq	.+4      	; 0xee2 <_Z8GetInputv+0x532>
        flashOn();
     ede:	c1 dc       	rcall	.-1662   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1;  return 40; break;
    case 239: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 41; break;
    case 223: while (PIND != 0xff) {
     ee0:	fb cf       	rjmp	.-10     	; 0xed8 <_Z8GetInputv+0x528>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 42; break;
     ee2:	cb dc       	rcall	.-1642   	; 0x87a <_Z8flashOffv>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     eea:	8a e2       	ldi	r24, 0x2A	; 42
     eec:	08 95       	ret
    case 191: while (PIND != 0xff) {
     eee:	80 b3       	in	r24, 0x10	; 16
     ef0:	8f 3f       	cpi	r24, 0xFF	; 255
     ef2:	11 f0       	breq	.+4      	; 0xef8 <_Z8GetInputv+0x548>
        flashOn();
     ef4:	b6 dc       	rcall	.-1684   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 41; break;
    case 223: while (PIND != 0xff) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 42; break;
    case 191: while (PIND != 0xff) {
     ef6:	fb cf       	rjmp	.-10     	; 0xeee <_Z8GetInputv+0x53e>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 43; break;
     ef8:	c0 dc       	rcall	.-1664   	; 0x87a <_Z8flashOffv>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f00:	8b e2       	ldi	r24, 0x2B	; 43
     f02:	08 95       	ret
    case 127: while (PIND != 0xff) {
     f04:	80 b3       	in	r24, 0x10	; 16
     f06:	8f 3f       	cpi	r24, 0xFF	; 255
     f08:	11 f0       	breq	.+4      	; 0xf0e <_Z8GetInputv+0x55e>
        flashOn();
     f0a:	ab dc       	rcall	.-1706   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 42; break;
    case 191: while (PIND != 0xff) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 43; break;
    case 127: while (PIND != 0xff) {
     f0c:	fb cf       	rjmp	.-10     	; 0xf04 <_Z8GetInputv+0x554>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return  44; break;
     f0e:	b5 dc       	rcall	.-1686   	; 0x87a <_Z8flashOffv>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f16:	8c e2       	ldi	r24, 0x2C	; 44
     f18:	08 95       	ret
  }
  switch (PINB)
     f1a:	86 b3       	in	r24, 0x16	; 22
     f1c:	8b 3d       	cpi	r24, 0xDB	; 219
     f1e:	f1 f0       	breq	.+60     	; 0xf5c <_Z8GetInputv+0x5ac>
     f20:	18 f4       	brcc	.+6      	; 0xf28 <_Z8GetInputv+0x578>
     f22:	87 3d       	cpi	r24, 0xD7	; 215
     f24:	31 f1       	breq	.+76     	; 0xf72 <_Z8GetInputv+0x5c2>
     f26:	30 c0       	rjmp	.+96     	; 0xf88 <_Z8GetInputv+0x5d8>
     f28:	8d 3d       	cpi	r24, 0xDD	; 221
     f2a:	69 f0       	breq	.+26     	; 0xf46 <_Z8GetInputv+0x596>
     f2c:	8e 3d       	cpi	r24, 0xDE	; 222
     f2e:	61 f5       	brne	.+88     	; 0xf88 <_Z8GetInputv+0x5d8>
  {
    case 222: while (PINB != 223) {
     f30:	86 b3       	in	r24, 0x16	; 22
     f32:	8f 3d       	cpi	r24, 0xDF	; 223
     f34:	11 f0       	breq	.+4      	; 0xf3a <_Z8GetInputv+0x58a>
        flashOn();
     f36:	95 dc       	rcall	.-1750   	; 0x862 <_Z7flashOnv>
        //delay(1);
      } flashOff();  hadPressed = 1; return  44; break;
  }
  switch (PINB)
  {
    case 222: while (PINB != 223) {
     f38:	fb cf       	rjmp	.-10     	; 0xf30 <_Z8GetInputv+0x580>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 45; break;
     f3a:	9f dc       	rcall	.-1730   	; 0x87a <_Z8flashOffv>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f42:	8d e2       	ldi	r24, 0x2D	; 45
     f44:	08 95       	ret
    case 221: while (PINB != 223) {
     f46:	86 b3       	in	r24, 0x16	; 22
     f48:	8f 3d       	cpi	r24, 0xDF	; 223
     f4a:	11 f0       	breq	.+4      	; 0xf50 <_Z8GetInputv+0x5a0>
        flashOn();
     f4c:	8a dc       	rcall	.-1772   	; 0x862 <_Z7flashOnv>
  {
    case 222: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 45; break;
    case 221: while (PINB != 223) {
     f4e:	fb cf       	rjmp	.-10     	; 0xf46 <_Z8GetInputv+0x596>
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 46; break;
     f50:	94 dc       	rcall	.-1752   	; 0x87a <_Z8flashOffv>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f58:	8e e2       	ldi	r24, 0x2E	; 46
     f5a:	08 95       	ret
    case 219: while (PINB != 223) {
     f5c:	86 b3       	in	r24, 0x16	; 22
     f5e:	8f 3d       	cpi	r24, 0xDF	; 223
     f60:	11 f0       	breq	.+4      	; 0xf66 <_Z8GetInputv+0x5b6>
        flashOn();
     f62:	7f dc       	rcall	.-1794   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 45; break;
    case 221: while (PINB != 223) {
        flashOn();
        // delay(1);
      } flashOff();  hadPressed = 1; return 46; break;
    case 219: while (PINB != 223) {
     f64:	fb cf       	rjmp	.-10     	; 0xf5c <_Z8GetInputv+0x5ac>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 47; break;
     f66:	89 dc       	rcall	.-1774   	; 0x87a <_Z8flashOffv>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f6e:	8f e2       	ldi	r24, 0x2F	; 47
     f70:	08 95       	ret
    case 215: while (PINB != 223) {
     f72:	86 b3       	in	r24, 0x16	; 22
     f74:	8f 3d       	cpi	r24, 0xDF	; 223
     f76:	11 f0       	breq	.+4      	; 0xf7c <_Z8GetInputv+0x5cc>
        flashOn();
     f78:	74 dc       	rcall	.-1816   	; 0x862 <_Z7flashOnv>
      } flashOff();  hadPressed = 1; return 46; break;
    case 219: while (PINB != 223) {
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 47; break;
    case 215: while (PINB != 223) {
     f7a:	fb cf       	rjmp	.-10     	; 0xf72 <_Z8GetInputv+0x5c2>
        flashOn();
        //delay(1);
      } flashOff();  hadPressed = 1; return 48; break;
     f7c:	7e dc       	rcall	.-1796   	; 0x87a <_Z8flashOffv>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <hadPressed>
     f84:	80 e3       	ldi	r24, 0x30	; 48
     f86:	08 95       	ret
  }
  hadPressed = 0;
     f88:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <hadPressed>
  return 255;
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
}
     f8e:	08 95       	ret

00000f90 <_GLOBAL__sub_I_pixels>:
/*End of auto generated code by Atmel studio */

#include "Adafruit_NeoPixel.h"
#define PIN           13
#define NUMPIXELS      1
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     f90:	22 e5       	ldi	r18, 0x52	; 82
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4d e0       	ldi	r20, 0x0D	; 13
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	1c db       	rcall	.-2504   	; 0x5da <_ZN17Adafruit_NeoPixelC1Ejjj>
#include "Wire.h"
#else
#include "SendonlySoftwareSerial.h"
#define KB_RX     A4  // CLK  
#define KB_TX     A5  // DATA
SendOnlySoftwareSerial softSerial(KB_TX); // TX Only
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	63 e1       	ldi	r22, 0x13	; 19
     fa6:	8c ee       	ldi	r24, 0xEC	; 236
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	2d cc       	rjmp	.-1958   	; 0x806 <_ZN22SendOnlySoftwareSerialC1Ehb>

00000fac <_GLOBAL__sub_D_pixels>:
     fac:	8c ee       	ldi	r24, 0xEC	; 236
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	02 dc       	rcall	.-2044   	; 0x7b6 <_ZN22SendOnlySoftwareSerialD1Ev>
/*End of auto generated code by Atmel studio */

#include "Adafruit_NeoPixel.h"
#define PIN           13
#define NUMPIXELS      1
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	8f c8       	rjmp	.-3810   	; 0xd6 <_ZN17Adafruit_NeoPixelD1Ev>

00000fb8 <_Z12requestEventv>:
{
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
}

void requestEvent()
{
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
  if (hadPressed == 1)
     fbc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <hadPressed>
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_Z12requestEventv+0xe>
     fc4:	45 c0       	rjmp	.+138    	; 0x1050 <_Z12requestEventv+0x98>
  {
	unsigned c = KeyMap[KEY - 1][Mode];
     fc6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <KEY>
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	27 e0       	ldi	r18, 0x07	; 7
     fd0:	28 9f       	mul	r18, r24
     fd2:	f0 01       	movw	r30, r0
     fd4:	29 9f       	mul	r18, r25
     fd6:	f0 0d       	add	r31, r0
     fd8:	11 24       	eor	r1, r1
     fda:	ea 59       	subi	r30, 0x9A	; 154
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     fe2:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
     fe6:	e8 0f       	add	r30, r24
     fe8:	f9 1f       	adc	r31, r25
     fea:	60 81       	ld	r22, Z
#ifndef USE_SOFTUART
    Wire.write(c);
#else
#ifdef USE_VTCURSOR
	if ((c >= 180) && (c <= 183)) {
     fec:	c6 2f       	mov	r28, r22
     fee:	d0 e0       	ldi	r29, 0x00	; 0
     ff0:	c4 5b       	subi	r28, 0xB4	; 180
     ff2:	d1 09       	sbc	r29, r1
     ff4:	c4 30       	cpi	r28, 0x04	; 4
     ff6:	d1 05       	cpc	r29, r1
     ff8:	58 f4       	brcc	.+22     	; 0x1010 <_Z12requestEventv+0x58>
		// VT100 Cursor Key
		softSerial.write((uint8_t)0x1B); // ESC
     ffa:	6b e1       	ldi	r22, 0x1B	; 27
     ffc:	8c ee       	ldi	r24, 0xEC	; 236
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	83 db       	rcall	.-2298   	; 0x708 <_ZN22SendOnlySoftwareSerial5writeEh>
		softSerial.write((uint8_t)'[');
    1002:	6b e5       	ldi	r22, 0x5B	; 91
    1004:	8c ee       	ldi	r24, 0xEC	; 236
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	7f db       	rcall	.-2306   	; 0x708 <_ZN22SendOnlySoftwareSerial5writeEh>
		softSerial.write((uint8_t)("DABC"[c-180])); // LUDR	
    100a:	c8 53       	subi	r28, 0x38	; 56
    100c:	de 4f       	sbci	r29, 0xFE	; 254
    100e:	68 81       	ld	r22, Y
	} else {
#endif
		softSerial.write(c);		
    1010:	8c ee       	ldi	r24, 0xEC	; 236
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	79 db       	rcall	.-2318   	; 0x708 <_ZN22SendOnlySoftwareSerial5writeEh>
	}
#endif
	
#endif
    //KEY=0;
    if ((Mode == 1) || (Mode == 3) || (Mode == 5)) {
    1016:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
    101a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__data_end+0x1>
    101e:	9c 01       	movw	r18, r24
    1020:	2d 7f       	andi	r18, 0xFD	; 253
    1022:	21 30       	cpi	r18, 0x01	; 1
    1024:	31 05       	cpc	r19, r1
    1026:	11 f0       	breq	.+4      	; 0x102c <_Z12requestEventv+0x74>
    1028:	05 97       	sbiw	r24, 0x05	; 5
    102a:	81 f4       	brne	.+32     	; 0x104c <_Z12requestEventv+0x94>
      Mode = 0;
    102c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <__data_end+0x1>
    1030:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
      _shift = 0;
    1034:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <_shift+0x1>
    1038:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_shift>
      _sym = 0;
    103c:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <_sym+0x1>
    1040:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <_sym>
      _fn = 0;
    1044:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_fn+0x1>
    1048:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_fn>
    }

    hadPressed = 0;
    104c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <hadPressed>
    return;
  }
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <loop>:



void loop()
{
  if (shiftPressed)
    1056:	b4 99       	sbic	0x16, 4	; 22
    1058:	5f c0       	rjmp	.+190    	; 0x1118 <loop+0xc2>
  {
    _sym = 0; _fn = 0; idle = 0;
    105a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <_sym+0x1>
    105e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <_sym>
    1062:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_fn+0x1>
    1066:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_fn>
    106a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <idle+0x1>
    106e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <idle>
    while (shiftPressed)delay(1);
    1072:	b4 99       	sbic	0x16, 4	; 22
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <loop+0x2c>
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	1a d4       	rcall	.+2100   	; 0x18b4 <delay>
    1080:	f8 cf       	rjmp	.-16     	; 0x1072 <loop+0x1c>
    if (_shift == 0)
    1082:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_shift>
    1086:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_shift+0x1>
    108a:	89 2b       	or	r24, r25
    108c:	e9 f4       	brne	.+58     	; 0x10c8 <loop+0x72>
    {
      delay(200);
    108e:	68 ec       	ldi	r22, 0xC8	; 200
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e d4       	rcall	.+2076   	; 0x18b4 <delay>
      if (shiftPressed)
    1098:	b4 99       	sbic	0x16, 4	; 22
    109a:	0b c0       	rjmp	.+22     	; 0x10b2 <loop+0x5c>
      {
        while (shiftPressed)delay(1);
    109c:	b4 99       	sbic	0x16, 4	; 22
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <loop+0x56>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	05 d4       	rcall	.+2058   	; 0x18b4 <delay>
    10aa:	f8 cf       	rjmp	.-16     	; 0x109c <loop+0x46>
        _shift = 2;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <loop+0x60>
        Mode = 2;
      }
      else
      {
        _shift = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <_shift+0x1>
    10ba:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_shift>
        Mode = 1;
    10be:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    10c2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
    10c6:	28 c0       	rjmp	.+80     	; 0x1118 <loop+0xc2>
      }
    }
    else
    {
      delay(200);
    10c8:	68 ec       	ldi	r22, 0xC8	; 200
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	f1 d3       	rcall	.+2018   	; 0x18b4 <delay>
      if (shiftPressed)
    10d2:	b4 99       	sbic	0x16, 4	; 22
    10d4:	0e c0       	rjmp	.+28     	; 0x10f2 <loop+0x9c>
      {
        while (shiftPressed)delay(1);
    10d6:	b4 99       	sbic	0x16, 4	; 22
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <loop+0x90>
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	e8 d3       	rcall	.+2000   	; 0x18b4 <delay>
    10e4:	f8 cf       	rjmp	.-16     	; 0x10d6 <loop+0x80>
        if (_shift == 2)
    10e6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_shift>
    10ea:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_shift+0x1>
    10ee:	02 97       	sbiw	r24, 0x02	; 2
    10f0:	49 f4       	brne	.+18     	; 0x1104 <loop+0xae>
        {
          Mode = 0;
    10f2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <__data_end+0x1>
    10f6:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
          _shift = 0;
    10fa:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <_shift+0x1>
    10fe:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_shift>
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <loop+0xc2>
        }
        else
        {
          Mode = 2;
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    110c:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
          _shift = 2;
    1110:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <_shift+0x1>
    1114:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_shift>
      }
    }
  }


  if (symPressed)
    1118:	b7 99       	sbic	0x16, 7	; 22
    111a:	69 c0       	rjmp	.+210    	; 0x11ee <loop+0x198>
  {
    _shift = 0; _fn = 0; idle = 0;
    111c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <_shift+0x1>
    1120:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_shift>
    1124:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_fn+0x1>
    1128:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_fn>
    112c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <idle+0x1>
    1130:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <idle>
    while (symPressed)delay(1);
    1134:	b7 99       	sbic	0x16, 7	; 22
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <loop+0xee>
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	b9 d3       	rcall	.+1906   	; 0x18b4 <delay>
    1142:	f8 cf       	rjmp	.-16     	; 0x1134 <loop+0xde>
    if (_sym == 0)
    1144:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <_sym>
    1148:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <_sym+0x1>
    114c:	89 2b       	or	r24, r25
    114e:	29 f5       	brne	.+74     	; 0x119a <loop+0x144>
    {
      delay(200);
    1150:	68 ec       	ldi	r22, 0xC8	; 200
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	ad d3       	rcall	.+1882   	; 0x18b4 <delay>
      if (symPressed)
    115a:	b7 99       	sbic	0x16, 7	; 22
    115c:	11 c0       	rjmp	.+34     	; 0x1180 <loop+0x12a>
      {
        while (symPressed)delay(1);
    115e:	b7 99       	sbic	0x16, 7	; 22
    1160:	06 c0       	rjmp	.+12     	; 0x116e <loop+0x118>
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a4 d3       	rcall	.+1864   	; 0x18b4 <delay>
    116c:	f8 cf       	rjmp	.-16     	; 0x115e <loop+0x108>
        _sym = 2;
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <_sym+0x1>
    1176:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <_sym>
        Mode = 4;
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	08 c0       	rjmp	.+16     	; 0x1190 <loop+0x13a>
      }
      else
      {
        _sym = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <_sym+0x1>
    1188:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <_sym>
        Mode = 3;
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    1194:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
    1198:	2a c0       	rjmp	.+84     	; 0x11ee <loop+0x198>
      }
    }
    else
    {
      delay(200);
    119a:	68 ec       	ldi	r22, 0xC8	; 200
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 d3       	rcall	.+1808   	; 0x18b4 <delay>
      if (symPressed)
    11a4:	b7 99       	sbic	0x16, 7	; 22
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <loop+0x16e>
      {
        while (symPressed)delay(1);
    11a8:	b7 99       	sbic	0x16, 7	; 22
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <loop+0x162>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	7f d3       	rcall	.+1790   	; 0x18b4 <delay>
    11b6:	f8 cf       	rjmp	.-16     	; 0x11a8 <loop+0x152>
        if (_sym == 2)
    11b8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <_sym>
    11bc:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <_sym+0x1>
    11c0:	02 97       	sbiw	r24, 0x02	; 2
    11c2:	49 f4       	brne	.+18     	; 0x11d6 <loop+0x180>
        {
          Mode = 0;
    11c4:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <__data_end+0x1>
    11c8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
          _sym = 0;
    11cc:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <_sym+0x1>
    11d0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <_sym>
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <loop+0x198>
        }
        else
        {
          Mode = 4;
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    11de:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
          _sym = 2;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <_sym+0x1>
    11ea:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <_sym>
        _sym = 0;
      }
    }
  }

  if (fnPressed)
    11ee:	b6 99       	sbic	0x16, 6	; 22
    11f0:	69 c0       	rjmp	.+210    	; 0x12c4 <loop+0x26e>
  {
    _sym = 0; _shift = 0; idle = 0;
    11f2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <_sym+0x1>
    11f6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <_sym>
    11fa:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <_shift+0x1>
    11fe:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_shift>
    1202:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <idle+0x1>
    1206:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <idle>
    while (fnPressed)delay(1);
    120a:	b6 99       	sbic	0x16, 6	; 22
    120c:	06 c0       	rjmp	.+12     	; 0x121a <loop+0x1c4>
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	4e d3       	rcall	.+1692   	; 0x18b4 <delay>
    1218:	f8 cf       	rjmp	.-16     	; 0x120a <loop+0x1b4>
    if (_fn == 0)
    121a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_fn>
    121e:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <_fn+0x1>
    1222:	89 2b       	or	r24, r25
    1224:	29 f5       	brne	.+74     	; 0x1270 <loop+0x21a>
    {
      delay(200);
    1226:	68 ec       	ldi	r22, 0xC8	; 200
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	42 d3       	rcall	.+1668   	; 0x18b4 <delay>
      if (fnPressed)
    1230:	b6 99       	sbic	0x16, 6	; 22
    1232:	11 c0       	rjmp	.+34     	; 0x1256 <loop+0x200>
      {
        while (fnPressed)delay(1);
    1234:	b6 99       	sbic	0x16, 6	; 22
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <loop+0x1ee>
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	39 d3       	rcall	.+1650   	; 0x18b4 <delay>
    1242:	f8 cf       	rjmp	.-16     	; 0x1234 <loop+0x1de>
        _fn = 2;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_fn+0x1>
    124c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_fn>
        Mode = 6;
    1250:	86 e0       	ldi	r24, 0x06	; 6
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <loop+0x210>
      }
      else
      {
        _fn = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_fn+0x1>
    125e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_fn>
        Mode = 5;
    1262:	85 e0       	ldi	r24, 0x05	; 5
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    126a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
    126e:	2a c0       	rjmp	.+84     	; 0x12c4 <loop+0x26e>
      }
    }
    else
    {
      delay(200);
    1270:	68 ec       	ldi	r22, 0xC8	; 200
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	1d d3       	rcall	.+1594   	; 0x18b4 <delay>
      if (fnPressed)
    127a:	b6 99       	sbic	0x16, 6	; 22
    127c:	0e c0       	rjmp	.+28     	; 0x129a <loop+0x244>
      {
        while (fnPressed)delay(1);
    127e:	b6 99       	sbic	0x16, 6	; 22
    1280:	06 c0       	rjmp	.+12     	; 0x128e <loop+0x238>
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	14 d3       	rcall	.+1576   	; 0x18b4 <delay>
    128c:	f8 cf       	rjmp	.-16     	; 0x127e <loop+0x228>
        if (_fn == 2)
    128e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_fn>
    1292:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <_fn+0x1>
    1296:	02 97       	sbiw	r24, 0x02	; 2
    1298:	49 f4       	brne	.+18     	; 0x12ac <loop+0x256>
        {
          Mode = 0;
    129a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <__data_end+0x1>
    129e:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
          _fn = 0;
    12a2:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_fn+0x1>
    12a6:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_fn>
    12aa:	0c c0       	rjmp	.+24     	; 0x12c4 <loop+0x26e>
        }
        else
        {
          Mode = 6;
    12ac:	86 e0       	ldi	r24, 0x06	; 6
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x1>
    12b4:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
          _fn = 2;
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_fn+0x1>
    12c0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_fn>
  }




  switch (Mode)
    12c4:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <__data_end>
    12c8:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <__data_end+0x1>
    12cc:	e7 30       	cpi	r30, 0x07	; 7
    12ce:	f1 05       	cpc	r31, r1
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <loop+0x27e>
    12d2:	41 c0       	rjmp	.+130    	; 0x1356 <loop+0x300>
    12d4:	ed 5e       	subi	r30, 0xED	; 237
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	09 94       	ijmp
  {
    case 0://normal
      pixels.setPixelColor(0, pixels.Color(0, 0, 0)); break;
    case 1://shift
      if ((idle / 6) % 2 == 1)
    12da:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <idle>
    12de:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <idle+0x1>
    12e2:	66 e0       	ldi	r22, 0x06	; 6
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	cf d3       	rcall	.+1950   	; 0x1a86 <__divmodhi4>
    12e8:	cb 01       	movw	r24, r22
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	cb d3       	rcall	.+1942   	; 0x1a86 <__divmodhi4>
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	21 f4       	brne	.+8      	; 0x12fc <loop+0x2a6>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	28 c0       	rjmp	.+80     	; 0x134c <loop+0x2f6>
      else
        pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    case 2://long_shift
      pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	45 e0       	ldi	r20, 0x05	; 5
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	23 c0       	rjmp	.+70     	; 0x134c <loop+0x2f6>
    case 3://sym
      if ((idle / 6) % 2 == 1)
    1306:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <idle>
    130a:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <idle+0x1>
    130e:	66 e0       	ldi	r22, 0x06	; 6
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	b9 d3       	rcall	.+1906   	; 0x1a86 <__divmodhi4>
    1314:	cb 01       	movw	r24, r22
    1316:	62 e0       	ldi	r22, 0x02	; 2
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	b5 d3       	rcall	.+1898   	; 0x1a86 <__divmodhi4>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	51 f3       	breq	.-44     	; 0x12f4 <loop+0x29e>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    case 4://long_sym
      pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	35 e0       	ldi	r19, 0x05	; 5
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	11 c0       	rjmp	.+34     	; 0x134c <loop+0x2f6>
    case 5://fn
      if ((idle / 6) % 2 == 1)
    132a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <idle>
    132e:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <idle+0x1>
    1332:	66 e0       	ldi	r22, 0x06	; 6
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	a7 d3       	rcall	.+1870   	; 0x1a86 <__divmodhi4>
    1338:	cb 01       	movw	r24, r22
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	a3 d3       	rcall	.+1862   	; 0x1a86 <__divmodhi4>
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	c1 f2       	breq	.-80     	; 0x12f4 <loop+0x29e>
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    1344:	25 e0       	ldi	r18, 0x05	; 5
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	61 d9       	rcall	.-3390   	; 0x618 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
  }

  pixels.show(); // This sends the updated pixel color to the hardware.
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	4a d7       	rcall	.+3732   	; 0x21f0 <__TEXT_REGION_LENGTH__+0x1f0>
  if (hadPressed == 0)
    135c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <hadPressed>
    1360:	81 11       	cpse	r24, r1
    1362:	04 c0       	rjmp	.+8      	; 0x136c <loop+0x316>
  {
    KEY = GetInput();
    1364:	25 db       	rcall	.-2486   	; 0x9b0 <_Z8GetInputv>
    1366:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <KEY>
    136a:	01 c0       	rjmp	.+2      	; 0x136e <loop+0x318>
  }
#ifdef USE_SOFTUART 
  else {
	requestEvent();
    136c:	25 de       	rcall	.-950    	; 0xfb8 <_Z12requestEventv>
  }
#endif
  idle++;
    136e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <idle>
    1372:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <idle+0x1>
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <idle+0x1>
    137c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <idle>
  delay(10);
    1380:	6a e0       	ldi	r22, 0x0A	; 10
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	95 c2       	rjmp	.+1322   	; 0x18b4 <delay>

0000138a <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    138a:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <twi_txBufferLength>
    138e:	26 2f       	mov	r18, r22
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	24 0f       	add	r18, r20
    1394:	31 1d       	adc	r19, r1
    1396:	21 32       	cpi	r18, 0x21	; 33
    1398:	31 05       	cpc	r19, r1
    139a:	dc f4       	brge	.+54     	; 0x13d2 <twi_transmit+0x48>
    139c:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <twi_state>
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	c9 f4       	brne	.+50     	; 0x13d6 <twi_transmit+0x4c>
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	86 17       	cp	r24, r22
    13ac:	58 f4       	brcc	.+22     	; 0x13c4 <twi_transmit+0x3a>
    13ae:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <twi_txBufferLength>
    13b2:	21 91       	ld	r18, Z+
    13b4:	dc 01       	movw	r26, r24
    13b6:	a5 5c       	subi	r26, 0xC5	; 197
    13b8:	bd 4f       	sbci	r27, 0xFD	; 253
    13ba:	a3 0f       	add	r26, r19
    13bc:	b1 1d       	adc	r27, r1
    13be:	2c 93       	st	X, r18
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	f3 cf       	rjmp	.-26     	; 0x13aa <twi_transmit+0x20>
    13c4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_txBufferLength>
    13c8:	68 0f       	add	r22, r24
    13ca:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <twi_txBufferLength>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	08 95       	ret
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	08 95       	ret

000013da <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    13da:	85 ed       	ldi	r24, 0xD5	; 213
    13dc:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    13de:	06 b6       	in	r0, 0x36	; 54
    13e0:	04 fc       	sbrc	r0, 4
    13e2:	fd cf       	rjmp	.-6      	; 0x13de <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    13e4:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_state>
    13e8:	08 95       	ret

000013ea <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    13ea:	85 ec       	ldi	r24, 0xC5	; 197
    13ec:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
    13ee:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_state>
    13f2:	08 95       	ret

000013f4 <__vector_17>:
}

ISR(TWI_vect)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
  switch(TW_STATUS){
    1416:	81 b1       	in	r24, 0x01	; 1
    1418:	88 7f       	andi	r24, 0xF8	; 248
    141a:	80 36       	cpi	r24, 0x60	; 96
    141c:	09 f4       	brne	.+2      	; 0x1420 <__vector_17+0x2c>
    141e:	9a c0       	rjmp	.+308    	; 0x1554 <__vector_17+0x160>
    1420:	70 f5       	brcc	.+92     	; 0x147e <__vector_17+0x8a>
    1422:	88 32       	cpi	r24, 0x28	; 40
    1424:	09 f4       	brne	.+2      	; 0x1428 <__vector_17+0x34>
    1426:	5c c0       	rjmp	.+184    	; 0x14e0 <__vector_17+0xec>
    1428:	90 f4       	brcc	.+36     	; 0x144e <__vector_17+0x5a>
    142a:	80 31       	cpi	r24, 0x10	; 16
    142c:	09 f4       	brne	.+2      	; 0x1430 <__vector_17+0x3c>
    142e:	55 c0       	rjmp	.+170    	; 0x14da <__vector_17+0xe6>
    1430:	38 f4       	brcc	.+14     	; 0x1440 <__vector_17+0x4c>
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <__vector_17+0x44>
    1436:	ec c0       	rjmp	.+472    	; 0x1610 <__vector_17+0x21c>
    1438:	88 30       	cpi	r24, 0x08	; 8
    143a:	09 f4       	brne	.+2      	; 0x143e <__vector_17+0x4a>
    143c:	4e c0       	rjmp	.+156    	; 0x14da <__vector_17+0xe6>
    143e:	eb c0       	rjmp	.+470    	; 0x1616 <__vector_17+0x222>
    1440:	88 31       	cpi	r24, 0x18	; 24
    1442:	09 f4       	brne	.+2      	; 0x1446 <__vector_17+0x52>
    1444:	4d c0       	rjmp	.+154    	; 0x14e0 <__vector_17+0xec>
    1446:	80 32       	cpi	r24, 0x20	; 32
    1448:	09 f4       	brne	.+2      	; 0x144c <__vector_17+0x58>
    144a:	5d c0       	rjmp	.+186    	; 0x1506 <__vector_17+0x112>
    144c:	e4 c0       	rjmp	.+456    	; 0x1616 <__vector_17+0x222>
    144e:	80 34       	cpi	r24, 0x40	; 64
    1450:	09 f4       	brne	.+2      	; 0x1454 <__vector_17+0x60>
    1452:	67 c0       	rjmp	.+206    	; 0x1522 <__vector_17+0x12e>
    1454:	50 f4       	brcc	.+20     	; 0x146a <__vector_17+0x76>
    1456:	80 33       	cpi	r24, 0x30	; 48
    1458:	09 f4       	brne	.+2      	; 0x145c <__vector_17+0x68>
    145a:	55 c0       	rjmp	.+170    	; 0x1506 <__vector_17+0x112>
    145c:	88 33       	cpi	r24, 0x38	; 56
    145e:	09 f0       	breq	.+2      	; 0x1462 <__vector_17+0x6e>
    1460:	da c0       	rjmp	.+436    	; 0x1616 <__vector_17+0x222>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1462:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twi_error>
      twi_releaseBus();
    1466:	c1 df       	rcall	.-126    	; 0x13ea <twi_releaseBus>
      break;
    1468:	d6 c0       	rjmp	.+428    	; 0x1616 <__vector_17+0x222>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    146a:	80 35       	cpi	r24, 0x50	; 80
    146c:	09 f4       	brne	.+2      	; 0x1470 <__vector_17+0x7c>
    146e:	4e c0       	rjmp	.+156    	; 0x150c <__vector_17+0x118>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	09 f4       	brne	.+2      	; 0x1476 <__vector_17+0x82>
    1474:	5b c0       	rjmp	.+182    	; 0x152c <__vector_17+0x138>
    1476:	88 34       	cpi	r24, 0x48	; 72
    1478:	09 f0       	breq	.+2      	; 0x147c <__vector_17+0x88>
    147a:	cd c0       	rjmp	.+410    	; 0x1616 <__vector_17+0x222>
    147c:	cb c0       	rjmp	.+406    	; 0x1614 <__vector_17+0x220>
    147e:	88 39       	cpi	r24, 0x98	; 152
    1480:	09 f4       	brne	.+2      	; 0x1484 <__vector_17+0x90>
    1482:	be c0       	rjmp	.+380    	; 0x1600 <__vector_17+0x20c>
    1484:	a8 f4       	brcc	.+42     	; 0x14b0 <__vector_17+0xbc>
    1486:	88 37       	cpi	r24, 0x78	; 120
    1488:	09 f4       	brne	.+2      	; 0x148c <__vector_17+0x98>
    148a:	64 c0       	rjmp	.+200    	; 0x1554 <__vector_17+0x160>
    148c:	38 f4       	brcc	.+14     	; 0x149c <__vector_17+0xa8>
    148e:	88 36       	cpi	r24, 0x68	; 104
    1490:	09 f4       	brne	.+2      	; 0x1494 <__vector_17+0xa0>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <__vector_17+0x160>
    1494:	80 37       	cpi	r24, 0x70	; 112
    1496:	09 f4       	brne	.+2      	; 0x149a <__vector_17+0xa6>
    1498:	5d c0       	rjmp	.+186    	; 0x1554 <__vector_17+0x160>
    149a:	bd c0       	rjmp	.+378    	; 0x1616 <__vector_17+0x222>
    149c:	88 38       	cpi	r24, 0x88	; 136
    149e:	09 f4       	brne	.+2      	; 0x14a2 <__vector_17+0xae>
    14a0:	af c0       	rjmp	.+350    	; 0x1600 <__vector_17+0x20c>
    14a2:	80 39       	cpi	r24, 0x90	; 144
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <__vector_17+0xb4>
    14a6:	5c c0       	rjmp	.+184    	; 0x1560 <__vector_17+0x16c>
    14a8:	80 38       	cpi	r24, 0x80	; 128
    14aa:	09 f0       	breq	.+2      	; 0x14ae <__vector_17+0xba>
    14ac:	b4 c0       	rjmp	.+360    	; 0x1616 <__vector_17+0x222>
    14ae:	58 c0       	rjmp	.+176    	; 0x1560 <__vector_17+0x16c>
    14b0:	80 3b       	cpi	r24, 0xB0	; 176
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <__vector_17+0xc2>
    14b4:	7e c0       	rjmp	.+252    	; 0x15b2 <__vector_17+0x1be>
    14b6:	38 f4       	brcc	.+14     	; 0x14c6 <__vector_17+0xd2>
    14b8:	80 3a       	cpi	r24, 0xA0	; 160
    14ba:	09 f4       	brne	.+2      	; 0x14be <__vector_17+0xca>
    14bc:	62 c0       	rjmp	.+196    	; 0x1582 <__vector_17+0x18e>
    14be:	88 3a       	cpi	r24, 0xA8	; 168
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__vector_17+0xd0>
    14c2:	77 c0       	rjmp	.+238    	; 0x15b2 <__vector_17+0x1be>
    14c4:	a8 c0       	rjmp	.+336    	; 0x1616 <__vector_17+0x222>
    14c6:	80 3c       	cpi	r24, 0xC0	; 192
    14c8:	09 f4       	brne	.+2      	; 0x14cc <__vector_17+0xd8>
    14ca:	9d c0       	rjmp	.+314    	; 0x1606 <__vector_17+0x212>
    14cc:	88 3c       	cpi	r24, 0xC8	; 200
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <__vector_17+0xde>
    14d0:	9a c0       	rjmp	.+308    	; 0x1606 <__vector_17+0x212>
    14d2:	88 3b       	cpi	r24, 0xB8	; 184
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__vector_17+0xe4>
    14d6:	82 c0       	rjmp	.+260    	; 0x15dc <__vector_17+0x1e8>
    14d8:	9e c0       	rjmp	.+316    	; 0x1616 <__vector_17+0x222>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    14da:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_slarw>
    14de:	10 c0       	rjmp	.+32     	; 0x1500 <__vector_17+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    14e0:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi_masterBufferIndex>
    14e4:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_masterBufferLength>
    14e8:	98 17       	cp	r25, r24
    14ea:	58 f5       	brcc	.+86     	; 0x1542 <__vector_17+0x14e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    14ec:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <twi_masterBufferIndex>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	8e 0f       	add	r24, r30
    14f4:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <twi_masterBufferIndex>
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e3 5a       	subi	r30, 0xA3	; 163
    14fc:	fd 4f       	sbci	r31, 0xFD	; 253
    14fe:	80 81       	ld	r24, Z
    1500:	83 b9       	out	0x03, r24	; 3
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1502:	85 ec       	ldi	r24, 0xC5	; 197
    1504:	7e c0       	rjmp	.+252    	; 0x1602 <__vector_17+0x20e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1506:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twi_error>
    150a:	84 c0       	rjmp	.+264    	; 0x1614 <__vector_17+0x220>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    150c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <twi_masterBufferIndex>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	8e 0f       	add	r24, r30
    1514:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <twi_masterBufferIndex>
    1518:	83 b1       	in	r24, 0x03	; 3
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	e3 5a       	subi	r30, 0xA3	; 163
    151e:	fd 4f       	sbci	r31, 0xFD	; 253
    1520:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1522:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi_masterBufferIndex>
    1526:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_masterBufferLength>
    152a:	67 c0       	rjmp	.+206    	; 0x15fa <__vector_17+0x206>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    152c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <twi_masterBufferIndex>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	8e 0f       	add	r24, r30
    1534:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <twi_masterBufferIndex>
    1538:	83 b1       	in	r24, 0x03	; 3
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	e3 5a       	subi	r30, 0xA3	; 163
    153e:	fd 4f       	sbci	r31, 0xFD	; 253
    1540:	80 83       	st	Z, r24
	if (twi_sendStop)
    1542:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_sendStop>
    1546:	81 11       	cpse	r24, r1
    1548:	65 c0       	rjmp	.+202    	; 0x1614 <__vector_17+0x220>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1550:	84 ea       	ldi	r24, 0xA4	; 164
    1552:	5a c0       	rjmp	.+180    	; 0x1608 <__vector_17+0x214>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    155a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_rxBufferIndex>
    155e:	d1 cf       	rjmp	.-94     	; 0x1502 <__vector_17+0x10e>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1560:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <twi_rxBufferIndex>
    1564:	80 32       	cpi	r24, 0x20	; 32
    1566:	08 f0       	brcs	.+2      	; 0x156a <__vector_17+0x176>
    1568:	4b c0       	rjmp	.+150    	; 0x1600 <__vector_17+0x20c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    156a:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <twi_rxBufferIndex>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	8e 0f       	add	r24, r30
    1572:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_rxBufferIndex>
    1576:	83 b1       	in	r24, 0x03	; 3
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	e7 5e       	subi	r30, 0xE7	; 231
    157c:	fd 4f       	sbci	r31, 0xFD	; 253
    157e:	80 83       	st	Z, r24
    1580:	c0 cf       	rjmp	.-128    	; 0x1502 <__vector_17+0x10e>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1582:	33 df       	rcall	.-410    	; 0x13ea <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1584:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <twi_rxBufferIndex>
    1588:	80 32       	cpi	r24, 0x20	; 32
    158a:	30 f4       	brcc	.+12     	; 0x1598 <__vector_17+0x1a4>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    158c:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <twi_rxBufferIndex>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e7 5e       	subi	r30, 0xE7	; 231
    1594:	fd 4f       	sbci	r31, 0xFD	; 253
    1596:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1598:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <twi_rxBufferIndex>
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <twi_onSlaveReceive>
    15a2:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <twi_onSlaveReceive+0x1>
    15a6:	89 e1       	ldi	r24, 0x19	; 25
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    15ac:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_rxBufferIndex>
      break;
    15b0:	32 c0       	rjmp	.+100    	; 0x1616 <__vector_17+0x222>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    15b8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    15bc:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    15c0:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <twi_onSlaveTransmit>
    15c4:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <twi_onSlaveTransmit+0x1>
    15c8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    15ca:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_txBufferLength>
    15ce:	81 11       	cpse	r24, r1
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <__vector_17+0x1e8>
        twi_txBufferLength = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    15d8:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    15dc:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_txBufferIndex>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	8e 0f       	add	r24, r30
    15e4:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <twi_txBufferIndex>
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	e5 5c       	subi	r30, 0xC5	; 197
    15ec:	fd 4f       	sbci	r31, 0xFD	; 253
    15ee:	80 81       	ld	r24, Z
    15f0:	83 b9       	out	0x03, r24	; 3
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15f2:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <twi_txBufferIndex>
    15f6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_txBufferLength>
    15fa:	98 17       	cp	r25, r24
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <__vector_17+0x20c>
    15fe:	81 cf       	rjmp	.-254    	; 0x1502 <__vector_17+0x10e>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1600:	85 e8       	ldi	r24, 0x85	; 133
    1602:	86 bf       	out	0x36, r24	; 54
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <__vector_17+0x222>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1606:	85 ec       	ldi	r24, 0xC5	; 197
    1608:	86 bf       	out	0x36, r24	; 54
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    160a:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_state>
      break;
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <__vector_17+0x222>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1610:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <twi_error>
      twi_stop();
    1614:	e2 de       	rcall	.-572    	; 0x13da <twi_stop>
      break;
  }
}
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1638:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    1642:	82 1b       	sub	r24, r18
    1644:	91 09       	sbc	r25, r1
    1646:	08 95       	ret

00001648 <_ZN7TwoWire4readEv>:
    1648:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    164c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    1650:	98 17       	cp	r25, r24
    1652:	50 f4       	brcc	.+20     	; 0x1668 <_ZN7TwoWire4readEv+0x20>
    1654:	e9 2f       	mov	r30, r25
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	ea 54       	subi	r30, 0x4A	; 74
    165a:	fd 4f       	sbci	r31, 0xFD	; 253
    165c:	20 81       	ld	r18, Z
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    1666:	02 c0       	rjmp	.+4      	; 0x166c <_ZN7TwoWire4readEv+0x24>
    1668:	2f ef       	ldi	r18, 0xFF	; 255
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	c9 01       	movw	r24, r18
    166e:	08 95       	ret

00001670 <_ZN7TwoWire4peekEv>:
    1670:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    1674:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    1678:	e8 17       	cp	r30, r24
    167a:	30 f4       	brcc	.+12     	; 0x1688 <_ZN7TwoWire4peekEv+0x18>
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ea 54       	subi	r30, 0x4A	; 74
    1680:	fd 4f       	sbci	r31, 0xFD	; 253
    1682:	80 81       	ld	r24, Z
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	08 95       	ret
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <_ZN7TwoWire5flushEv>:
    168e:	08 95       	ret

00001690 <_ZN7TwoWire5writeEPKhj>:
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	7c 01       	movw	r14, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8a 01       	movw	r16, r20
    16a6:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <_ZN7TwoWire12transmittingE>
    16aa:	22 23       	and	r18, r18
    16ac:	89 f0       	breq	.+34     	; 0x16d0 <_ZN7TwoWire5writeEPKhj+0x40>
    16ae:	eb 01       	movw	r28, r22
    16b0:	6b 01       	movw	r12, r22
    16b2:	c4 0e       	add	r12, r20
    16b4:	d5 1e       	adc	r13, r21
    16b6:	cc 15       	cp	r28, r12
    16b8:	dd 05       	cpc	r29, r13
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <_ZN7TwoWire5writeEPKhj+0x44>
    16bc:	69 91       	ld	r22, Y+
    16be:	d7 01       	movw	r26, r14
    16c0:	ed 91       	ld	r30, X+
    16c2:	fc 91       	ld	r31, X
    16c4:	01 90       	ld	r0, Z+
    16c6:	f0 81       	ld	r31, Z
    16c8:	e0 2d       	mov	r30, r0
    16ca:	c7 01       	movw	r24, r14
    16cc:	09 95       	icall
    16ce:	f3 cf       	rjmp	.-26     	; 0x16b6 <_ZN7TwoWire5writeEPKhj+0x26>
    16d0:	64 2f       	mov	r22, r20
    16d2:	5b de       	rcall	.-842    	; 0x138a <twi_transmit>
    16d4:	c8 01       	movw	r24, r16
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <_ZN7TwoWire5writeEh>:
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	1f 92       	push	r1
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	69 83       	std	Y+1, r22	; 0x01
    16f4:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <_ZN7TwoWire12transmittingE>
    16f8:	22 23       	and	r18, r18
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <_ZN7TwoWire5writeEh+0x48>
    16fc:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <_ZN7TwoWire14txBufferLengthE>
    1700:	20 32       	cpi	r18, 0x20	; 32
    1702:	40 f0       	brcs	.+16     	; 0x1714 <_ZN7TwoWire5writeEh+0x2c>
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	fc 01       	movw	r30, r24
    170a:	33 83       	std	Z+3, r19	; 0x03
    170c:	22 83       	std	Z+2, r18	; 0x02
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	14 c0       	rjmp	.+40     	; 0x173c <_ZN7TwoWire5writeEh+0x54>
    1714:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_ZN7TwoWire13txBufferIndexE>
    1718:	e8 2f       	mov	r30, r24
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	ec 56       	subi	r30, 0x6C	; 108
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	99 81       	ldd	r25, Y+1	; 0x01
    1722:	90 83       	st	Z, r25
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_ZN7TwoWire13txBufferIndexE>
    172a:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <_ZN7TwoWire14txBufferLengthE>
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <_ZN7TwoWire5writeEh+0x50>
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	29 de       	rcall	.-942    	; 0x138a <twi_transmit>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_ZN7TwoWireC1Ev>:
    1744:	fc 01       	movw	r30, r24
    1746:	13 82       	std	Z+3, r1	; 0x03
    1748:	12 82       	std	Z+2, r1	; 0x02
    174a:	88 ee       	ldi	r24, 0xE8	; 232
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	84 83       	std	Z+4, r24	; 0x04
    1754:	95 83       	std	Z+5, r25	; 0x05
    1756:	a6 83       	std	Z+6, r26	; 0x06
    1758:	b7 83       	std	Z+7, r27	; 0x07
    175a:	81 ed       	ldi	r24, 0xD1	; 209
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret

00001764 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1764:	85 e8       	ldi	r24, 0x85	; 133
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	ed cf       	rjmp	.-38     	; 0x1744 <_ZN7TwoWireC1Ev>

0000176a <initVariant>:
    176a:	08 95       	ret

0000176c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    176c:	dc d0       	rcall	.+440    	; 0x1926 <init>

	initVariant();
    176e:	fd df       	rcall	.-6      	; 0x176a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1770:	8f d8       	rcall	.-3810   	; 0x890 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1772:	c0 e0       	ldi	r28, 0x00	; 0
    1774:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1776:	6f dc       	rcall	.-1826   	; 0x1056 <loop>
		if (serialEventRun) serialEventRun();
    1778:	20 97       	sbiw	r28, 0x00	; 0
    177a:	e9 f3       	breq	.-6      	; 0x1776 <main+0xa>
    177c:	41 d4       	rcall	.+2178   	; 0x2000 <__TEXT_REGION_LENGTH__>
    177e:	fb cf       	rjmp	.-10     	; 0x1776 <main+0xa>

00001780 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	6c 01       	movw	r12, r24
    1792:	7a 01       	movw	r14, r20
    1794:	8b 01       	movw	r16, r22
  size_t n = 0;
    1796:	c0 e0       	ldi	r28, 0x00	; 0
    1798:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    179a:	ce 15       	cp	r28, r14
    179c:	df 05       	cpc	r29, r15
    179e:	81 f0       	breq	.+32     	; 0x17c0 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    17a0:	d8 01       	movw	r26, r16
    17a2:	6d 91       	ld	r22, X+
    17a4:	8d 01       	movw	r16, r26
    17a6:	d6 01       	movw	r26, r12
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	01 90       	ld	r0, Z+
    17ae:	f0 81       	ld	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	c6 01       	movw	r24, r12
    17b4:	09 95       	icall
    17b6:	89 2b       	or	r24, r25
    17b8:	11 f0       	breq	.+4      	; 0x17be <_ZN5Print5writeEPKhj+0x3e>
    17ba:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    17bc:	ee cf       	rjmp	.-36     	; 0x179a <_ZN5Print5writeEPKhj+0x1a>
    17be:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    17c0:	c7 01       	movw	r24, r14
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	08 95       	ret

000017d4 <__vector_9>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	8f 93       	push	r24
    17e4:	9f 93       	push	r25
    17e6:	af 93       	push	r26
    17e8:	bf 93       	push	r27
    17ea:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_millis>
    17ee:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_millis+0x1>
    17f2:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_millis+0x2>
    17f6:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_millis+0x3>
    17fa:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <timer0_fract>
    17fe:	26 e0       	ldi	r18, 0x06	; 6
    1800:	23 0f       	add	r18, r19
    1802:	2d 37       	cpi	r18, 0x7D	; 125
    1804:	20 f4       	brcc	.+8      	; 0x180e <__vector_9+0x3a>
    1806:	02 96       	adiw	r24, 0x02	; 2
    1808:	a1 1d       	adc	r26, r1
    180a:	b1 1d       	adc	r27, r1
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <__vector_9+0x44>
    180e:	29 e8       	ldi	r18, 0x89	; 137
    1810:	23 0f       	add	r18, r19
    1812:	03 96       	adiw	r24, 0x03	; 3
    1814:	a1 1d       	adc	r26, r1
    1816:	b1 1d       	adc	r27, r1
    1818:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <timer0_fract>
    181c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <timer0_millis>
    1820:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <timer0_millis+0x1>
    1824:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <timer0_millis+0x2>
    1828:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <timer0_millis+0x3>
    182c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <timer0_overflow_count>
    1830:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <timer0_overflow_count+0x1>
    1834:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <timer0_overflow_count+0x2>
    1838:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <timer0_overflow_count+0x3>
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	a1 1d       	adc	r26, r1
    1840:	b1 1d       	adc	r27, r1
    1842:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <timer0_overflow_count>
    1846:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <timer0_overflow_count+0x1>
    184a:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <timer0_overflow_count+0x2>
    184e:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <timer0_overflow_count+0x3>
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <micros>:
    1868:	3f b7       	in	r19, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <timer0_overflow_count>
    1870:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <timer0_overflow_count+0x1>
    1874:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <timer0_overflow_count+0x2>
    1878:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <timer0_overflow_count+0x3>
    187c:	22 b7       	in	r18, 0x32	; 50
    187e:	08 b6       	in	r0, 0x38	; 56
    1880:	00 fe       	sbrs	r0, 0
    1882:	05 c0       	rjmp	.+10     	; 0x188e <micros+0x26>
    1884:	2f 3f       	cpi	r18, 0xFF	; 255
    1886:	19 f0       	breq	.+6      	; 0x188e <micros+0x26>
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	a1 1d       	adc	r26, r1
    188c:	b1 1d       	adc	r27, r1
    188e:	3f bf       	out	0x3f, r19	; 63
    1890:	ba 2f       	mov	r27, r26
    1892:	a9 2f       	mov	r26, r25
    1894:	98 2f       	mov	r25, r24
    1896:	88 27       	eor	r24, r24
    1898:	82 0f       	add	r24, r18
    189a:	91 1d       	adc	r25, r1
    189c:	a1 1d       	adc	r26, r1
    189e:	b1 1d       	adc	r27, r1
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	43 e0       	ldi	r20, 0x03	; 3
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	4a 95       	dec	r20
    18b0:	d1 f7       	brne	.-12     	; 0x18a6 <micros+0x3e>
    18b2:	08 95       	ret

000018b4 <delay>:
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	6b 01       	movw	r12, r22
    18c6:	7c 01       	movw	r14, r24
    18c8:	cf df       	rcall	.-98     	; 0x1868 <micros>
    18ca:	4b 01       	movw	r8, r22
    18cc:	5c 01       	movw	r10, r24
    18ce:	c1 14       	cp	r12, r1
    18d0:	d1 04       	cpc	r13, r1
    18d2:	e1 04       	cpc	r14, r1
    18d4:	f1 04       	cpc	r15, r1
    18d6:	f1 f0       	breq	.+60     	; 0x1914 <delay+0x60>
    18d8:	c1 d0       	rcall	.+386    	; 0x1a5c <yield>
    18da:	c6 df       	rcall	.-116    	; 0x1868 <micros>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	88 19       	sub	r24, r8
    18e2:	99 09       	sbc	r25, r9
    18e4:	aa 09       	sbc	r26, r10
    18e6:	bb 09       	sbc	r27, r11
    18e8:	88 3e       	cpi	r24, 0xE8	; 232
    18ea:	93 40       	sbci	r25, 0x03	; 3
    18ec:	a1 05       	cpc	r26, r1
    18ee:	b1 05       	cpc	r27, r1
    18f0:	70 f3       	brcs	.-36     	; 0x18ce <delay+0x1a>
    18f2:	21 e0       	ldi	r18, 0x01	; 1
    18f4:	c2 1a       	sub	r12, r18
    18f6:	d1 08       	sbc	r13, r1
    18f8:	e1 08       	sbc	r14, r1
    18fa:	f1 08       	sbc	r15, r1
    18fc:	88 ee       	ldi	r24, 0xE8	; 232
    18fe:	88 0e       	add	r8, r24
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	98 1e       	adc	r9, r24
    1904:	a1 1c       	adc	r10, r1
    1906:	b1 1c       	adc	r11, r1
    1908:	c1 14       	cp	r12, r1
    190a:	d1 04       	cpc	r13, r1
    190c:	e1 04       	cpc	r14, r1
    190e:	f1 04       	cpc	r15, r1
    1910:	21 f7       	brne	.-56     	; 0x18da <delay+0x26>
    1912:	dd cf       	rjmp	.-70     	; 0x18ce <delay+0x1a>
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	9f 90       	pop	r9
    1922:	8f 90       	pop	r8
    1924:	08 95       	ret

00001926 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1926:	78 94       	sei
#if defined(__AVR_ATmega128__)
	// CPU specific: different values for the ATmega128
	sbi(TCCR0, CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
    1928:	83 b7       	in	r24, 0x33	; 51
    192a:	82 60       	ori	r24, 0x02	; 2
    192c:	83 bf       	out	0x33, r24	; 51
	sbi(TCCR0, CS00);
    192e:	83 b7       	in	r24, 0x33	; 51
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	83 bf       	out	0x33, r24	; 51
	#error Timer 0 prescale factor 64 not set correctly
#endif

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
    1934:	89 b7       	in	r24, 0x39	; 57
    1936:	81 60       	ori	r24, 0x01	; 1
    1938:	89 bf       	out	0x39, r24	; 57
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    193a:	1e bc       	out	0x2e, r1	; 46

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    193c:	8e b5       	in	r24, 0x2e	; 46
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	8e bd       	out	0x2e, r24	; 46
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1942:	8e b5       	in	r24, 0x2e	; 46
    1944:	81 60       	ori	r24, 0x01	; 1
    1946:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1948:	8f b5       	in	r24, 0x2f	; 47
    194a:	81 60       	ori	r24, 0x01	; 1
    194c:	8f bd       	out	0x2f, r24	; 47
#endif

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
    194e:	85 b5       	in	r24, 0x25	; 37
    1950:	84 60       	ori	r24, 0x04	; 4
    1952:	85 bd       	out	0x25, r24	; 37
	// Timer 2 not finished (may not be present on this CPU)
#endif

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
    1954:	85 b5       	in	r24, 0x25	; 37
    1956:	80 64       	ori	r24, 0x40	; 64
    1958:	85 bd       	out	0x25, r24	; 37
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    195a:	32 9a       	sbi	0x06, 2	; 6
		sbi(ADCSRA, ADPS1);
    195c:	31 9a       	sbi	0x06, 1	; 6
		cbi(ADCSRA, ADPS0);
    195e:	30 98       	cbi	0x06, 0	; 6
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1960:	37 9a       	sbi	0x06, 7	; 6

	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
    1962:	1a b8       	out	0x0a, r1	; 10
    1964:	08 95       	ret

00001966 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	39 f0       	breq	.+14     	; 0x1978 <turnOffPWM+0x12>
    196a:	86 30       	cpi	r24, 0x06	; 6
    196c:	49 f0       	breq	.+18     	; 0x1980 <turnOffPWM+0x1a>
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	51 f4       	brne	.+20     	; 0x1986 <turnOffPWM+0x20>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1972:	8f b5       	in	r24, 0x2f	; 47
    1974:	8f 77       	andi	r24, 0x7F	; 127
    1976:	02 c0       	rjmp	.+4      	; 0x197c <turnOffPWM+0x16>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1978:	8f b5       	in	r24, 0x2f	; 47
    197a:	8f 7d       	andi	r24, 0xDF	; 223
    197c:	8f bd       	out	0x2f, r24	; 47
    197e:	08 95       	ret
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
		#endif
		
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
    1980:	85 b5       	in	r24, 0x25	; 37
    1982:	8f 7d       	andi	r24, 0xDF	; 223
    1984:	85 bd       	out	0x25, r24	; 37
    1986:	08 95       	ret

00001988 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	fc 01       	movw	r30, r24
    1990:	e8 5b       	subi	r30, 0xB8	; 184
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1996:	fc 01       	movw	r30, r24
    1998:	e4 5a       	subi	r30, 0xA4	; 164
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    199e:	88 23       	and	r24, r24
    19a0:	61 f1       	breq	.+88     	; 0x19fa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	fc 01       	movw	r30, r24
    19aa:	e6 58       	subi	r30, 0x86	; 134
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	c5 91       	lpm	r28, Z+
    19b0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    19b2:	fc 01       	movw	r30, r24
    19b4:	e0 59       	subi	r30, 0x90	; 144
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	a5 91       	lpm	r26, Z+
    19ba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    19bc:	61 11       	cpse	r22, r1
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    19c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19c2:	f8 94       	cli
		*reg &= ~bit;
    19c4:	88 81       	ld	r24, Y
    19c6:	20 95       	com	r18
    19c8:	82 23       	and	r24, r18
    19ca:	88 83       	st	Y, r24
		*out &= ~bit;
    19cc:	ec 91       	ld	r30, X
    19ce:	2e 23       	and	r18, r30
    19d0:	0b c0       	rjmp	.+22     	; 0x19e8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19d2:	62 30       	cpi	r22, 0x02	; 2
    19d4:	61 f4       	brne	.+24     	; 0x19ee <pinMode+0x66>
		uint8_t oldSREG = SREG;
    19d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19d8:	f8 94       	cli
		*reg &= ~bit;
    19da:	88 81       	ld	r24, Y
    19dc:	32 2f       	mov	r19, r18
    19de:	30 95       	com	r19
    19e0:	83 23       	and	r24, r19
    19e2:	88 83       	st	Y, r24
		*out |= bit;
    19e4:	ec 91       	ld	r30, X
    19e6:	2e 2b       	or	r18, r30
    19e8:	2c 93       	st	X, r18
		SREG = oldSREG;
    19ea:	9f bf       	out	0x3f, r25	; 63
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    19ee:	8f b7       	in	r24, 0x3f	; 63
                cli();
    19f0:	f8 94       	cli
		*reg |= bit;
    19f2:	e8 81       	ld	r30, Y
    19f4:	2e 2b       	or	r18, r30
    19f6:	28 83       	st	Y, r18
		SREG = oldSREG;
    19f8:	8f bf       	out	0x3f, r24	; 63
	}
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	ec 5c       	subi	r30, 0xCC	; 204
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a12:	f9 01       	movw	r30, r18
    1a14:	e8 5b       	subi	r30, 0xB8	; 184
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	e4 5a       	subi	r30, 0xA4	; 164
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a22:	cc 23       	and	r28, r28
    1a24:	b9 f0       	breq	.+46     	; 0x1a54 <digitalWrite+0x54>
    1a26:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a28:	81 11       	cpse	r24, r1
    1a2a:	9d df       	rcall	.-198    	; 0x1966 <turnOffPWM>

	out = portOutputRegister(port);
    1a2c:	ec 2f       	mov	r30, r28
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	e0 59       	subi	r30, 0x90	; 144
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	a5 91       	lpm	r26, Z+
    1a3a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a3c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a3e:	f8 94       	cli

	if (val == LOW) {
    1a40:	11 11       	cpse	r17, r1
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <digitalWrite+0x4c>
		*out &= ~bit;
    1a44:	8c 91       	ld	r24, X
    1a46:	d0 95       	com	r29
    1a48:	d8 23       	and	r29, r24
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1a4c:	ec 91       	ld	r30, X
    1a4e:	de 2b       	or	r29, r30
    1a50:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a52:	9f bf       	out	0x3f, r25	; 63
}
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	08 95       	ret

00001a5c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1a5c:	08 95       	ret

00001a5e <__udivmodhi4>:
    1a5e:	aa 1b       	sub	r26, r26
    1a60:	bb 1b       	sub	r27, r27
    1a62:	51 e1       	ldi	r21, 0x11	; 17
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <__udivmodhi4_ep>

00001a66 <__udivmodhi4_loop>:
    1a66:	aa 1f       	adc	r26, r26
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	a6 17       	cp	r26, r22
    1a6c:	b7 07       	cpc	r27, r23
    1a6e:	10 f0       	brcs	.+4      	; 0x1a74 <__udivmodhi4_ep>
    1a70:	a6 1b       	sub	r26, r22
    1a72:	b7 0b       	sbc	r27, r23

00001a74 <__udivmodhi4_ep>:
    1a74:	88 1f       	adc	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	5a 95       	dec	r21
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <__udivmodhi4_loop>
    1a7c:	80 95       	com	r24
    1a7e:	90 95       	com	r25
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	08 95       	ret

00001a86 <__divmodhi4>:
    1a86:	97 fb       	bst	r25, 7
    1a88:	07 2e       	mov	r0, r23
    1a8a:	16 f4       	brtc	.+4      	; 0x1a90 <__divmodhi4+0xa>
    1a8c:	00 94       	com	r0
    1a8e:	06 d0       	rcall	.+12     	; 0x1a9c <__divmodhi4_neg1>
    1a90:	77 fd       	sbrc	r23, 7
    1a92:	08 d0       	rcall	.+16     	; 0x1aa4 <__divmodhi4_neg2>
    1a94:	e4 df       	rcall	.-56     	; 0x1a5e <__udivmodhi4>
    1a96:	07 fc       	sbrc	r0, 7
    1a98:	05 d0       	rcall	.+10     	; 0x1aa4 <__divmodhi4_neg2>
    1a9a:	3e f4       	brtc	.+14     	; 0x1aaa <__divmodhi4_exit>

00001a9c <__divmodhi4_neg1>:
    1a9c:	90 95       	com	r25
    1a9e:	81 95       	neg	r24
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <__divmodhi4_neg2>:
    1aa4:	70 95       	com	r23
    1aa6:	61 95       	neg	r22
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255

00001aaa <__divmodhi4_exit>:
    1aaa:	08 95       	ret

00001aac <__udivmodsi4>:
    1aac:	a1 e2       	ldi	r26, 0x21	; 33
    1aae:	1a 2e       	mov	r1, r26
    1ab0:	aa 1b       	sub	r26, r26
    1ab2:	bb 1b       	sub	r27, r27
    1ab4:	fd 01       	movw	r30, r26
    1ab6:	0d c0       	rjmp	.+26     	; 0x1ad2 <__udivmodsi4_ep>

00001ab8 <__udivmodsi4_loop>:
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	ee 1f       	adc	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	a2 17       	cp	r26, r18
    1ac2:	b3 07       	cpc	r27, r19
    1ac4:	e4 07       	cpc	r30, r20
    1ac6:	f5 07       	cpc	r31, r21
    1ac8:	20 f0       	brcs	.+8      	; 0x1ad2 <__udivmodsi4_ep>
    1aca:	a2 1b       	sub	r26, r18
    1acc:	b3 0b       	sbc	r27, r19
    1ace:	e4 0b       	sbc	r30, r20
    1ad0:	f5 0b       	sbc	r31, r21

00001ad2 <__udivmodsi4_ep>:
    1ad2:	66 1f       	adc	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	1a 94       	dec	r1
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <__udivmodsi4_loop>
    1ade:	60 95       	com	r22
    1ae0:	70 95       	com	r23
    1ae2:	80 95       	com	r24
    1ae4:	90 95       	com	r25
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	bd 01       	movw	r22, r26
    1aec:	cf 01       	movw	r24, r30
    1aee:	08 95       	ret

00001af0 <__divmodsi4>:
    1af0:	05 2e       	mov	r0, r21
    1af2:	97 fb       	bst	r25, 7
    1af4:	16 f4       	brtc	.+4      	; 0x1afa <__divmodsi4+0xa>
    1af6:	00 94       	com	r0
    1af8:	0f d0       	rcall	.+30     	; 0x1b18 <__negsi2>
    1afa:	57 fd       	sbrc	r21, 7
    1afc:	05 d0       	rcall	.+10     	; 0x1b08 <__divmodsi4_neg2>
    1afe:	d6 df       	rcall	.-84     	; 0x1aac <__udivmodsi4>
    1b00:	07 fc       	sbrc	r0, 7
    1b02:	02 d0       	rcall	.+4      	; 0x1b08 <__divmodsi4_neg2>
    1b04:	46 f4       	brtc	.+16     	; 0x1b16 <__divmodsi4_exit>
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <__negsi2>

00001b08 <__divmodsi4_neg2>:
    1b08:	50 95       	com	r21
    1b0a:	40 95       	com	r20
    1b0c:	30 95       	com	r19
    1b0e:	21 95       	neg	r18
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	4f 4f       	sbci	r20, 0xFF	; 255
    1b14:	5f 4f       	sbci	r21, 0xFF	; 255

00001b16 <__divmodsi4_exit>:
    1b16:	08 95       	ret

00001b18 <__negsi2>:
    1b18:	90 95       	com	r25
    1b1a:	80 95       	com	r24
    1b1c:	70 95       	com	r23
    1b1e:	61 95       	neg	r22
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	8f 4f       	sbci	r24, 0xFF	; 255
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	08 95       	ret

00001b28 <__tablejump2__>:
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	05 90       	lpm	r0, Z+
    1b2e:	f4 91       	lpm	r31, Z
    1b30:	e0 2d       	mov	r30, r0
    1b32:	09 94       	ijmp

00001b34 <malloc>:
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	91 05       	cpc	r25, r1
    1b40:	10 f4       	brcc	.+4      	; 0x1b46 <malloc+0x12>
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <__flp>
    1b4a:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <__flp+0x1>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	30 97       	sbiw	r30, 0x00	; 0
    1b58:	19 f1       	breq	.+70     	; 0x1ba0 <malloc+0x6c>
    1b5a:	40 81       	ld	r20, Z
    1b5c:	51 81       	ldd	r21, Z+1	; 0x01
    1b5e:	02 81       	ldd	r16, Z+2	; 0x02
    1b60:	13 81       	ldd	r17, Z+3	; 0x03
    1b62:	48 17       	cp	r20, r24
    1b64:	59 07       	cpc	r21, r25
    1b66:	c8 f0       	brcs	.+50     	; 0x1b9a <malloc+0x66>
    1b68:	84 17       	cp	r24, r20
    1b6a:	95 07       	cpc	r25, r21
    1b6c:	69 f4       	brne	.+26     	; 0x1b88 <malloc+0x54>
    1b6e:	10 97       	sbiw	r26, 0x00	; 0
    1b70:	31 f0       	breq	.+12     	; 0x1b7e <malloc+0x4a>
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	0c 93       	st	X, r16
    1b76:	12 97       	sbiw	r26, 0x02	; 2
    1b78:	13 96       	adiw	r26, 0x03	; 3
    1b7a:	1c 93       	st	X, r17
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <malloc+0x98>
    1b7e:	00 93 e1 02 	sts	0x02E1, r16	; 0x8002e1 <__flp>
    1b82:	10 93 e2 02 	sts	0x02E2, r17	; 0x8002e2 <__flp+0x1>
    1b86:	22 c0       	rjmp	.+68     	; 0x1bcc <malloc+0x98>
    1b88:	21 15       	cp	r18, r1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <malloc+0x60>
    1b8e:	42 17       	cp	r20, r18
    1b90:	53 07       	cpc	r21, r19
    1b92:	18 f4       	brcc	.+6      	; 0x1b9a <malloc+0x66>
    1b94:	9a 01       	movw	r18, r20
    1b96:	bd 01       	movw	r22, r26
    1b98:	ef 01       	movw	r28, r30
    1b9a:	df 01       	movw	r26, r30
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	db cf       	rjmp	.-74     	; 0x1b56 <malloc+0x22>
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	f9 f0       	breq	.+62     	; 0x1be4 <malloc+0xb0>
    1ba6:	28 1b       	sub	r18, r24
    1ba8:	39 0b       	sbc	r19, r25
    1baa:	24 30       	cpi	r18, 0x04	; 4
    1bac:	31 05       	cpc	r19, r1
    1bae:	80 f4       	brcc	.+32     	; 0x1bd0 <malloc+0x9c>
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	61 15       	cp	r22, r1
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <malloc+0x8e>
    1bba:	fb 01       	movw	r30, r22
    1bbc:	93 83       	std	Z+3, r25	; 0x03
    1bbe:	82 83       	std	Z+2, r24	; 0x02
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <malloc+0x96>
    1bc2:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <__flp+0x1>
    1bc6:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <__flp>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	32 96       	adiw	r30, 0x02	; 2
    1bce:	44 c0       	rjmp	.+136    	; 0x1c58 <malloc+0x124>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e2 0f       	add	r30, r18
    1bd4:	f3 1f       	adc	r31, r19
    1bd6:	81 93       	st	Z+, r24
    1bd8:	91 93       	st	Z+, r25
    1bda:	22 50       	subi	r18, 0x02	; 2
    1bdc:	31 09       	sbc	r19, r1
    1bde:	39 83       	std	Y+1, r19	; 0x01
    1be0:	28 83       	st	Y, r18
    1be2:	3a c0       	rjmp	.+116    	; 0x1c58 <malloc+0x124>
    1be4:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <__brkval>
    1be8:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <__brkval+0x1>
    1bec:	23 2b       	or	r18, r19
    1bee:	41 f4       	brne	.+16     	; 0x1c00 <malloc+0xcc>
    1bf0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1bf4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1bf8:	30 93 e0 02 	sts	0x02E0, r19	; 0x8002e0 <__brkval+0x1>
    1bfc:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <__brkval>
    1c00:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1c04:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1c08:	21 15       	cp	r18, r1
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	41 f4       	brne	.+16     	; 0x1c1e <malloc+0xea>
    1c0e:	2d b7       	in	r18, 0x3d	; 61
    1c10:	3e b7       	in	r19, 0x3e	; 62
    1c12:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1c16:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1c1a:	24 1b       	sub	r18, r20
    1c1c:	35 0b       	sbc	r19, r21
    1c1e:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <__brkval>
    1c22:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <__brkval+0x1>
    1c26:	e2 17       	cp	r30, r18
    1c28:	f3 07       	cpc	r31, r19
    1c2a:	a0 f4       	brcc	.+40     	; 0x1c54 <malloc+0x120>
    1c2c:	2e 1b       	sub	r18, r30
    1c2e:	3f 0b       	sbc	r19, r31
    1c30:	28 17       	cp	r18, r24
    1c32:	39 07       	cpc	r19, r25
    1c34:	78 f0       	brcs	.+30     	; 0x1c54 <malloc+0x120>
    1c36:	ac 01       	movw	r20, r24
    1c38:	4e 5f       	subi	r20, 0xFE	; 254
    1c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3c:	24 17       	cp	r18, r20
    1c3e:	35 07       	cpc	r19, r21
    1c40:	48 f0       	brcs	.+18     	; 0x1c54 <malloc+0x120>
    1c42:	4e 0f       	add	r20, r30
    1c44:	5f 1f       	adc	r21, r31
    1c46:	50 93 e0 02 	sts	0x02E0, r21	; 0x8002e0 <__brkval+0x1>
    1c4a:	40 93 df 02 	sts	0x02DF, r20	; 0x8002df <__brkval>
    1c4e:	81 93       	st	Z+, r24
    1c50:	91 93       	st	Z+, r25
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <malloc+0x124>
    1c54:	e0 e0       	ldi	r30, 0x00	; 0
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	cf 01       	movw	r24, r30
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <free>:
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <free+0xa>
    1c6c:	81 c0       	rjmp	.+258    	; 0x1d70 <free+0x10c>
    1c6e:	fc 01       	movw	r30, r24
    1c70:	32 97       	sbiw	r30, 0x02	; 2
    1c72:	13 82       	std	Z+3, r1	; 0x03
    1c74:	12 82       	std	Z+2, r1	; 0x02
    1c76:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <__flp>
    1c7a:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <__flp+0x1>
    1c7e:	10 97       	sbiw	r26, 0x00	; 0
    1c80:	81 f4       	brne	.+32     	; 0x1ca2 <free+0x3e>
    1c82:	20 81       	ld	r18, Z
    1c84:	31 81       	ldd	r19, Z+1	; 0x01
    1c86:	82 0f       	add	r24, r18
    1c88:	93 1f       	adc	r25, r19
    1c8a:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <__brkval>
    1c8e:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <__brkval+0x1>
    1c92:	28 17       	cp	r18, r24
    1c94:	39 07       	cpc	r19, r25
    1c96:	51 f5       	brne	.+84     	; 0x1cec <free+0x88>
    1c98:	f0 93 e0 02 	sts	0x02E0, r31	; 0x8002e0 <__brkval+0x1>
    1c9c:	e0 93 df 02 	sts	0x02DF, r30	; 0x8002df <__brkval>
    1ca0:	67 c0       	rjmp	.+206    	; 0x1d70 <free+0x10c>
    1ca2:	ed 01       	movw	r28, r26
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	ce 17       	cp	r28, r30
    1caa:	df 07       	cpc	r29, r31
    1cac:	40 f4       	brcc	.+16     	; 0x1cbe <free+0x5a>
    1cae:	4a 81       	ldd	r20, Y+2	; 0x02
    1cb0:	5b 81       	ldd	r21, Y+3	; 0x03
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	41 15       	cp	r20, r1
    1cb6:	51 05       	cpc	r21, r1
    1cb8:	f1 f0       	breq	.+60     	; 0x1cf6 <free+0x92>
    1cba:	ea 01       	movw	r28, r20
    1cbc:	f5 cf       	rjmp	.-22     	; 0x1ca8 <free+0x44>
    1cbe:	d3 83       	std	Z+3, r29	; 0x03
    1cc0:	c2 83       	std	Z+2, r28	; 0x02
    1cc2:	40 81       	ld	r20, Z
    1cc4:	51 81       	ldd	r21, Z+1	; 0x01
    1cc6:	84 0f       	add	r24, r20
    1cc8:	95 1f       	adc	r25, r21
    1cca:	c8 17       	cp	r28, r24
    1ccc:	d9 07       	cpc	r29, r25
    1cce:	59 f4       	brne	.+22     	; 0x1ce6 <free+0x82>
    1cd0:	88 81       	ld	r24, Y
    1cd2:	99 81       	ldd	r25, Y+1	; 0x01
    1cd4:	84 0f       	add	r24, r20
    1cd6:	95 1f       	adc	r25, r21
    1cd8:	02 96       	adiw	r24, 0x02	; 2
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	93 83       	std	Z+3, r25	; 0x03
    1ce4:	82 83       	std	Z+2, r24	; 0x02
    1ce6:	21 15       	cp	r18, r1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <free+0x92>
    1cec:	f0 93 e2 02 	sts	0x02E2, r31	; 0x8002e2 <__flp+0x1>
    1cf0:	e0 93 e1 02 	sts	0x02E1, r30	; 0x8002e1 <__flp>
    1cf4:	3d c0       	rjmp	.+122    	; 0x1d70 <free+0x10c>
    1cf6:	e9 01       	movw	r28, r18
    1cf8:	fb 83       	std	Y+3, r31	; 0x03
    1cfa:	ea 83       	std	Y+2, r30	; 0x02
    1cfc:	49 91       	ld	r20, Y+
    1cfe:	59 91       	ld	r21, Y+
    1d00:	c4 0f       	add	r28, r20
    1d02:	d5 1f       	adc	r29, r21
    1d04:	ec 17       	cp	r30, r28
    1d06:	fd 07       	cpc	r31, r29
    1d08:	61 f4       	brne	.+24     	; 0x1d22 <free+0xbe>
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	e9 01       	movw	r28, r18
    1d16:	99 83       	std	Y+1, r25	; 0x01
    1d18:	88 83       	st	Y, r24
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	8a 83       	std	Y+2, r24	; 0x02
    1d22:	e0 e0       	ldi	r30, 0x00	; 0
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	13 97       	sbiw	r26, 0x03	; 3
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	19 f0       	breq	.+6      	; 0x1d38 <free+0xd4>
    1d32:	fd 01       	movw	r30, r26
    1d34:	dc 01       	movw	r26, r24
    1d36:	f7 cf       	rjmp	.-18     	; 0x1d26 <free+0xc2>
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9c 91       	ld	r25, X
    1d3c:	11 97       	sbiw	r26, 0x01	; 1
    1d3e:	9d 01       	movw	r18, r26
    1d40:	2e 5f       	subi	r18, 0xFE	; 254
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	82 0f       	add	r24, r18
    1d46:	93 1f       	adc	r25, r19
    1d48:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <__brkval>
    1d4c:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <__brkval+0x1>
    1d50:	28 17       	cp	r18, r24
    1d52:	39 07       	cpc	r19, r25
    1d54:	69 f4       	brne	.+26     	; 0x1d70 <free+0x10c>
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	29 f4       	brne	.+10     	; 0x1d64 <free+0x100>
    1d5a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__flp+0x1>
    1d5e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <__flp>
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <free+0x104>
    1d64:	13 82       	std	Z+3, r1	; 0x03
    1d66:	12 82       	std	Z+2, r1	; 0x02
    1d68:	b0 93 e0 02 	sts	0x02E0, r27	; 0x8002e0 <__brkval+0x1>
    1d6c:	a0 93 df 02 	sts	0x02DF, r26	; 0x8002df <__brkval>
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <memset>:
    1d76:	dc 01       	movw	r26, r24
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <memset+0x6>
    1d7a:	6d 93       	st	X+, r22
    1d7c:	41 50       	subi	r20, 0x01	; 1
    1d7e:	50 40       	sbci	r21, 0x00	; 0
    1d80:	e0 f7       	brcc	.-8      	; 0x1d7a <memset+0x4>
    1d82:	08 95       	ret

00001d84 <__do_global_dtors>:
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	c4 e4       	ldi	r28, 0x44	; 68
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <__do_global_dtors+0xe>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	cc de       	rcall	.-616    	; 0x1b28 <__tablejump2__>
    1d90:	21 96       	adiw	r28, 0x01	; 1
    1d92:	c5 34       	cpi	r28, 0x45	; 69
    1d94:	d1 07       	cpc	r29, r17
    1d96:	d1 f7       	brne	.-12     	; 0x1d8c <__do_global_dtors+0x8>
    1d98:	f8 94       	cli

00001d9a <__stop_program>:
    1d9a:	ff cf       	rjmp	.-2      	; 0x1d9a <__stop_program>
